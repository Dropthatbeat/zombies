variables
{
	global:
		0: roundnumber
		1: numberofzombies
		3: Difficulty
		13: powerconnected
		18: Died
		21: Vectordoorpositions
		26: doors
		27: impulseDoorArray
		28: telespot
		29: lesszomb
		30: walljumpers
		31: dispencerposition
		32: zombspeed
		33: zombstrafe
		34: zombjump
		35: experiencesystem
		36: hero
		37: idlebots
		38: dispencerplaced
		39: AN
		40: forindex
		41: trapeffect
		42: start
		43: buyheros
		44: buyperks
		46: doorradius
		47: mysterylocations
		48: rngbox
		49: boxcounter
		50: rngbox2
		51: boxcounter2
		52: Mysterylocations2
		53: omnicspawn
		54: bossSpawn
		55: bot1spawn
		56: bot2spawn
		58: challengewave
		59: chwaveinterval
		60: setspawn
		61: aprilquotes
		62: aprilrng
		63: spawntype
		64: botspawnzone
		65: Beameffectdoors
		66: Bosssequencer
		67: dooreffectsequencer
		68: appenddoorsequencer
		70: startlines
		71: heroradius
		72: diedradius
		73: tipstrings
		74: bossbuypositions
		75: herobuyrandomized
		76: perkbuyrandomized
		77: outofpsawn
		78: romanN
		79: romanNcounter
		80: teleportercolor
		81: teleporterwait
		83: AllPos
		84: AllDir
		85: firstpos
		86: secondpos
		87: firstpoint2
		88: secondpoint2
		89: second
		90: z
		91: Wall_ID
		93: is_Grounded
		94: g_beamType
		95: numbers
		96: colors
		97: compressedData
		98: doorscompresser
		99: decompressed
		100: i
		101: scratch
		102: param0
		103: param1
		104: param2
		105: param3
		106: param4
		107: charIndex

	player:
		0: points
		3: magazines
		4: doublemag
		9: sprintburstperk
		10: healthmax
		11: damagevariable
		12: healvariable
		13: InfoUI
		14: InfoCooldown
		16: botTarget
		17: HideHints
		23: XPlevel
		26: Jugg
		27: singlelives
		28: Packapunch
		30: Maniac
		31: revived
		32: revivebought
		33: UI
		36: idlebot
		38: healovertime
		39: xp
		40: Movement
		41: Head_HP
		42: Part
		43: Part2
		44: Speed
		45: doorimpulse
		46: dispencereffect
		47: xparray
		49: herohp
		51: currentheroxp
		52: doormessage
		53: currentdoor
		55: Major_Attacks
		56: currentdoorIndex
		57: do
		58: doorresponse
		59: heroswap
		60: currentswap
		61: perkinfo
		62: Perkui
		63: currentmagazines
		64: currentultcharge
		65: ultcharge
		66: heroiconswap
		67: abilitycooldown
		68: followerbuy
		69: filterpos
		70: lastsavedpos
		71: closestbodypos
		72: fullbodypos
		73: prevpos_intersection
		74: active_wall
		75: closestwall
		76: x
		77: intersection_length
		78: thickness
}

subroutines
{
	0: herobuy1250
	2: herobuy1750
	3: doorimpulse
	4: wavespawn
	5: followerattack1
	6: followerattack2
	7: perkbuyanimation
	8: followerbuy
	9: DecompressString
	10: ParseNumber
}

rule("1 Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.roundnumber = 0;
		Global.numberofzombies = 0;
		Global.C = 0;
		Global.P = 0;
		Global.Q = Empty Array;
		Global.T = Empty Array;
		Global.Y = Empty Array;
		disabled Modify Global Variable(Y, Append To Array, Vector(-23.738, 22.631, -120.650));
		disabled Create HUD Text(All Players(Team 1), Null, Null, String("{0}: {1}", Global.numberofzombies, String("Enemies")), Right, 0, Color(
			Red), Color(Red), Color(Red), Visible To and String, Visible Always);
		Global.O = False;
		Global.M[0] = Vector(500, 25, 500);
		Global.M[1] = Vector(500, 25, 500);
		Global.M[2] = Vector(500, 25, 500);
		Global.M[3] = Vector(500, 25, 500);
		Global.M[4] = Vector(500, 25, 500);
		Global.M[5] = Vector(500, 25, 500);
		Create Effect(All Players(Team 1), Orb, Color(White), Global.M[0], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Yellow), Global.M[1], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Green), Global.M[2], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Violet), Global.M[3], 0.100, None);
		Create Effect(All Players(Team 1), Orb, Color(Red), Global.M[4], 1, Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Orange), Global.M[5], 1, Position and Radius);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[1] == 1), Custom String("{0}", Hero Icon String(Hero(
			Ramattra))), Null, Custom String(" Double points!"), Top, 1, Color(White), Color(White), Color(Orange), Visible To and String,
			Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[2] == 1), Custom String("{0}", Hero Icon String(Hero(
			Ramattra))), Null, Custom String(" Time Freeze"), Top, 1, Color(White), Color(White), Color(Orange), Visible To and String,
			Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[4] == 1), Custom String("{0}", Hero Icon String(Hero(
			Ramattra))), Null, Custom String(" Insta-Kill!"), Top, 1, Color(White), Color(White), Color(Orange), Visible To and String,
			Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[0] == 1), Custom String("{0}", Hero Icon String(Hero(
			Ramattra))), Null, Custom String(" Ultimate Mayhem!"), Top, 1, Color(White), Color(White), Color(Orange),
			Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[5] == 1), Custom String("{0}", Hero Icon String(Hero(
			Ramattra))), Null, Custom String("Max Ammo!"), Top, 1, Color(White), Color(White), Color(Orange), Visible To and String,
			Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[3] == 1), Custom String("{0}", Hero Icon String(Hero(
			Ramattra))), Null, Custom String("Data Reset."), Top, 1, Color(White), Color(White), Color(Orange), Visible To and String,
			Visible Never);
		Global.appenddoorsequencer = Empty Array;
		Global.dooreffectsequencer = Empty Array;
		Global.teleportercolor = Color(Blue);
		Global.Beameffectdoors = Empty Array;
	}
}

disabled rule("2 round change")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.numberofzombies <= 0;
		Global.O == False;
		Global.start == 1;
	}

	actions
	{
		For Global Variable(AN, 0, Count Of(Global.omnicspawn), 1);
			Destroy Dummy Bot(Team 2, Global.omnicspawn[Global.AN]);
		End;
		Global.roundnumber += 1;
		Global.Z = 1;
		Set Ultimate Charge(All Players(Team 1), 100);
		Big Message(All Players(All Teams), String("Round {0}", Global.romanN[Global.romanNcounter]));
		Global.P = 0;
		All Dead Players(Team 1).Packapunch = 0;
		Clear Status(All Dead Players(Team 1), Burning);
		All Dead Players(Team 1).damagevariable = 100;
		Teleport(All Dead Players(Team 1), Nearest Walkable Position(Random Value In Array(All Living Players(Team 1)) + Vector(
			Random Integer(-5, 5), 0, Random Integer(-5, 5))));
		Start Forcing Player To Be Hero(All Dead Players(Team 1), Hero(Cassidy));
		Resurrect(All Dead Players(Team 1));
		Global.Died[0] = Vector(500, 0, 500);
		Global.Died[1] = Vector(500, 0, 500);
		Global.Died[2] = Vector(500, 0, 500);
		Global.Died[3] = Vector(500, 0, 500);
		All Players(Team 1).InfoCooldown = 0;
		All Players(Team 1).P = 0;
		All Players(Team 1).botTarget = 0;
		All Players(Team 1).HideHints = 0;
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(0, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(1, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(2, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(3, Team 2));
		disabled Wait(0.016, Ignore Condition);
		disabled Respawn(Players In Slot(4, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(5, Team 2));
		Set Status(All Living Players(Team 1), Null, Phased Out, 2);
		All Players(Team 1).Head_HP = 3;
		Global.chwaveinterval += 1;
		Skip If(Global.roundnumber > 10, 1);
		Global.romanNcounter += 1;
		All Players(Team 1).ultcharge[0] = 100;
		All Players(Team 1).ultcharge[1] = 100;
	}
}

disabled rule("3 Set Round Kills")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Z == 1;
		Global.O == False;
	}

	actions
	{
		If(Global.roundnumber <= 12);
			Global.numberofzombies = 12 + Global.roundnumber * 2;
			Wait(1, Ignore Condition);
			Global.Z = 0;
		Else If(Global.roundnumber >= 13);
			Global.numberofzombies = Workshop Setting Integer(Custom String("difficulty"), Custom String("max zombies per wave"), 72, 8, 100,
				0);
			Wait(1, Ignore Condition);
			Global.Z = 0;
	}
}

rule("5 Time manager")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.O == False;
	}

	actions
	{
		"need to change later when using soft restart"
		If(Is Assembling Heroes == True);
			Set Match Time(5);
			Wait(6, Ignore Condition);
		End;
		Wait(40, Ignore Condition);
		Set Match Time(3599);
		Wait(3000, Abort When False);
		Loop If Condition Is True;
	}
}

rule("6 Defeat (needs to be changed to be a soft restart)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For All(All Players(Team 1), Is Dead(Current Array Element)) == True;
		Has Spawned(All Players(Team 1)) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Global.setspawn = Random Integer(0, 5);
		Destroy All Dummy Bots;
		Start Camera(All Players(Team 1), Vector(317.328, -25.644, -140.906), Vector(320.513, -24.050, -134.612), 0);
		Destroy All HUD Text;
		Destroy All Effects;
		Wait(4, Ignore Condition);
		Go To Assemble Heroes;
		If(Global.setspawn == 0);
			Teleport(All Players(Team 1), Vector(-63.355, -148.766, -17.141));
			Global.botspawnzone = 0;
			Start Forcing Spawn Room(All Teams, 1);
			Global.telespot = 101;
		Else If(Global.setspawn == 1);
			Teleport(All Players(Team 1), Vector(-65.701, -150.372, 136.652));
			Global.botspawnzone = 0;
			Start Forcing Spawn Room(All Teams, 1);
			Global.telespot = 101;
		Else If(Global.setspawn == 2);
			Teleport(All Players(Team 1), Vector(354.630, 46.375, 181.943));
			Global.botspawnzone = 1;
			Start Forcing Spawn Room(All Teams, 0);
			Global.telespot = 102;
		Else If(Global.setspawn == 3);
			Teleport(All Players(Team 1), Vector(185.152, 46.154, 185.661));
			Global.botspawnzone = 1;
			Start Forcing Spawn Room(All Teams, 0);
			Global.telespot = 102;
		Else If(Global.setspawn == 4);
			Teleport(All Players(Team 1), Vector(367.509, -8.358, -241.533));
			Global.botspawnzone = 2;
			Start Forcing Spawn Room(All Teams, 2);
			Global.telespot = 103;
		Else If(Global.setspawn == 5);
			Teleport(All Players(Team 1), Vector(200.420, -8.412, -242.411));
			Global.botspawnzone = 2;
			Start Forcing Spawn Room(All Teams, 2);
			Global.telespot = 103;
		End;
		Resurrect(All Players(Team 1));
		Wait(2, Ignore Condition);
		Global.roundnumber = 0;
		Global.start = 0;
	}
}

rule("7 Disable Bot Respawn")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
	}
}

rule("8 respawn bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Number Of Living Players(Team 2) < Global.numberofzombies;
		Global.numberofzombies >= 1;
		disabled Global.roundnumber > 1;
		disabled Is Dead(Event Player) == True;
		Global.roundnumber != 30;
		Global.roundnumber != 10;
		Global.roundnumber != 20;
	}

	actions
	{
		Wait(1, Abort When False);
		Respawn(Random Value In Array(All Dead Players(Team 2)));
		Loop If Condition Is True;
	}
}

rule("9 Omnic Kill (Global Var B) (all powerups)")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundnumber > 3;
	}

	actions
	{
		"insta ultimate"
		If(Slot Of(Event Player) == 0);
			disabled If(Global.roundnumber > 3);
			Event Player.B = Random Integer(1, 75);
			Skip If(Event Player.B != 1, 1);
			Global.M[0] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
			Set Ultimate Charge(Event Player, 0);
			disabled End;
		"double points"
		Else If(Slot Of(Event Player) == 1);
			Event Player.B = Random Integer(1, 75);
			Skip If(Event Player.B != 1, 1);
			Global.M[1] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
			Set Ultimate Charge(Event Player, 0);
			Skip If(Global.numberofzombies < 6, 1);
		"slowmotion"
		Else If(Slot Of(Event Player) == 2);
			Event Player.B = Random Integer(1, 50);
			Skip If(Event Player.B != 1, 1);
			Global.M[2] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
			Set Ultimate Charge(Event Player, 0);
		"vaporized"
		Else If(Slot Of(Event Player) == 3);
			Event Player.B = Random Integer(1, 75);
			Skip If(Event Player.B != 1, 1);
			Global.M[3] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
			Set Ultimate Charge(Event Player, 0);
		"instakill"
		Else If(Slot Of(Event Player) == 4);
			Event Player.B = Random Integer(1, 75);
			Skip If(Event Player.B != 1, 1);
			Global.M[4] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
			Set Ultimate Charge(Event Player, 0);
		"max ammo"
		Else If(Slot Of(Event Player) == 5);
			Event Player.B = Random Integer(1, 75);
			Skip If(Event Player.B != 1, 1);
			Global.M[5] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
			Set Ultimate Charge(Event Player, 0);
	}
}

rule("15 Unstuck Bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Line of Sight(Event Player, First Of(All Living Players(Team 1)), Barriers Do Not Block LOS) == False;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) != True;
		Has Status(Event Player, Frozen) != True;
		Has Status(Event Player, Asleep) != True;
		Has Status(Event Player, Stunned) != True;
		disabled Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 2.500;
		Event Player.idlebot == 1;
	}

	actions
	{
		Wait(2.500, Abort When False);
		disabled Teleport(Event Player, Random Value In Array(Global.Y));
		Teleport(Event Player, Nearest Walkable Position(Direction From Angles(Random Real(0, 360), Random Real(-3, 3)) * Random Real(10,
			20) + Position Of(First Of(All Living Players(Team 1)))));
		disabled Loop;
	}
}

rule("16 Jump If Far Away From Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > Random Integer(5, 20);
		Global.O == False;
		Global.idlebots == False;
		Horizontal Speed Of(Event Player) < 0.700;
	}

	actions
	{
		Skip If(Global.zombjump == 0, 99);
		disabled Skip If(Global.powerconnected == 1, 1);
		disabled Skip If(Global.roundnumber < 15, 99);
		Press Button(Event Player, Button(Jump));
		Wait(10, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("17 Bots Under Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Vertical Facing Angle Of(Event Player) < -10;
		Global.O == False;
		Speed Of(Event Player) < 0.950;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 1;
		Has Status(Event Player, Hacked) != True;
		Has Status(Event Player, Knocked Down) != True;
		Has Status(Event Player, Frozen) != True;
		Has Status(Event Player, Asleep) != True;
		Has Status(Event Player, Stunned) != True;
		Global.roundnumber != 30;
		Global.roundnumber != 10;
		Global.roundnumber != 20;
	}

	actions
	{
		Wait(0.330, Abort When False);
		Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
		Skip If(Global.walljumpers == False, 99);
		Disable Movement Collision With Environment(Event Player, False);
		Wait(2.500, Ignore Condition);
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("18 Get out of Spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
		Global.outofpsawn == 1;
	}

	actions
	{
		Wait(1, Ignore Condition);
		If(Global.setspawn == 0);
			Teleport(Event Player, Vector(-63.355, -148.766, -17.141));
			Global.botspawnzone = 0;
			Start Forcing Spawn Room(All Teams, 1);
			Global.telespot = 101;
		Else If(Global.setspawn == 1);
			Teleport(Event Player, Vector(-65.701, -150.372, 136.652));
			Global.botspawnzone = 0;
			Start Forcing Spawn Room(All Teams, 1);
			Global.telespot = 101;
		Else If(Global.setspawn == 2);
			Teleport(Event Player, Vector(354.630, 46.375, 181.943));
			Global.botspawnzone = 1;
			Start Forcing Spawn Room(All Teams, 0);
			Global.telespot = 102;
		Else If(Global.setspawn == 3);
			Teleport(Event Player, Vector(185.152, 46.154, 185.661));
			Global.botspawnzone = 1;
			Start Forcing Spawn Room(All Teams, 0);
			Global.telespot = 102;
		Else If(Global.setspawn == 4);
			Teleport(Event Player, Vector(367.509, -8.358, -241.533));
			Global.botspawnzone = 2;
			Start Forcing Spawn Room(All Teams, 2);
			Global.telespot = 103;
		Else If(Global.setspawn == 5);
			Teleport(Event Player, Vector(200.420, -8.412, -242.411));
			Global.botspawnzone = 2;
			Start Forcing Spawn Room(All Teams, 2);
			Global.telespot = 103;
	}
}

rule("23 Initiate Health, Damage, and Healing Variables")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.healthmax == 0;
	}

	actions
	{
		Event Player.healthmax = 50;
		Event Player.damagevariable = 100;
		Event Player.healvariable = 100;
	}
}

rule("26 Revive Player system")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[0]) <= 4;
		Event Player != Players In Slot(0, Team 1);
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Is True For Any(Global.Died, Distance Between(Current Array Element, Event Player) < Global.diedradius[Current Array Index])
			== True;
	}

	actions
	{
		Event Player.C = Players In Slot(0, Team 1);
		Chase Player Variable Over Time(Players In Slot(0, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(0, Team 1), Event Player);
		Resurrect(Players In Slot(0, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Global.Died[0] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Skip If(Event Player.H == 1, 1);
		All Players(Team 1).InfoCooldown = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(0, Team 1), Null, Phased Out, 5);
		Set Max Health(Players In Slot(0, Team 1), 100);
		Attach Players(Players In Slot(6, Team 1), Event Player, Vector(-0.500, 1.800, -0.200));
	}
}

rule("27 Cancel Revive Player 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is True For Any(Global.Died, Distance Between(Current Array Element, Event Player) > Global.diedradius[Current Array Index])
			== True;
		Event Player != Players In Slot(0, Team 1);
	}

	actions
	{
		Players In Slot(0, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(0, Team 1), C);
	}
}

rule("35 Player Respawn, Move Revive Effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Global.Died[Slot Of(Event Player)] = Vector(500, 0, 500);
	}
}

rule("36 Pickup perk drops")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[1]) <= 1.500;
		All Players(Team 1).G[1] == False;
		Global.roundnumber >= 1;
		Is True For Any(Global.M, Distance Between(Current Array Element, Event Player) < Global.diedradius[Current Array Index]) == True;
	}

	actions
	{
		Global.M[1] = Vector(500, 25, 500);
		All Players(Team 1).G[1] = True;
		All Players(Team 1).S[1] = 1;
		Big Message(All Players(All Teams), Custom String("Double points!"));
		All Players(Team 1).H = 2;
		Wait(60, Ignore Condition);
		All Players(Team 1).H = 1;
		All Players(Team 1).G[1] = False;
		All Players(Team 1).S[1] = 0;
	}
}

rule("37 Pickup slowmotion")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[2]) <= 1.500;
		All Players(Team 1).G[2] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[2] = Vector(500, 25, 500);
		All Players(Team 1).G[2] = True;
		All Players(Team 1).S[2] = 1;
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Slower"), String("Time"), String("-> {0}", String("{0} sec",
			10))));
		Set Slow Motion(50);
		Wait(5, Ignore Condition);
		Set Slow Motion(100);
		All Players(Team 1).G[2] = False;
		All Players(Team 1).S[2] = 0;
	}
}

rule("38 Pickup insta kill")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[4]) <= 1.500;
		All Players(Team 1).G[4] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[4] = Vector(500, 25, 500);
		All Players(Team 1).G[4] = True;
		All Players(Team 1).S[4] = 1;
		Big Message(All Players(All Teams), Custom String("Insta-Kill!"));
		Set Damage Dealt(All Players(Team 1), 999999);
		Set Damage Received(All Players(Team 2), 1000);
		Wait(30, Ignore Condition);
		Set Damage Dealt(Players In Slot(0, Team 1), Players In Slot(0, Team 1).damagevariable);
		Set Damage Dealt(Players In Slot(1, Team 1), Players In Slot(1, Team 1).damagevariable);
		Set Damage Dealt(Players In Slot(2, Team 1), Players In Slot(2, Team 1).damagevariable);
		Set Damage Dealt(Players In Slot(3, Team 1), Players In Slot(3, Team 1).damagevariable);
		Set Damage Received(All Players(Team 2), 100);
		All Players(Team 1).G[4] = False;
		All Players(Team 1).S[4] = 0;
	}
}

rule("39 Pickup InstaUlt")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[0]) <= 1.500;
		All Players(Team 1).G[0] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[0] = Vector(500, 25, 500);
		All Players(Team 1).G[0] = True;
		All Players(Team 1).S[0] = 1;
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Unlimited"), String("Ultimate Ability"), String("-> {0}", String(
			"{0} sec", 15))));
		Wait(15, Ignore Condition);
		All Players(Team 1).G[0] = False;
		All Players(Team 1).S[0] = 0;
	}
}

rule("40 InstaUlt Active")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.G[0] == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Wait(2, Abort When False);
		Loop If Condition Is True;
	}
}

rule("43 Spawn Blockers")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-92.307, -149.655, 143.069)) <= 3;
		disabled Is True For Any(Global.Z, Distance Between(Current Array Element, Event Player) < Global.diedradius[Current Array Index]) == True;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(-93.817, -151.080, 135.029));
	}
}

rule("44 Spawn Blocker B")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-83.688, -149.566, 141.589)) <= 3;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(-85.208, -152.021, 134.181));
	}
}

rule("45 Spawn Blocker C")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-71.911, -149.645, 141.974)) <= 3;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(-70.751, -150.926, 132.657));
	}
}

rule("48 WORKSHOP SETTINGS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Global.walljumpers = Workshop Setting Toggle(Custom String("difficulty"), Custom String("zombies jump with no colision"), True, 0);
		Event Player.healvariable = Workshop Setting Integer(Custom String("difficulty"), Custom String("healing dealt"), 25, 0, 500, 0);
		Set Gravity(Event Player, Workshop Setting Real(Custom String("fun"), Custom String("gravity"), 100, 25, 200, 0));
		Wait(3, Ignore Condition);
		Set Healing Dealt(Event Player, Event Player.healvariable);
		Global.zombspeed = Workshop Setting Toggle(Custom String("difficulty"), Custom String("zombies speed varies"), True, 0);
		Global.zombstrafe = Workshop Setting Integer(Custom String("difficulty"), Custom String("zombies strafe"), 1, 0, 1, 0);
		Global.zombjump = Workshop Setting Integer(Custom String("difficulty"), Custom String("zombies jump"), 1, 0, 1, 0);
		Global.experiencesystem = Workshop Setting Toggle(Custom String("fun"), Custom String("experience system"), True, 0);
		Skip If(Global.experiencesystem == False, 3);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Global.idlebots = Workshop Setting Toggle(Custom String("stability"), Custom String("idle bots"), False, 0);
		Set Projectile Gravity(All Players(Team 1), Workshop Setting Integer(Custom String("fun"), Custom String(
			"projectile gravity team 1"), 100, 25, 500, 0));
		Set Projectile Speed(All Players(Team 1), Workshop Setting Integer(Custom String("fun"), Custom String("projectile speed team 1"),
			100, 25, 500, 0));
		Set Projectile Gravity(All Players(Team 2), Workshop Setting Integer(Custom String("fun"), Custom String(
			"projectile gravity team 2"), 75, 25, 500, 0));
		Set Projectile Speed(All Players(Team 2), Workshop Setting Integer(Custom String("fun"), Custom String("projectile speed team 2"),
			50, 25, 500, 0));
		Global.spawntype = Workshop Setting Integer(Custom String("difficulty"), Custom String(
			"zombie types -- brig= 0 torb= 1 random= 2 none/testing=3"), 0, 0, 3, 0);
	}
}

rule("49 heal over time effect coop")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		All Living Players(Team 1) == True;
		Workshop Setting Toggle(Custom String("difficulty"), Custom String("self heal"), True, 0) == True;
		Number Of Players(Team 1) > 1;
	}

	actions
	{
		Stop Heal Over Time(Event Player.healovertime);
		Wait(5, Restart When True);
		Start Heal Over Time(Event Player, Event Player, 3, 4 * Event Player.healvariable);
		Event Player.healovertime = Last Heal Over Time ID;
	}
}

rule("50 is hacked")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 0);
		Set Primary Fire Enabled(Event Player, False);
		Set Status(Event Player, Null, Burning, 4);
		Start Damage Over Time(Event Player, Null, 10, 60);
		Disallow Button(Event Player, Button(Jump));
		Wait(4, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("53  mystery box")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.rngbox) <= 2;
		Event Player.points >= 950;
	}

	actions
	{
		If(Event Player.points > 950);
			Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
			Start Forcing Player To Be Hero(Event Player, First Of(Random Value In Array(Randomized Array(All Heroes))));
			Wait(0.100, Ignore Condition);
			Resurrect(Event Player);
			Event Player.points -= 950;
			Event Player.heroswap[Event Player.currentswap] = Hero Of(Event Player);
			Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero Of(Event Player));
			disabled Loop If Condition Is True;
			Event Player.currentmagazines = 10;
			disabled Skip If(Global.experiencesystem == False, 2);
			disabled Event Player.XPlevel = 0;
			disabled Event Player.xp = 0;
			Global.boxcounter += 1;
			Wait(1, Ignore Condition);
			Skip If(Global.boxcounter < Random Integer(6, 10), 2);
			Global.rngbox = Random Value In Array(Global.mysterylocations);
			Global.boxcounter = 0;
		Else If(Event Player.points < 950);
			Big Message(Event Player, Custom String("Come back when you've got some money buddy!"));
	}
}

rule("55  starting hero set")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Cassidy));
	}
}

rule("56  points loss for high roller")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.points >= 3000;
	}

	actions
	{
		Event Player.points -= Event Player.points * 0.200;
		Event Player.points = Round To Integer(Event Player.points, Up);
	}
}

rule("57  death points loss")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.points >= 1000;
	}

	actions
	{
		Event Player.points -= 200 * Event Player.H;
		Event Player.points = Round To Integer(Event Player.points, Up);
	}
}

rule("58  Single player lives mechanic")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) == 1;
		Event Player.singlelives < 3;
	}

	actions
	{
		Resurrect(Event Player);
		Wait(0.050, Ignore Condition);
		Set Status(Event Player, Null, Knocked Down, 2);
		Set Status(Event Player, Null, Phased Out, 10);
		Event Player.singlelives = Event Player.singlelives + 1;
	}
}

rule("59 DAMAGE Melee does more damage")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Cassidy));
			Wait(0.050, Ignore Condition);
			Set Damage Dealt(Event Player, 1500);
			Allow Button(Event Player, Button(Melee));
			Press Button(Event Player, Button(Melee));
			Wait(0.300, Ignore Condition);
			Set Damage Dealt(Event Player, Event Player.damagevariable);
			Disallow Button(Event Player, Button(Melee));
		Else If(Hero Of(Event Player) != Hero(Cassidy));
			Wait(0.050, Ignore Condition);
			Set Damage Dealt(Event Player, 350);
			Allow Button(Event Player, Button(Melee));
			Press Button(Event Player, Button(Melee));
			Wait(0.300, Ignore Condition);
			Set Damage Dealt(Event Player, Event Player.damagevariable);
			Disallow Button(Event Player, Button(Melee));
	}
}

rule("60 disable melee by default")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		"This feature is intended to allow for melee to be much stronger, at the cost of a lingering melee"
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("65 ring around each player")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		If(Slot Of(Event Player) == 0);
			Create Effect(All Players(All Teams), Ring, Color(Red), Event Player, 1.200, Visible To Position and Radius);
		Else If(Slot Of(Event Player) == 1);
			Create Effect(All Players(All Teams), Ring, Color(Blue), Event Player, 1.200, Visible To Position and Radius);
		Else If(Slot Of(Event Player) == 2);
			Create Effect(All Players(All Teams), Ring, Color(Green), Event Player, 1.200, Visible To Position and Radius);
		Else If(Slot Of(Event Player) == 3);
			Create Effect(All Players(All Teams), Ring, Color(Orange), Event Player, 1.200, Visible To Position and Radius);
	}
}

rule("66 wave >1 warning")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Hero Being Played(Hero(Cassidy), Team 1) == Hero Of(Event Player);
		Global.roundnumber > 1;
	}

	actions
	{
		Abort If(Hero Of(Event Player) != Hero(Cassidy));
		Wait(0.250, Ignore Condition);
		Big Message(Event Player, Custom String("WARNING:STARTING HERO - LOW DAMAGE CAPABILITY"));
		Wait(30, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("67 solo play mode effect")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) < 2;
		Global.start == 1;
	}

	actions
	{
		Wait(15, Ignore Condition);
		Abort If Condition Is False;
		Big Message(All Players(All Teams), Custom String("SOLO MODE: YOU NOW HAVE 3 LIVES TOTAL"));
	}
}

rule("68 player joined invincible")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 30);
	}
}

rule("69 round won sound effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.Z <= 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
	}
}

rule("71 MCCREE pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Cassidy);
		Attacker.Packapunch == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Damage(Players Within Radius(Victim, 3, Team 2, Off), Attacker, 420);
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Victim, 3);
		Wait(0.450, Ignore Condition);
	}
}

rule("73 Headshot maniac Perk add damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Maniac == 1;
		Event Was Critical Hit == True;
		Event Player.damagevariable < 391;
	}

	actions
	{
		Event Player.damagevariable += 10;
		Set Damage Dealt(Event Player, Event Player.damagevariable);
	}
}

rule("74 headshot maniac Perk remove damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == False;
		Event Player.damagevariable >= 55;
		Event Player.Maniac == 1;
	}

	actions
	{
		Event Player.damagevariable -= 2.500;
		Set Damage Dealt(Event Player, Event Player.damagevariable);
	}
}

rule("77 multiplayer extra life Perk")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.revived == 1;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 2);
		Resurrect(Event Player);
		Set Status(Event Player, Null, Invincible, 10);
		Event Player.revived = 0;
	}
}

rule("78 buy revive multiplayer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-83.583, -155.045, 120.352)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 4000;
		Global.powerconnected == 1;
		disabled Event Player.revivebought == 0;
		Number Of Players(Team 1) > 1;
	}

	actions
	{
		Event Player.points -= 10000;
		Event Player.revived = 1;
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		disabled Event Player.revivebought = 1;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("79 player died with maniac")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Maniac == 1;
	}

	actions
	{
		Global.Died[Slot Of(Event Player)] = Nearest Walkable Position(Event Player);
		Big Message(All Players(All Teams), String("{0} {1}", Event Player, String("{0}!", String("Down"))));
		Global.E[Slot Of(Event Player)] = True;
		Set Max Health(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Event Player.Jugg = 0;
		Wait(0.016, Ignore Condition);
		Event Player.healthmax = 50;
		Event Player.Maniac = 0;
		Wait(0.016, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
		Event Player.damagevariable = 100;
		Wait(0.016, Ignore Condition);
		Event Player.healvariable = 100;
		Set Healing Dealt(Event Player, 100);
		Event Player.doublemag = 0;
		Wait(0.100, Ignore Condition);
		Event Player.sprintburstperk = 0;
	}
}

rule("80 player died without maniac")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Maniac == 0;
	}

	actions
	{
		Global.Died[Slot Of(Event Player)] = Nearest Walkable Position(Event Player);
		Big Message(All Players(All Teams), String("{0} {1}", Event Player, String("{0}!", String("Down"))));
		Set Max Health(Event Player, 100);
		Global.E[Slot Of(Event Player)] = True;
		Wait(0.100, Ignore Condition);
		Event Player.Jugg = 0;
		Wait(0.100, Ignore Condition);
		Event Player.healthmax = 50;
		Wait(0.100, Ignore Condition);
		Event Player.healvariable = 100;
		Wait(0.100, Ignore Condition);
		Set Healing Dealt(Event Player, 100);
		Event Player.doublemag = 0;
		Wait(0.100, Ignore Condition);
		Event Player.sprintburstperk = 0;
		Destroy Dummy Bot(Team 1, Slot Of(Event Player) + 4);
	}
}

rule("81 Died Low points Bonus")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.points < 1500;
		Global.roundnumber > 5;
	}

	actions
	{
		Event Player.points = 1500;
	}
}

rule("83 power challenge effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerconnected == 1;
		Global.roundnumber < 15;
	}

	actions
	{
		Set Ultimate Charge(Players On Hero(Hero(Brigitte), Team 2), 100);
	}
}

rule("84 reloading all heros without doublemag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.currentmagazines -= 1;
	}
}

rule("88 disable vanilla features")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Music;
		Disable Kill Feed(All Players(All Teams));
		Disable Built-In Game Mode Announcer;
		disabled Disable Scoreboard(All Players(All Teams));
		Disable Nameplates(All Living Players(Team 2), All Players(Team 1));
		Stop Forcing Player Outlines(All Players(All Teams), All Players(All Teams));
		disabled Disable Inspector Recording;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Completion;
		Disable Game Mode In-World UI(All Players(All Teams));
		Disable Game Mode HUD(All Players(All Teams));
		Disable Built-In Game Mode Respawning(All Players(All Teams));
		Event Player.F = False;
		Event Player.H = 1;
		disabled Disable Text Chat(Event Player);
	}
}

rule("89 out of ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Brigitte);
		Hero Of(Event Player) != Hero(Torbjörn);
		Hero Of(Event Player) != Hero(Mei);
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		If(Event Player.currentmagazines <= 0);
			Set Primary Fire Enabled(Event Player, False);
			Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("90 max ammo amount")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.magazines[0] = 5;
		Event Player.magazines[1] = 5;
		Event Player.currentmagazines = Event Player.magazines[0];
		Event Player.currentswap = 0;
		Disallow Button(Event Player, Button(Crouch));
		Event Player.ultcharge[0] = 0;
		Event Player.ultcharge[1] = 0;
		Wait(0.016, Ignore Condition);
		Event Player.currentultcharge = Event Player.ultcharge[0];
		Wait(0.016, Ignore Condition);
		Set Ultimate Charge(Event Player, Event Player.ultcharge[0]);
	}
}

rule("91 enable guns when they have ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.currentmagazines > 0;
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("94 out of ammo moira")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.currentmagazines <= 0;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("96 mercy disable gun if no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Weapon(Event Player) == 2;
		Event Player.magazines <= 0;
	}

	actions
	{
		Set Weapon(Event Player, 1);
	}
}

rule("97 torb disable gun if no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Weapon(Event Player) == 1;
		Event Player.magazines <= 0;
	}

	actions
	{
		Set Weapon(Event Player, 2);
	}
}

rule("98  reloading with doublemag")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.currentmagazines -= 0.500;
	}
}

rule("99  hero ultimate adjustments")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Ashe));
			Set Damage Dealt(Event Player, 300);
			Wait(10, Ignore Condition);
			Set Damage Dealt(Event Player, 100);
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Set Damage Dealt(All Players(Team 1), 300);
			Wait(12.500, Ignore Condition);
			Set Damage Dealt(All Players(Team 1), 100);
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Add Health Pool To Player(All Living Players(Team 1), Health, 200, False, True);
			Wait(12.500, Ignore Condition);
			Remove Health Pool From Player(Last Created Health Pool);
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Set Status(Event Player, Null, Phased Out, 10);
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Resurrect(All Dead Players(Team 1));
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			Set Status(Event Player, Null, Phased Out, 6);
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Set Gravity(Event Player, 0);
			Wait Until(False, 7);
			Set Gravity(Event Player, 100);
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Add Health Pool To Player(All Living Players(Team 1), Health, 500, False, False);
			Wait(10, Ignore Condition);
			Remove All Health Pools From Player(All Living Players(Team 1));
	}
}

rule("103  remove less than zero issue on ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.currentmagazines < 0;
	}

	actions
	{
		Event Player.currentmagazines = 0;
	}
}

rule("104 fix reload disabled")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Ashe);
	}

	actions
	{
		Allow Button(Event Player, Button(Reload));
	}
}

rule("105 specific hero ammo and double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		"works with this for some reason?"
		Event Player.doorresponse == 0;
	}

	actions
	{
		"some heros need double mag"
		If(Hero Of(Event Player) == Hero(Moira));
			If(Is Firing Secondary(Event Player) == True);
				If(Event Player.doublemag == 0);
					Event Player.magazines -= 0.050;
					Wait(0.250, Ignore Condition);
					Loop If Condition Is True;
				Else If(Event Player.doublemag == 1);
					Event Player.magazines -= 0.025;
					Wait(0.250, Ignore Condition);
					Loop If Condition Is True;
				End;
			End;
		Else If(Hero Of(Event Player) == Hero(D.Va));
			If(Is Button Held(Event Player, Button(Primary Fire)) == True);
				If(Event Player.doublemag == 0);
					Event Player.magazines -= 0.050;
					Wait(0.150, Ignore Condition);
					Loop If Condition Is True;
				Else If(Event Player.doublemag == 1);
					Event Player.magazines -= 0.025;
					Wait(0.125, Ignore Condition);
					Loop If Condition Is True;
				End;
			End;
		Else If(Hero Of(Event Player) == Hero(Reaper));
			If(Is Using Ability 1(Event Player) == True);
				Event Player.magazines -= 0.500;
			End;
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			If(Is Using Ability 1(Event Player) == True);
				Skip If(Ammo(Event Player, 0) == 6, 1);
				Event Player.magazines -= 0.500;
			End;
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			If(Is Button Held(Event Player, Button(Primary Fire)) == True);
				If(Event Player.doublemag == 0);
					Event Player.magazines -= 0.250;
					Wait(0.250, Ignore Condition);
					Loop If Condition Is True;
				End;
			End;
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			If(Is Button Held(Event Player, Button(Primary Fire)) == True);
				If(Event Player.doublemag == 0);
					Event Player.magazines -= 0.250;
				Else If(Event Player.doublemag == 1);
					Event Player.magazines -= 0.125;
				End;
			End;
		Else If(Hero Of(Event Player) == Hero(Sigma));
			If(Is Button Held(Event Player, Button(Primary Fire)) == True);
				If(Event Player.doublemag == 0);
					Event Player.magazines -= 0.200;
				Else If(Event Player.doublemag == 1);
					Event Player.magazines -= 0.100;
				End;
			End;
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			If(Is Using Ability 2(Event Player) == True);
				If(Event Player.doublemag == 0);
					Event Player.magazines -= 0.250;
				Else If(Event Player.doublemag == 1);
					Event Player.magazines -= 0.125;
	}
}

rule("109 PERK player hit speed boost sprint burst")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Event Player.sprintburstperk == 1;
	}

	actions
	{
		Set Move Speed(Event Player, 180);
		Wait(1, Ignore Condition);
		Set Move Speed(Event Player, 105);
	}
}

rule("110 player hit speed boost default")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Event Player.sprintburstperk == 0;
		Workshop Setting Toggle(Custom String("difficulty"), Custom String("speed boost when hit"), True, 0) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 150);
		Wait(1, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("112  hanzo ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.currentmagazines -= 0.250;
	}
}

rule("113  ashe reload fix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
	}

	actions
	{
		Set Ammo(Event Player, 0, 12);
	}
}

rule("115  ammo message force melee when out of ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.currentmagazines == 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("NO AMMO"));
		Big Message(Event Player, Custom String("USE MELEE"));
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("MELEE BONUS DAMAGE"));
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("buy any hero for more ammo"));
	}
}

rule("118  Omnic Kill (Global Var B) ALL SLOTS")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		Event Player.B = Random Integer(1, 50);
		Skip If(Event Player.B != 1, 1);
		Global.M[0] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
		Wait(0.200, Ignore Condition);
		Global.numberofzombies -= 1;
		Skip If(Global.numberofzombies < Number Of Living Players(Team 2), 1);
		Respawn(Event Player);
	}
}

rule("120  Remove bots when players join")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		If(Number Of Players(Team 1) == 2);
			Destroy Dummy Bot(Team 2, 17);
			Destroy Dummy Bot(Team 2, 16);
			Destroy Dummy Bot(Team 2, 15);
			Destroy Dummy Bot(Team 2, 14);
		Else If(Number Of Players(Team 1) == 3);
			Destroy Dummy Bot(Team 2, 17);
			Destroy Dummy Bot(Team 2, 16);
			Destroy Dummy Bot(Team 2, 15);
			Destroy Dummy Bot(Team 2, 14);
			Destroy Dummy Bot(Team 2, 13);
			Destroy Dummy Bot(Team 2, 12);
			Destroy Dummy Bot(Team 2, 11);
			Destroy Dummy Bot(Team 2, 10);
		Else If(Number Of Players(Team 1) == 4);
			Destroy Dummy Bot(Team 2, 17);
			Destroy Dummy Bot(Team 2, 16);
			Destroy Dummy Bot(Team 2, 15);
			Destroy Dummy Bot(Team 2, 14);
			Destroy Dummy Bot(Team 2, 13);
			Destroy Dummy Bot(Team 2, 12);
			Destroy Dummy Bot(Team 2, 11);
			Destroy Dummy Bot(Team 2, 10);
			Destroy Dummy Bot(Team 2, 9);
			Destroy Dummy Bot(Team 2, 8);
	}
}

rule("soldier explosive rounds")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Damage != Is Meleeing(Event Player);
		Event Damage != Is Firing Secondary(Event Player);
	}

	actions
	{
		Wait(0.220, Ignore Condition);
		Damage(Players Within Radius(Victim, 5, Team 2, Off), Attacker, 20);
	}
}

rule("126 healing dealt points (buggy but works)")
{
	event
	{
		Player Received Healing;
		Team 1;
		All;
	}

	conditions
	{
		Health(Healee) != Max Health(Healee);
	}

	actions
	{
		Healer.points += 20;
		Wait(0.250, Ignore Condition);
	}
}

rule("132  rien out of ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.currentmagazines <= 0;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Wait(15, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
	}
}

rule("136  dva ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Player.doublemag == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.currentmagazines -= 0.025;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("137  bots too far away")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T < 2),
			Current Array Element))) > 25;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Teleport(Event Player, Nearest Walkable Position(Direction From Angles(Random Real(0, 360), Random Real(-3, 3)) * Random Real(10,
			20) + Position Of(First Of(All Living Players(Team 1)))));
	}
}

rule("143 DIFFICULTY damage resistance")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Global.Difficulty == 1);
			Set Damage Received(Event Player, 25);
		Else If(Global.Difficulty == 2);
			Set Damage Received(Event Player, 50);
		Else If(Global.Difficulty == 3);
			Set Damage Received(Event Player, 100);
	}
}

disabled rule("148 Remove bots ANTI CRASH")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load Average >= 240;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, 17);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 16);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 15);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 14);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 13);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 12);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 11);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 10);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 9);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 8);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 7);
		Wait(0.250, Abort When False);
		Destroy Dummy Bot(Team 2, 6);
	}
}

rule("158 melee stun")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("difficulty"), Custom String("melee stun"), True, 0) == True;
		Is Meleeing(Attacker) == True;
		Distance Between(Attacker, Victim) <= 3;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 1);
	}
}

rule("159 workshop setting explosive rounds")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Workshop Setting Toggle(Custom String("fun"), Custom String("explosive rounds"), False, 0) == True;
	}

	actions
	{
		Damage(Players Within Radius(Victim, 3, Team 2, Off), Attacker, 300);
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Victim, 3);
		Wait(0.450, Ignore Condition);
	}
}

rule("160 life weaver ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Is Reloading(Event Player) == False;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Event Player.currentmagazines -= 0.025;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("161 life weiver no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Event Player.currentmagazines == 0;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
	}
}

rule("163 heal over time effect solo")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		All Living Players(Team 1) == True;
		Number Of Players(Team 1) == 1;
	}

	actions
	{
		Stop Heal Over Time(Event Player.healovertime);
		Wait(5, Restart When True);
		Start Heal Over Time(Event Player, Event Player, 3, 4 * Event Player.healvariable);
		Event Player.healovertime = Last Heal Over Time ID;
	}
}

rule("164 OMNIC brigg hold sheild")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 15;
		Global.idlebots == False;
	}

	actions
	{
		Skip If(Global.powerconnected == 1, 1);
		Skip If(Global.roundnumber < 10, 99);
		Start Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("165 OMNIC brigg hold sheild")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 12;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("171 no ammo force melee")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.magazines == 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Press Button(Event Player, Button(Melee));
	}
}

rule("172 FOLLOWERS  winston Omnic bomb")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		"variable conflict with boss' need fix later"
		Event Player.Movement == 1;
		Event Player.Head_HP > 0;
	}

	actions
	{
		Create Dummy Bot(Hero(Winston), Team 1, 6, Eye Position(Event Player), Vector(0, 0, 0));
		Wait(0.030, Ignore Condition);
		Event Player.Head_HP -= 1;
		Event Player.T = 1;
		Attach Players(Players In Slot(6, Team 1), Event Player, Vector(0, 0, 2));
		Start Scaling Player(Players In Slot(6, Team 1), 0.200, True);
		Start Modifying Hero Voice Lines(Players In Slot(6, Team 1), 1.300, True);
		Wait(1, Ignore Condition);
		Detach Players(Players In Slot(6, Team 1));
		Wait(0.200, Ignore Condition);
		Press Button(Players In Slot(6, Team 1), Button(Jump));
		Apply Impulse(Players In Slot(6, Team 1), Vector Towards(Event Player, Players In Slot(6, Team 1)), 25, To World,
			Cancel Contrary Motion);
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Players In Slot(6, Team 1), 0.500, Visible To Position and Radius);
		Wait(2, Ignore Condition);
		Communicate(Players In Slot(6, Team 1), Countdown);
		Wait(4, Ignore Condition);
		Damage(Players Within Radius(Players In Slot(6, All Teams), 2, Team 2, Surfaces And All Barriers), Event Player, 100);
		Damage(Players Within Radius(Players In Slot(6, All Teams), 4, Team 2, Surfaces And All Barriers), Event Player, 50);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(White), Event Player, 1);
		Wait(0.500, Ignore Condition);
		Communicate(Players In Slot(6, Team 1), Goodbye);
		Destroy Effect(Last Created Entity);
		Wait(0.500, Ignore Condition);
		Destroy Dummy Bot(Team 1, 6);
		Event Player.T = 0;
	}
}

rule("173 Purchase winston Omnic bomb")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.buyperks[9]) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2500;
		Global.powerconnected == 1;
		Event Player.Movement == 0;
	}

	actions
	{
		Event Player.points -= 2500;
		Event Player.Movement = 1;
		Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Event Player.Head_HP = 3;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Event Player.Part2 = 0;
	}
}

rule("183 Rule 303 bots spawn idle")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Global.idlebots == True;
	}

	actions
	{
		disabled Event Player.idlebot = 1;
		Stop Forcing Throttle(Event Player);
	}
}

rule("184 zombies move if player close")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 6;
		Global.idlebots == True;
	}

	actions
	{
		Event Player.idlebot = 1;
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		Communicate(Event Player, Hello);
	}
}

rule("185 zombie took damage start moving")
{
	event
	{
		Player Took Damage;
		Team 2;
		All;
	}

	conditions
	{
		Event Player.idlebot == 0;
		Global.idlebots == True;
	}

	actions
	{
		Event Player.idlebot = 1;
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
	}
}

rule("191 Trap logic")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.trapeffect == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Bastion), Team 1, 12, Vector(-86.342, -150.729, 39.793), Vector(0, 0, 0));
		Global.omnicspawn[18] = Slot Of(Players In Slot(12, Team 1));
		Create Dummy Bot(Hero(Bastion), Team 1, 13, Vector(-82.277, -150.687, 80.335), Vector(0, 0, 0));
		Global.omnicspawn[19] = Slot Of(Players In Slot(13, Team 1));
		Start Holding Button(Players In Slot(12, Team 1), Button(Primary Fire));
		Wait(0.250, Ignore Condition);
		Players In Slot(12, Team 1).T = 1;
		Players In Slot(13, Team 1).T = 1;
		Press Button(Players In Slot(12, Team 1), Button(Ability 1));
		Press Button(Players In Slot(13, Team 1), Button(Ability 1));
		Start Holding Button(Players In Slot(13, Team 1), Button(Primary Fire));
		Start Facing(Players In Slot(12, Team 1), Direction Towards(Eye Position(Players In Slot(12, Team 1)), Eye Position(First Of(
			Sorted Array(Filtered Array(All Living Players(Team 2), Current Array Element.T == 0), Distance Between(Players In Slot(12,
			Team 1), Current Array Element))))), 400, To World, Direction and Turn Rate);
		Start Facing(Players In Slot(13, Team 1), Direction Towards(Eye Position(Players In Slot(13, Team 1)), Eye Position(First Of(
			Sorted Array(Filtered Array(All Living Players(Team 2), Current Array Element.T == 0), Distance Between(Players In Slot(13,
			Team 1), Current Array Element))))), 400, To World, Direction and Turn Rate);
		Wait(20, Ignore Condition);
		Destroy Dummy Bot(Team 1, Global.omnicspawn[18]);
		Destroy Dummy Bot(Team 1, Global.omnicspawn[19]);
	}
}

rule("192 Purchase trap")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-83.799, -160.001, 64.224)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.trapeffect == 0;
	}

	actions
	{
		If(Event Player.points >= 1000);
			Global.trapeffect = 1;
			Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
			Event Player.points -= 2000;
			Wait(22, Ignore Condition);
			Global.trapeffect = 0;
		Else If(Event Player.points < 1000);
			Small Message(Event Player, Custom String("  {0}  A Trap? No! Omnics need purpose!", Hero Icon String(Hero(Ramattra))));
			Wait(4, Ignore Condition);
	}
}

disabled rule("193 achivements logic")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("194 achivements menu")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("achivement progress carries between playthroughs"), Top, 0,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("deal 50000 damage {0}"), Top, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("teleport 20 times {0}"), Top, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("play as each hero once {0}"), Top, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("complete the easteregg {0}"), Top, 0, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("buy the trap 10 times {0}"), Top, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("pack a punch the wonderweapon {0}"), Top, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("earn 500 eliminations {0}"), Top, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Null, Custom String("beat all 3 boss'"), Top, 0, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
	}
}

disabled rule("195 credits")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("by Dropthatbeat#11756"), Vector(0, 0, 0), 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("B73NS#2325 for the boss fights"), Vector(0, 0, 0), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("with the help of the people over at workshop.codes"), Vector(0, 0, 0),
			1, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("and lastly: you guys, Thanks for playing!"), Vector(0, 0, 0), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Start Camera(All Players(Team 1), Vector(0, 0, 0), Vector(0, 0, 0), 0);
	}
}

disabled rule("196 (effect) GOAL: omnic part collector")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), 1, Visible To Position and Radius);
	}
}

disabled rule("197 GOAL: omnic part collector (players gather souls from omnics)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), 1, Visible To Position and Radius);
	}
}

disabled rule("198 GOAL: save little winstons (carry miniature winstons to a location)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), 1, Visible To Position and Radius);
	}
}

disabled rule("199 GOAL: gather 3 teleporter parts")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(0, 0, 0), 1, Visible To Position and Radius);
	}
}

disabled rule("200 GOAL: The main easter egg")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("stay tuned..."), Null, Null, Left, 0, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
	}
}

rule("241  follower mystery box")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.rngbox2) <= 2;
		Event Player.points >= 950;
	}

	actions
	{
		If(Event Player.points > 950);
			Destroy Dummy Bot(Team 1, Slot Of(Event Player) + 4);
			Wait(0.250, Ignore Condition);
			Create Dummy Bot(Random Value In Array(All Heroes), Team 1, Slot Of(Event Player) + 4, Vector(0, 0, 0), Vector(0, 0, 0));
			Wait(0.030, Ignore Condition);
			Attach Players(Slot Of(Event Player) + 4, Event Player, Vector(-0.500, 1.800, -0.200));
			Wait(0.100, Ignore Condition);
			Start Scaling Player(Slot Of(Event Player) + 4, 0.200, True);
			Start Modifying Hero Voice Lines(Slot Of(Event Player) + 4, 1.300, True);
			disabled Resurrect(Event Player);
			Event Player.points -= 950;
			disabled Loop If Condition Is True;
			Event Player.magazines = 10;
			disabled Skip If(Global.experiencesystem == False, 2);
			disabled Event Player.XPlevel = 0;
			disabled Event Player.xp = 0;
			Global.boxcounter2 += 1;
			Wait(1, Ignore Condition);
			Skip If(Global.boxcounter2 < Random Integer(6, 10), 2);
			Global.rngbox2 = Random Value In Array(Global.Mysterylocations2);
			Global.boxcounter2 = 0;
		Else If(Event Player.points < 950);
			Big Message(Event Player, Custom String("Come back when you've got some money buddy!"));
	}
}

rule("242 Rule 426 subroutine hero buy 1250")
{
	event
	{
		Subroutine;
		herobuy1250;
	}

	actions
	{
		If(Event Player.points > 1250);
			Event Player.points -= 1250;
			Play Effect(Event Player, Moira Fade Disappear Sound, Color(White), Event Player, 70);
			Wait(0.250, Ignore Condition);
			Event Player.currentmagazines = 10;
			Skip If(Global.experiencesystem == True, 2);
			Event Player.XPlevel = 0;
			Event Player.xp = 0;
		Else If(Event Player.points < 1250);
			Small Message(Event Player, Custom String("Come back when you've got some money buddy!"));
	}
}

rule("243 Rule 427 subroutine hero buy1750")
{
	event
	{
		Subroutine;
		herobuy1750;
	}

	actions
	{
		If(Event Player.points > 1750);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
			Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Color(Purple), Event Player, 70);
			Event Player.points -= 1000 + 750;
			Wait(0.250, Ignore Condition);
			Event Player.currentmagazines = 10;
			Skip If(Global.experiencesystem == False, 2);
			Event Player.XPlevel = 0;
			Event Player.xp = 0;
		Else If(Event Player.points < 1750);
			Small Message(Event Player, Custom String("Come back when you've got some money buddy!"));
	}
}

rule("245 Rule 388 tank sheild")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Sigma));
			Add Health Pool To Player(Event Player, Health, 100, False, False);
			Wait(10, Ignore Condition);
			Remove All Health Pools From Player(Event Player);
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			Add Health Pool To Player(Event Player, Health, 100, False, False);
			Wait(10, Ignore Condition);
			Remove All Health Pools From Player(Event Player);
		Else If(Hero Of(Event Player) == Hero(D.Va));
			Add Health Pool To Player(Event Player, Health, 100, False, False);
			Wait(10, Ignore Condition);
			Remove All Health Pools From Player(Event Player);
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			Add Health Pool To Player(Event Player, Health, 100, False, False);
			Wait(10, Ignore Condition);
			Remove All Health Pools From Player(Event Player);
	}
}

disabled rule("257 Devestator Big Boss 1===============================================")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.Bosssequencer == 1;
	}

	actions
	{
		Create Dummy Bot(Hero(Orisa), Team 2, -1, Vector(-80.776, -159.164, 59.549), Vector(0, 0, 0));
		Global.omnicspawn[0] = Slot Of(Players In Slot(0, Team 2));
		Wait(5, Ignore Condition);
		Set Damage Dealt(Event Player, 200);
		Set Knockback Received(Event Player, 0);
		Event Player.Speed = 100;
		Start Scaling Player(Event Player, 3, True);
		Set Max Health(Event Player, 1000);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Devastator"));
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(Orisa), Team 2), Vector(1, 3, 1));
		Wait(0.016, Ignore Condition);
		Last Created Entity.Part = Custom String("Rocket launcher");
		Add Health Pool To Player(Event Player, Armor, 3000, True, True);
		Add Health Pool To Player(Event Player, Health, 3000, True, True);
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Event Player, Vector(-1, 3, 1));
		Wait(0.016, Ignore Condition);
		Last Created Entity.Part = Custom String("Rocket launcher");
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Event Player, Vector(0, 4, -1));
		Wait(0.016, Ignore Condition);
		Last Created Entity.Part = Custom String("Generator");
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Event Player, Vector(1.750, 4.250, 0));
		Wait(0.016, Ignore Condition);
		Last Created Entity.Part = Custom String("Cannon");
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Event Player, Vector(-1.750, 4.250, 0));
		Wait(0.016, Ignore Condition);
		Last Created Entity.Part = Custom String("Cannon");
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Event Player, Vector(0, 1.750, -1.250));
		Wait(0.016, Ignore Condition);
		Last Created Entity.Part = Custom String("Leg joint");
		If(Is Dead(Event Player));
			Remove All Health Pools From Player(Event Player);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), DVa Self Destruct Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Wait(0.250, Ignore Condition);
		End;
		Wait Until(Is Alive(Event Player) == True, 99999);
		If(Event Player.Part == Custom String("rocket launcher"));
			Start Forcing Dummy Bot Name(Event Player, Custom String("Rocket launcher"));
			Set Max Health(Event Player, 500);
			Wait(2, Ignore Condition);
			Set Healing Received(Event Player, 0);
		Else If(Event Player.Part == Custom String("generator"));
			Start Forcing Dummy Bot Name(Event Player, Custom String("Generator"));
			Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), Event Player, 1, Visible To Position and Radius);
			Set Max Health(Event Player, 500);
			Wait(2, Ignore Condition);
			Set Healing Received(Event Player, 0);
		Else If(Event Player.Part == Custom String("Cannon"));
			Wait(0.250, Abort When False);
			Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
			Set Knockback Dealt(Event Player, 0);
			Start Forcing Dummy Bot Name(Event Player, Custom String("Cannon"));
			Set Max Health(Event Player, 1000);
			Start Scaling Player(Event Player, 1.500, True);
			Wait(2, Ignore Condition);
			Set Healing Received(Event Player, 0);
		Else If(Event Player.Part == Custom String("Leg joint"));
			Start Forcing Dummy Bot Name(Event Player, Custom String("Leg joint"));
			Set Max Health(Event Player, 500);
			Start Scaling Player(Event Player, 1.200, True);
			Create Effect(All Players(All Teams), Ana Nano Boosted Effect, Color(White), Event Player, 1, Visible To Position and Radius);
			Wait(2, Ignore Condition);
			Set Healing Received(Event Player, 0);
		Else If(Event Player.Part == Custom String("Leg joint"));
	}
}

disabled rule("263 Cannon stay in form")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) != True;
		Event Player.Part == Custom String("Cannon");
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("266 Omnic Big Boss Part destroyed")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		If(Event Player.Part == Custom String("leg joint"));
			Players Within Radius(Event Player, 5, Team Of(Event Player), Off).Speed = 0;
			Set Status(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Null, Stunned, 2);
		Else If(Event Player.Part == Custom String("rocket launcher"));
			Set Status(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Null, Stunned, 2);
		Else If(Event Player.Part == Custom String("Cannon"));
			Set Status(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Null, Stunned, 2);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Else If(Event Player.Part == Custom String("Generator"));
			Play Effect(All Players(All Teams), Sombra EMP Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Sombra EMP Explosion Sound, Color(White), Eye Position(Event Player), 200);
			Set Status(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Null, Stunned, 4);
			Damage(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Attacker, 1500);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Effect, Color(White), Event Player, 1);
			Play Effect(All Players(All Teams), Junkrat RIP Tire Explosion Sound, Color(White), Eye Position(Event Player), 200);
	}
}

disabled rule("270 Making cannons shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Button Held(Players On Hero(Hero(Orisa), Team 2), Button(Primary Fire)) == True;
		Event Player.Part == Custom String("Cannon");
	}

	actions
	{
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.100, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.100, Ignore Condition);
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("271 Making rockets shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Players On Hero(Hero(Orisa), Team 2), Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
		Event Player.Part == Custom String("Rocket launcher");
	}

	actions
	{
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Effect, Color(White), Event Player, 1);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 100,
			1, 3, Ashe Dynamite Explosion Effect, Ashe Dynamite Explosion Sound, 0, 50, 5, 0, Ray Cast Hit Player(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player,
			True), 0.250);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Effect, Color(White), Event Player, 1);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 100,
			1, 3, Ashe Dynamite Explosion Effect, Ashe Dynamite Explosion Sound, 0, 50, 5, 0, Ray Cast Hit Player(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player,
			True), 0.250);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Effect, Color(White), Event Player, 1);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 100,
			1, 3, Ashe Dynamite Explosion Effect, Ashe Dynamite Explosion Sound, 0, 50, 5, 0, Ray Cast Hit Player(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player,
			True), 0.250);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Effect, Color(White), Event Player, 1);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 100,
			1, 3, Ashe Dynamite Explosion Effect, Ashe Dynamite Explosion Sound, 0, 50, 5, 0, Ray Cast Hit Player(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player,
			True), 0.250);
		Wait(0.500, Ignore Condition);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), DVa Micro Missiles Explosion Effect, Color(White), Event Player, 1);
		Create Homing Projectile(Pharah Rocket, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 100,
			1, 3, Ashe Dynamite Explosion Effect, Ashe Dynamite Explosion Sound, 0, 50, 5, 0, Ray Cast Hit Player(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 100, All Players(All Teams), Event Player,
			True), 0.250);
		Wait(0.500, Ignore Condition);
		Wait(3, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("272 Unleash fire breath shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Orisa;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Create Projectile(Reinhardt Fire Strike, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)), 50,
			1, 0, Reinhardt Fire Strike Target Impact Effect, Reinhardt Fire Strike Target Impact Sound, 0.100, 50, 5, 0, 0, 0);
		Wait(0.050, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("273 Colossal charger stats Big boss 2 ===================================================")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Global.Bosssequencer == 2;
	}

	actions
	{
		Create Dummy Bot(Hero(Reinhardt), Team 2, 0, Vector(-80.776, -159.164, 59.549), Vector(0, 0, 0));
		Global.omnicspawn[0] = Slot Of(Players In Slot(0, Team 2));
		Set Damage Dealt(Event Player, 50);
		Set Move Speed(Event Player, 50);
		Event Player.Part = 1;
		Set Knockback Received(Event Player, 20);
		Event Player.Head_HP = 1500;
		Set Status(Event Player, Null, Unkillable, 9999);
		Set Max Health(Event Player, 1000);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Colossal Charger "));
		Start Scaling Player(Event Player, 2, True);
		Wait(0.250, Ignore Condition);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(Reinhardt), Team 2), Vector(-1.500, 1.250, 0));
		Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
		Last Created Entity.Part = Custom String("Minigun");
		Wait(0.016, Ignore Condition);
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(Reinhardt), Team 2), Vector(1.250, 2.500, 0.750));
		Add Health Pool To Player(Event Player, Health, 2000, True, True);
		Last Created Entity.Part = Custom String("Arm connector");
		Wait Until(Is Dead(Event Player) == True, 99999);
		Remove All Health Pools From Player(Event Player);
	}
}

disabled rule("274 Minigun stats")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Part == Custom String("Minigun");
	}

	actions
	{
		Wait(0.250, Abort When False);
		Set Projectile Speed(Event Player, 125);
		Set Knockback Dealt(Event Player, 0);
		Set Max Health(Event Player, 1000);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Minigun"));
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		Wait(0.250, Ignore Condition);
		disabled Create Effect(All Players(All Teams), Echo Cloning Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Wait Until(Is Dead(Event Player) == True, 99999);
		Set Status(Players Within Radius(Event Player, 3, Team Of(Event Player), Off), Null, Stunned, 1);
	}
}

disabled rule("Minigun stay in form")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) != True;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("276 Arm connector stats")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Part == Custom String("Arm connector");
	}

	actions
	{
		Set Healing Received(Event Player, 0);
		Set Max Health(Event Player, 500);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Arm connector"));
		Start Scaling Player(Event Player, 0.800, True);
		Event Player.Part2 = True;
		Wait(0.250, Ignore Condition);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Wait Until(Is Dead(Event Player) == True, 99999);
		Set Status(Players Within Radius(Event Player, 3, Team Of(Event Player), Off), Null, Stunned, 1);
		Set Ultimate Ability Enabled(Players Within Radius(Event Player, 3, Team Of(Event Player), Off), False);
		Players Within Radius(Event Player, 3, Team Of(Event Player), Off).Part = False;
	}
}

disabled rule("277 Colossal charger dies")
{
	event
	{
		Player Took Damage;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Health(Event Player) == 1;
		Global.roundnumber == 20;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 3, Team Of(Event Player), Off), Null, Stunned, 6);
		Wait(3, Ignore Condition);
		Set Status(Event Player, Null, Knocked Down, 9999);
		Stop Forcing Throttle(Players Within Radius(Event Player, 3, Team Of(Event Player), Off));
		Detach Players(Players Within Radius(Event Player, 3, Team Of(Event Player), Off));
		Wait(1, Ignore Condition);
		Clear Status(Event Player, Unkillable);
		Wait(0.016, Ignore Condition);
		Kill(Players Within Radius(Event Player, 3, Team Of(Event Player), Off), Null);
		Wait Until(Is Alive(Event Player) == True, 99999);
		Destroy All Effects;
	}
}

disabled rule("278 Colossal charger head hp function")
{
	event
	{
		Player Took Damage;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Was Critical Hit == True;
		Event Player.Head_HP > 0;
		Global.roundnumber == 20;
	}

	actions
	{
		Event Player.Head_HP -= Event Damage;
	}
}

disabled rule("279 Colossal charger lose head")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Event Player.Head_HP <= 0;
		Global.roundnumber == 20;
	}

	actions
	{
		Set Status(Event Player, Null, Stunned, 2);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Eye Position(Event Player) + Vector(0, 0, 0), 2,
			Visible To Position and Radius);
		Play Effect(All Players(All Teams), Wrecking Ball Minefield Explosion Effect, Color(White), Eye Position(Event Player), 1);
		Play Effect(All Players(All Teams), Wrecking Ball Minefield Explosion Sound, Color(White), Eye Position(Event Player), 200);
	}
}

disabled rule("280 Colossal charger slam")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Global.roundnumber == 20;
	}

	actions
	{
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Effect, Color(White), Position Of(Event Player), 1);
		Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(White), Eye Position(Event Player), 200);
		Damage(Players Within Radius(Event Player, 15, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player,
			75);
	}
}

disabled rule("281 Colossal charger firestrike barrage")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Global.roundnumber == 20;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Press Button(Event Player, Button(Ability 2));
		Set Ability Cooldown(Event Player, Button(Ability 2), 8);
	}
}

disabled rule("282 Making minigun shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Button Held(Players On Hero(Hero(Reinhardt), Team 2), Button(Primary Fire)) == True;
		Event Player.Part == Custom String("Minigun");
	}

	actions
	{
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Press Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Cancel Primary Action(Event Player);
		Wait(0.050, Ignore Condition);
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("283 Imperial warmech setup ================================================")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Global.Bosssequencer == 3;
	}

	actions
	{
		Create Dummy Bot(Hero(D.Va), Team 2, 0, Vector(-80.776, -159.164, 59.549), Vector(0, 0, 0));
		Global.omnicspawn[0] = Slot Of(Players In Slot(0, Team 2));
		"Imperial warmech"
		Set Knockback Received(Event Player, 0);
		Set Move Speed(Event Player, 100);
		Set Damage Dealt(Event Player, 200);
		Start Scaling Player(Event Player, 3, True);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Imperial warmech "));
		Wait(3, Ignore Condition);
		"Cannon 1"
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(D.Va), Team 2), Vector(0, 6.100, 1));
		Last Created Entity.Part = Custom String("Cannon");
		Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.016, Ignore Condition);
		"Cannon 2"
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(D.Va), Team 2), Vector(2.150, 5.400, 1));
		Last Created Entity.Part = Custom String("Cannon");
		Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.016, Ignore Condition);
		"Cannon 3"
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(D.Va), Team 2), Vector(-2.150, 5.400, 1));
		Last Created Entity.Part = Custom String("Cannon");
		Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.016, Ignore Condition);
		"Machine gun 1"
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(D.Va), Team 2), Vector(2, 3, 1));
		Last Created Entity.Part = Custom String("Machine gun");
		Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
		Wait(0.016, Ignore Condition);
		"Machine gun 2"
		Create Dummy Bot(Hero(Bastion), Team 2, -1, Event Player, Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Attach Players(Last Created Entity, Players On Hero(Hero(D.Va), Team 2), Vector(-2, 3, 1));
		Last Created Entity.Part = Custom String("Machine gun");
		Add Health Pool To Player(Event Player, Armor, 9999, True, True);
		Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
		Wait Until(Is Dead(Event Player) == True, 99999);
		Remove All Health Pools From Player(Event Player);
	}
}

disabled rule("284 Cannon stats")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.Part == Custom String("Cannon");
	}

	actions
	{
		Set Healing Received(Event Player, 0);
		Set Max Health(Event Player, 500);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Homing Cannon"));
		Wait(0.350, Ignore Condition);
		Wait Until(Is Dead(Event Player) == True, 99999);
		Set Status(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Null, Stunned, 2);
	}
}

disabled rule("285 Cannon shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Players On Hero(Hero(D.Va), Team 2), Button(Primary Fire)) == True;
	}

	actions
	{
		Create Homing Projectile(Sigma Hypersphere, Event Player, Null, Null, To World, Damage, Opposite Team Of(Team Of(Event Player)),
			75, 0, 5, Bastion Tank Cannon Explosion Effect, Bastion Tank Cannon Explosion Sound, 0.100, 30, 5, 5,
			Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), 0.500);
		Play Effect(All Players(All Teams), Cassidy Flashbang Explosion Sound, Color(White), Eye Position(Event Player), 100);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Gray), Event Player, 2);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("286 Machine gun stats")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.Part == Custom String("Machine gun");
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Start Scaling Player(Event Player, 1.250, True);
		Set Max Health(Event Player, 1000);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Machine gun"));
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		Wait(0.350, Ignore Condition);
		Wait Until(Is Dead(Event Player) == True, 99999);
		Set Status(Players Within Radius(Event Player, 5, Team Of(Event Player), Off), Null, Stunned, 2);
	}
}

disabled rule("287 Machine gun keep form")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Using Ability 1(Event Player) != True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("288 Machine gun shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Bastion;
	}

	conditions
	{
		Is Button Held(Players On Hero(Hero(D.Va), Team 2), Button(Primary Fire)) == True;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

disabled rule("289 Imperial warmech set attacks")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.Major_Attacks = Random Integer(2, 6);
		Wait(0.250, Ignore Condition);
		If(Event Player.Major_Attacks == 2);
			Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Color(White), Eye Position(Event Player), 200);
			Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Effect, Color(White), Position Of(Event Player), 1);
			Wait(0.750, Ignore Condition);
			Create Dummy Bot(Hero(Pharah), Team 2, -1, Event Player, Vector(0, 0, 0));
			Wait(0.016, Ignore Condition);
			Set Status(Last Created Entity, Null, Phased Out, 9999);
			Attach Players(Last Created Entity, Event Player, Vector(0, 5, 0));
			Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
			Wait(7, Ignore Condition);
			Loop If Condition Is True;
		Else If(Event Player.Major_Attacks == 3);
			Create Dummy Bot(Hero(Zarya), Team 2, -1, Event Player, Vector(0, 0, 0));
			Wait(0.016, Ignore Condition);
			Set Status(Last Created Entity, Null, Phased Out, 9999);
			Attach Players(Last Created Entity, Event Player, Vector(0, 2, 0));
			Start Facing(Last Created Entity, Facing Direction Of(Event Player) + Vector(Random Integer(-1, 1), 0, 0), 1000, To Player,
				Direction and Turn Rate);
			Wait(7, Ignore Condition);
			Loop If Condition Is True;
		Else If(Event Player.Major_Attacks == 4);
			Create Dummy Bot(Hero(Sojourn), Team 2, -1, Event Player, Vector(0, 0, 0));
			Wait(0.016, Ignore Condition);
			Set Status(Last Created Entity, Null, Phased Out, 9999);
			Attach Players(Last Created Entity, Event Player, Vector(0, 5, 0));
			Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
			Wait(7, Ignore Condition);
			Loop If Condition Is True;
		Else If(Event Player.Major_Attacks == 5);
			Create Dummy Bot(Hero(Moira), Team 2, -1, Event Player, Vector(0, 0, 0));
			Wait(0.016, Ignore Condition);
			Set Status(Last Created Entity, Null, Phased Out, 9999);
			Attach Players(Last Created Entity, Event Player, Vector(0, 4, 0));
			Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
			Wait(7, Ignore Condition);
			Loop If Condition Is True;
		Else If(Event Player.Major_Attacks == 6);
			Create Dummy Bot(Hero(Junkrat), Team 2, -1, Event Player, Vector(0, 0, 0));
			Wait(0.016, Ignore Condition);
			Set Status(Last Created Entity, Null, Phased Out, 9999);
			Attach Players(Last Created Entity, Event Player, Vector(0, 4, -1));
			Start Facing(Last Created Entity, Facing Direction Of(Event Player), 1000, To World, Direction and Turn Rate);
			Wait(7, Ignore Condition);
			Loop If Condition Is True;
	}
}

disabled rule("290 Rockets function")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Set Invisible(Event Player, All);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Rockets"));
		Wait(0.250, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(2.500, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(3.500, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

disabled rule("291 Artillery setup")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Artillery"));
		Set Ammo(Event Player, 0, 1);
		Set Max Ammo(Event Player, 0, 1);
		Set Invisible(Event Player, All);
		Wait(6, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

disabled rule("292 Artillery function")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zarya;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(0.050, Ignore Condition);
		Set Ammo(Event Player, 0, 1);
		Loop If Condition Is True;
	}
}

disabled rule("293 Imperial warmech destroyed")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Kill(Players Within Radius(Event Player, 7, Team Of(Event Player), Off), Null);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player + Vector(Random Integer(-4,
			4), Random Integer(-3, 3), Random Integer(-3, 3)), 1);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player + Vector(Random Integer(-4,
			4), Random Integer(-3, 3), Random Integer(-3, 3)), 1);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player + Vector(Random Integer(-4,
			4), Random Integer(-3, 3), Random Integer(-3, 3)), 1);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player + Vector(Random Integer(-4,
			4), Random Integer(-3, 3), Random Integer(-3, 3)), 1);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player + Vector(Random Integer(-4,
			4), Random Integer(-3, 3), Random Integer(-3, 3)), 1);
		Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(White), Eye Position(Event Player), 200);
		Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(White), Event Player + Vector(Random Integer(-4,
			4), Random Integer(-3, 3), Random Integer(-3, 3)), 1);
		Wait(0.250, Ignore Condition);
		Wait Until(Is Alive(Event Player) == 0, 99999);
		Destroy All Effects;
		Clear Status(Event Player, Burning);
	}
}

disabled rule("294 Electric field bombs function")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sojourn;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Set Invisible(Event Player, All);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Electric field bombs"));
		Wait(0.500, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Press Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Cancel Primary Action(Event Player);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Wait(4, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

disabled rule("295 Laser function")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Global.roundnumber == 30;
	}

	actions
	{
		Set Healing Dealt(Event Player, 0);
		Set Damage Dealt(Event Player, 200);
		Set Invisible(Event Player, All);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Laser"));
		Wait(0.250, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(6.250, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

disabled rule("296 Seeking Mega mine function")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Junkrat;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Max Health(Event Player, 300);
		Set Damage Dealt(Event Player, 100);
		Start Forcing Dummy Bot Name(Event Player, Custom String("Seeking Mega mine"));
		Wait(0.250, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(3, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Wait(2.250, Ignore Condition);
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("299 out of bounce boundry")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(-109.550, -151.893, -6.832), 2.500, Team 1, Off) == True;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(-104.638, -150.413, -15.437));
	}
}

rule("351 followers ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 2)) < 8;
		Is Dummy Bot(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Bastion);
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(6, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("352 FOLLOWERS attack All")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 2)) < 6;
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Orisa));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Reaper));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			Press Button(Event Player, Button(Ability 2));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Pharah));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Winston));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait(1, Ignore Condition);
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Genji));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Roadhog));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			Start Holding Button(Event Player, Button(Primary Fire));
			Wait(1, Ignore Condition);
			Press Button(Event Player, Button(Secondary Fire));
			Stop Holding Button(Event Player, Button(Primary Fire));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(D.Va));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Mei));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Sombra));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Ana));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Moira));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait(2, Ignore Condition);
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Press Button(Event Player, Button(Ability 1));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Sojourn));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Ashe));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Echo));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Junker Queen));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Sigma));
			Call Subroutine(followerattack2);
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Lifeweaver));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait(1, Ignore Condition);
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Mauga));
			Call Subroutine(followerattack1);
		Else If(Hero Of(Event Player) == Hero(Illari));
			Start Holding Button(Event Player, Button(Secondary Fire));
			Wait(1, Ignore Condition);
			Stop Holding Button(Event Player, Button(Secondary Fire));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
	}
}

rule("391 FOLLOWERS attack subroutine 1")
{
	event
	{
		Subroutine;
		followerattack1;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Wait(6, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("392 FOLLOWERS attack subroutine 2")
{
	event
	{
		Subroutine;
		followerattack2;
	}

	actions
	{
		Press Button(Event Player, Button(Primary Fire));
		Wait(6, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("393 POINTS Zombie kill (final hit)")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	actions
	{
		If(Is Meleeing(Event Player) == False);
			If(Event Was Critical Hit == False);
				Event Player.points += 50 * Event Player.H;
				Skip If(Event Player.H != 1, 1);
				Skip If(Event Player.H == 1, 1);
				Global.R += 100 * Event Player.H;
				Event Player.xp[Event Player.currentheroxp] += 5;
			Else If(Event Was Critical Hit == True);
				Event Player.points += 100 * Event Player.H;
				Skip If(Event Player.H != 1, 1);
				Skip If(Event Player.H == 1, 1);
				Global.R += 200 * Event Player.H;
				Event Player.xp[Event Player.currentheroxp] += 10;
			End;
		Else If(Is Meleeing(Event Player) == True);
			Event Player.points += 130 * Event Player.H;
			Skip If(Event Player.H != 1, 1);
			Skip If(Event Player.H == 1, 1);
			Global.R += 260 * Event Player.H;
			Event Player.xp[Event Player.currentheroxp] += 15;
	}
}

rule("396 POINTS Zombie kill (elimination)")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == False;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		If(Event Was Critical Hit == False);
			Event Player.points += 40 * Event Player.H;
			Skip If(Event Player.H != 1, 1);
			Skip If(Event Player.H == 1, 1);
			Global.R += 80 * Event Player.H;
			Event Player.xp[Event Player.currentheroxp] += 5;
		Else If(Event Was Critical Hit == True);
			Event Player.points += 80 * Event Player.H;
			Skip If(Event Player.H != 1, 1);
			Skip If(Event Player.H == 1, 1);
			Global.R += 160 * Event Player.H;
			Event Player.xp[Event Player.currentheroxp] += 10;
	}
}

rule("402 Omnic movespeed + health")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Max Health(Event Player, 5 * Global.roundnumber);
		If(Global.roundnumber <= 6);
			Set Move Speed(Event Player, 52 + 8 * Global.roundnumber);
		Else If(Global.roundnumber > 6);
			Set Move Speed(Event Player, 100);
	}
}

rule("403 Challenge waves")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.challengewave == 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		If(Global.numberofzombies < 4);
			Global.challengewave = 0;
	}
}

rule("404 set challenge wave every few rounds")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.chwaveinterval >= 4;
	}

	actions
	{
		Global.challengewave = Random Integer(0, 1);
		If(Global.challengewave == 1);
			Global.chwaveinterval = 0;
	}
}

rule("407 OMNIC Bots Move Toward Players")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.O == False;
		Global.idlebots == False;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 1.750;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		End;
		Skip If(Global.zombstrafe == 0, 99);
		Skip If(Global.powerconnected == 1, 1);
		Skip If(Global.roundnumber < 15, 99);
		Wait(Random Integer(3, 4), Ignore Condition);
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 1, 1);
		Wait(Random Integer(0.300, 1), Ignore Condition);
		Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		Wait(Random Integer(0.300, 1), Ignore Condition);
		Stop Throttle In Direction(Event Player);
		Loop If Condition Is True;
	}
}

rule("408 OMNIC Bots Face Nearest Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Has Spawned(Event Player) == True;
		Global.O == False;
	}

	actions
	{
		disabled If(Event Player == Team 2);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
			All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
			To World, Direction and Turn Rate);
		disabled Else If(Event Player == Team 1);
		disabled Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
			All Living Players(Team 2), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
			To World, Direction and Turn Rate);
	}
}

rule("409 OMNIC Bots Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 1.800;
		Global.O == False;
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(Zenyatta);
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("difficulty"), Custom String("zombie reaction time"), 0.350, 0, 1, 0), Abort When False);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("410 OMNIC Bots Dont Attack if Not Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 1.800;
		Is Firing Primary(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Doomfist);
		Hero Of(Event Player) != Hero(Zenyatta);
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("411 OMNIC Bots AutoUlt")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
		Hero Of(Event Player) != Hero(Zenyatta);
	}

	actions
	{
		Wait(0.016 * Slot Of(Event Player) + 1, Abort When False);
		Press Button(Event Player, Button(Ultimate));
		Wait(Random Integer(0.250, 0.450), Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("412 OMNIC Bots Ult Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) != Hero(Genji);
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Zenyatta);
		Hero Of(Event Player) != Hero(Mercy);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("413 OMNIC torb use ability")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.roundnumber / 1 >= Absolute Value(15);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(5, Ignore Condition);
		Loop;
	}
}

rule("414 OMNIC rien use ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.roundnumber / 1 >= Absolute Value(26);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("415 OMNIC brigg wave 16")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Global.roundnumber / 1 >= Absolute Value(16);
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Set Move Speed(Event Player, 120);
	}
}

rule("417 OMNIC torb use ability")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.powerconnected == 1;
		Global.roundnumber < 15;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(5, Ignore Condition);
		Loop;
	}
}

rule("419 OMNIC set winston always has ult")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("420 OMNIC set genji always has ult")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("422 OMNIC Dont Attack if Not Near genji")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 1.800;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("423 OMNIC genji use reflect after hitting player")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Genji;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("424 OMNIC moira Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 1.800;
		Global.O == False;
	}

	actions
	{
		Wait(0.490, Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("425 OMNIC moira fade if far away")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T == 0),
			Current Array Element))) > 8;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("426 OMNIC WAVE BOSS doomfist Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 2;
		disabled Global.O == False;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("427 OMNIC WAVE BOSS doomfist Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 15;
		Global.O == False;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Start Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("428 OMNIC WAVE BOSS doomfist Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Doomfist;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 10;
		Global.O == False;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("429 OMNIC WAVE BOSS zenyatta Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 2;
		disabled Global.O == False;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("430 OMNIC WAVE BOSS zenyatta stay crouched")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("431 OMNIC WAVE BOSS zenyatta give ult halfl health")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Normalized Health(Event Player) <= 0.500;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("432 OMNIC WAVE BOSS zenyatta discord if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 10;
		disabled Global.O == False;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Press Button(Event Player, Button(Ability 2));
		disabled Loop If Condition Is True;
	}
}

rule("433 OMNIC WAVE BOSS roadhog use hook")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 20;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 10;
		Slot Of(Event Player) == Players In Slot(0, Team 2);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		Wait(15, Ignore Condition);
	}
}

rule("434 OMNIC WAVE BOSS roadhog use heal")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Normalized Health(Event Player) <= 0.500;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Secondary Fire));
		Wait(3, Ignore Condition);
		Stop Holding Button(Event Player, Button(Secondary Fire));
	}
}

rule("435 OMNIC ALL heros (excluding wave boss)")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 10;
		Slot Of(Event Player) != Players In Slot(0, Team 2);
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Roadhog));
			Press Button(Event Player, Button(Ability 2));
			Wait(Random Integer(15, 25), Ignore Condition);
		Else If(Hero Of(Event Player) == Hero(Reaper));
			Press Button(Event Player, Button(Ability 1));
			Wait(Random Integer(15, 25), Ignore Condition);
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			Press Button(Event Player, Button(Jump));
			Wait(0.600, Ignore Condition);
			Press Button(Event Player, Button(Jump));
			Wait(Random Integer(20, 25), Ignore Condition);
		Else If(Hero Of(Event Player) == Hero(Pharah));
			Press Button(Event Player, Button(Ability 1));
			Wait(0.750, Ignore Condition);
			Press Button(Event Player, Button(Ability 2));
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Press Button(Event Player, Button(Ability 1));
			Wait(0.750, Ignore Condition);
			Press Button(Event Player, Button(Ability 2));
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Press Button(Event Player, Button(Secondary Fire));
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Press Button(Event Player, Button(Ability 1));
			Wait(2, Ignore Condition);
			Press Button(Event Player, Button(Ability 1));
			Wait(2, Ignore Condition);
			Press Button(Event Player, Button(Ability 1));
			Wait(2, Ignore Condition);
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Press Button(Event Player, Button(Ability 1));
			Wait(0.500, Ignore Condition);
			Press Button(Event Player, Button(Ability 2));
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Press Button(Event Player, Button(Ability 1));
			Wait(0.500, Ignore Condition);
			Press Button(Event Player, Button(Ability 2));
			Wait(2, Ignore Condition);
			Press Button(Event Player, Button(Secondary Fire));
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Press Button(Event Player, Button(Ability 1));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			Press Button(Event Player, Button(Secondary Fire));
			Wait(6, Ignore Condition);
			Loop If Condition Is True;
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			If(Distance Between(Event Player, First Of(All Living Players(Team 1))) < 3);
				Press Button(Event Player, Button(Secondary Fire));
			Else If(Hero Of(Event Player) == Hero(Brigitte));
				Press Button(Event Player, Button(Ability 1));
				Wait(6, Ignore Condition);
				Loop If Condition Is True;
			Else If(Hero Of(Event Player) == Hero(Tracer));
				If(Normalized Health(Event Player) <= 0.500);
					Press Button(Event Player, Button(Ability 2));
					Wait(Random Integer(40, 60), Ignore Condition);
				End;
			Else If(Hero Of(Event Player) == Hero(Mercy));
				Set Ultimate Charge(Event Player, 100);
			Else If(Hero Of(Event Player) == Hero(D.Va));
				Press Button(Event Player, Button(Ability 1));
				If(Normalized Health(Event Player) <= 0.250);
					Start Holding Button(Event Player, Button(Secondary Fire));
					Wait(3, Ignore Condition);
					Stop Holding Button(Event Player, Button(Secondary Fire));
				End;
			Else If(Hero Of(Event Player) == Hero(Mei));
				If(Normalized Health(Event Player) <= 0.400);
					Press Button(Event Player, Button(Ability 1));
				End;
			Else If(Hero Of(Event Player) == Hero(Ana));
				Press Button(Event Player, Button(Ability 1));
				If(Normalized Health(Event Player) <= 0.400);
					Press Button(Event Player, Button(Ability 2));
				End;
			Else If(Hero Of(Event Player) == Hero(Sombra));
				Press Button(Event Player, Button(Primary Fire));
				Wait(1, Ignore Condition);
				Press Button(Event Player, Button(Ability 2));
				Wait(1.500, Ignore Condition);
				Press Button(Event Player, Button(Ability 1));
			Else If(Hero Of(Event Player) == Hero(Orisa));
				If(Normalized Health(Event Player) <= 0.500);
					Press Button(Event Player, Button(Secondary Fire));
					Press Button(Event Player, Button(Ability 1));
				End;
			Else If(Hero Of(Event Player) == Hero(Ramattra));
				Press Button(Event Player, Button(Ability 1));
				Wait(8, Ignore Condition);
				Loop;
			Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
				Press Button(Event Player, Button(Ability 1));
				Press Button(Event Player, Button(Ability 2));
			Else If(Hero Of(Event Player) == Hero(Sojourn));
				Press Button(Event Player, Button(Ability 1));
				Wait(1, Ignore Condition);
				Press Button(Event Player, Button(Jump));
			Else If(Hero Of(Event Player) == Hero(Ashe));
				Press Button(Event Player, Button(Ability 2));
			Else If(Hero Of(Event Player) == Hero(Echo));
				Press Button(Event Player, Button(Secondary Fire));
				Press Button(Event Player, Button(Secondary Fire));
			Else If(Hero Of(Event Player) == Hero(Baptiste));
				If(Normalized Health(Event Player) <= Random Integer(0.500, 0.750));
					Press Button(Event Player, Button(Ability 1));
				End;
			Else If(Hero Of(Event Player) == Hero(Kiriko));
				If(Normalized Health(Event Player) <= Random Integer(0.500, 0.750));
					Press Button(Event Player, Button(Ability 2));
				End;
			Else If(Hero Of(Event Player) == Hero(Junker Queen));
				Press Button(Event Player, Button(Ability 1));
				If(Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 5);
					Press Button(Event Player, Button(Ability 2));
				End;
			Else If(Hero Of(Event Player) == Hero(Sigma));
				Start Holding Button(Event Player, Button(Secondary Fire));
				Wait(2, Ignore Condition);
				Stop Holding Button(Event Player, Button(Secondary Fire));
				Wait(0.250, Ignore Condition);
				Press Button(Event Player, Button(Secondary Fire));
				If(Normalized Health(Event Player) <= Random Integer(0.500, 0.750));
					Press Button(Event Player, Button(Ability 1));
				End;
			Else If(Hero Of(Event Player) == Hero(Lifeweaver));
				Press Button(Event Player, Button(Jump));
				Wait(0.300, Ignore Condition);
				Press Button(Event Player, Button(Jump));
				Press Button(Event Player, Button(Ability 1));
			Else If(Hero Of(Event Player) == Hero(Mauga));
				Press Button(Event Player, Button(Ability 1));
			Else If(Hero Of(Event Player) == Hero(Illari));
				Press Button(Event Player, Button(Ability 2));
				If(Normalized Health(Event Player) <= Random Integer(0.500, 0.750));
					Press Button(Event Player, Button(Ability 1));
				End;
	}
}

rule("436 OMNIC set features ALL")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Slot Of(Event Player) != Players In Slot(0, Team 2);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Start Modifying Hero Voice Lines(Event Player, 0.500, True);
		If(Hero Of(Event Player) == Hero(Roadhog));
			Start Scaling Player(Event Player, 0.600, True);
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Start Scaling Player(Event Player, 0.400, True);
		Else If(Hero Of(Event Player) == Hero(D.Va));
			Start Scaling Player(Event Player, 0.700, True);
			Disallow Button(Event Player, Button(Primary Fire));
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			Start Scaling Player(Event Player, 0.650, True);
			Wait(2.500, Ignore Condition);
			Press Button(Event Player, Button(Ability 1));
		Else If(Hero Of(Event Player) == Hero(Orisa));
			Start Scaling Player(Event Player, 0.650, True);
		Else If(Hero Of(Event Player) == Hero(Sigma));
			Start Scaling Player(Event Player, 0.650, True);
		Else If(Hero Of(Event Player) == Hero(Mauga));
			Start Scaling Player(Event Player, 0.650, True);
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			Start Scaling Player(Event Player, 1.500, True);
		Else If(Hero Of(Event Player) == Hero(Winston));
			Start Scaling Player(Event Player, 0.500, True);
			Start Modifying Hero Voice Lines(Event Player, 1.500, True);
	}
}

rule("488 button heald 1 teleporter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Players Within Radius(Global.Vectordoorpositions[101], 3, Team 1, Off) == True;
		disabled Is True For Any(Array Slice(Global.Vectordoorpositions, 101, 103), Distance Between(Current Array Element, Event Player)
			< Array Slice(Global.doorradius, 101, 103)[Current Array Index]) == True;
	}

	actions
	{
		If(All Living Players(Team 1) == Players Within Radius(Global.Vectordoorpositions[101], 3, Team 1, Off));
			If(Global.teleporterwait == 0);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Kill(Players Within Radius(Global.Vectordoorpositions[101], 5, Team 2, Off), First Of(All Living Players(Team 1)));
				Destroy Effect(Last Created Entity);
				Teleport(All Players(Team 1), Global.Vectordoorpositions[102]);
				Global.botspawnzone = 1;
				Global.teleporterwait = 1;
				Global.teleportercolor = Color(Red);
				Global.telespot = 102;
			Else If(Global.teleporterwait > 0);
				Small Message(Event Player, Custom String("  {0} That machine is not a toy!", Hero Icon String(Hero(Ramattra))));
				Wait(4, Ignore Condition);
			End;
		Else If(All Living Players(Team 1) != Players Within Radius(Global.Vectordoorpositions[101], 3, Team 1, Off));
			Small Message(Event Player, Custom String("  You can't leave your friends behind!", Hero Icon String(Hero(Ramattra))));
			Wait(4, Ignore Condition);
	}
}

rule("492 button heald 2 teleporter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Players Within Radius(Global.Vectordoorpositions[102], 3, Team 1, Off) == True;
	}

	actions
	{
		If(All Living Players(Team 1) == Players Within Radius(Global.Vectordoorpositions[102], 3, Team 1, Off));
			If(Global.teleporterwait == 0);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Kill(Players Within Radius(Global.Vectordoorpositions[102], 5, Team 2, Off), First Of(All Living Players(Team 1)));
				Destroy Effect(Last Created Entity);
				Teleport(All Players(Team 1), Global.Vectordoorpositions[103]);
				Global.botspawnzone = 2;
				Global.teleporterwait = 1;
				Global.teleportercolor = Color(Red);
				Global.telespot = 103;
			Else If(Global.teleporterwait > 0);
				Small Message(Event Player, Custom String("  {0} That machine is not a toy!", Hero Icon String(Hero(Ramattra))));
				Wait(4, Ignore Condition);
			End;
		Else If(All Living Players(Team 1) != Players Within Radius(Global.Vectordoorpositions[102], 3, Team 1, Off));
			Small Message(Event Player, Custom String("  You can't leave your friends behind!", Hero Icon String(Hero(Ramattra))));
			Wait(4, Ignore Condition);
	}
}

rule("494 button heald 3 teleporter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Players Within Radius(Global.Vectordoorpositions[103], 3, Team 1, Off) == True;
	}

	actions
	{
		If(All Living Players(Team 1) == Players Within Radius(Global.Vectordoorpositions[103], 3, Team 1, Off));
			If(Global.teleporterwait == 0);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(Event Player, Ana Nano Boosted Effect, Team Of(Event Player), Event Player, 1, Visible To Position and Radius);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Blue), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Frozen, 5);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Wait(0.250, Ignore Condition);
				Set Status(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(Global.roundnumber), Stunned, 0.250);
				Destroy Effect(Last Created Entity);
				Create Effect(All Players(All Teams), Winston Tesla Cannon Target Effect, Color(Black), Event Player, 80,
					Visible To Position and Radius);
				Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
				Wait(0.250, Ignore Condition);
				Kill(Players Within Radius(Global.Vectordoorpositions[103], 5, Team 2, Off), First Of(All Living Players(Team 1)));
				Destroy Effect(Last Created Entity);
				Teleport(All Players(Team 1), Global.Vectordoorpositions[101]);
				Global.botspawnzone = 0;
				Global.teleporterwait = 1;
				Global.teleportercolor = Color(Red);
				Global.telespot = 101;
			Else If(Global.teleporterwait > 0);
				Small Message(Event Player, Custom String("  {0} That machine is not a toy!", Hero Icon String(Hero(Ramattra))));
				Wait(4, Ignore Condition);
			End;
		Else If(All Living Players(Team 1) != Players Within Radius(Global.Vectordoorpositions[103], 3, Team 1, Off));
			Small Message(Event Player, Custom String("  You can't leave your friends behind!", Hero Icon String(Hero(Ramattra))));
			Wait(4, Ignore Condition);
	}
}

rule("497 start control")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start == 0;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Global.setspawn = Random Integer(0, 5);
		Wait(0.250, Ignore Condition);
		Global.start = 1;
		Wait(2, Ignore Condition);
		Global.roundnumber = Workshop Setting Integer(Custom String("Set Wave number"), Custom String("Set starting wave"), 1, 1, 100, 0);
		Enable Built-In Game Mode Music;
		Global.rngbox = Random Value In Array(Global.mysterylocations);
		Stop Camera(All Players(All Teams));
		Wait(0.100, Ignore Condition);
		Enable Hero HUD(All Players(All Teams));
		Global.aprilrng = Random Integer(1, 100);
		Global.startlines = Random Integer(0, 0);
		Event Player.heroswap[0] = Hero Of(Event Player);
		Global.rngbox2 = Random Value In Array(Global.Mysterylocations2);
	}
}

rule("498 Rule 480 start screen")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start == 0;
	}

	actions
	{
		Start Camera(Event Player, Vector(255.366, 9.471, -169.750), Vector(261.155, 6.939, -180.808), 0);
		Disable Hero HUD(Event Player);
		Wait(15, Abort When False);
		Start Camera(Event Player, Vector(159.409, 82.320, 212.576), Vector(267.128, 50, 130.027), 0);
		Wait(0.250, Abort When False);
		Start Camera(Event Player, Vector(343.545, 75.093, 219.552), Vector(267.128, 50, 130.027), 0.200);
		Wait(15, Abort When False);
		Start Camera(Event Player, Vector(353.189, 30.177, -98.238), Vector(284.894, -20, -243.771), 0);
		Wait(0.250, Abort When False);
		Start Camera(Event Player, Vector(272.905, 4.398, -171.199), Vector(284.894, -20, -243.771), 0.200);
		Wait(15, Abort When False);
		Start Camera(Event Player, Vector(-135.038, -140.843, -18.138), Vector(-16.898, -155.331, 62.147), 0);
		Wait(0.250, Abort When False);
		Start Camera(Event Player, Vector(-137.925, -143.078, 135.228), Vector(-16.898, -155.331, 62.147), 0.200);
		Wait(15, Abort When False);
		Loop If Condition Is True;
	}
}

rule("500 mystery box locations")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.mysterylocations[0] = Vector(-75.893, -154.067, 59.979);
		Global.mysterylocations[1] = Vector(-108.742, -159.900, 54.728);
		Global.mysterylocations[2] = Vector(-57.933, -150.045, 80.982);
		Global.mysterylocations[3] = Vector(-41.631, -160.529, 60.089);
		Global.mysterylocations[4] = Vector(269.820, 39.780, 162.370);
		Global.mysterylocations[5] = Vector(242.940, 43.640, 167.180);
		Global.mysterylocations[6] = Vector(239.350, 47.710, 146.570);
		Global.mysterylocations[7] = Vector(237.690, 42.200, 141.790);
		Global.mysterylocations[8] = Vector(248.180, -8.970, -205.910);
		Global.mysterylocations[9] = Vector(316.020, -13.650, -211.450);
		Global.mysterylocations[10] = Vector(294.060, -13, -213.350);
		Global.mysterylocations[11] = Vector(301.480, -15, -242.300);
		Global.Mysterylocations2[0] = Vector(-89.795, -152.045, 60.109);
		Global.Mysterylocations2[1] = Vector(-91.901, -150.893, 136.878);
		Global.Mysterylocations2[2] = Vector(-47.564, -159.045, 48.031);
		Global.Mysterylocations2[3] = Vector(-59.178, -154.045, 83.014);
		Global.Mysterylocations2[4] = Vector(316.200, 42.750, 192.140);
		Global.Mysterylocations2[5] = Vector(253.600, 40.700, 152.920);
		Global.Mysterylocations2[6] = Vector(284.950, 40.710, 152.430);
		Global.Mysterylocations2[7] = Vector(224.790, 43.690, 144.070);
		Global.Mysterylocations2[8] = Vector(238.105, -10.411, -243.114);
		Global.Mysterylocations2[9] = Vector(259.800, -14.370, -199.450);
		Global.Mysterylocations2[10] = Vector(305.540, -15, -234.410);
		Global.Mysterylocations2[11] = Vector(273.980, -13, -213.670);
	}
}

rule("501 hero buy array list")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.start == 1;
	}

	actions
	{
		"need to remove wonderweapons (30,000 point heros) from the randomized locations"
		Global.buyheros[0] = Vector(-75.015, -153.892, 11.314);
		"need to simplify into 1 workshop array element"
		Global.buyheros[1] = Vector(-64.108, -150.077, -12.435);
		Global.buyheros[2] = Vector(-77.968, -151.045, -19.799);
		Global.buyheros[3] = Vector(-90.394, -154.045, 22.857);
		Global.buyheros[4] = Vector(-109.583, -155.030, 18.466);
		Global.buyheros[5] = Vector(-111.055, -152.024, 40.829);
		Global.buyheros[6] = Vector(-73.026, -160.045, 49.380);
		Global.buyheros[7] = Vector(-101.916, -157.120, 84.941);
		Global.buyheros[8] = Vector(328.180, 44.090, 154.950);
		Global.buyheros[9] = Vector(307.830, 45.700, 166.880);
		Global.buyheros[10] = Vector(286.820, 41.010, 200.660);
		Global.buyheros[11] = Vector(262.040, 37.690, 178.930);
		Global.buyheros[12] = Vector(254.350, 40.700, 153.040);
		Global.buyheros[13] = Vector(222.800, 43.690, 149.270);
		Global.buyheros[14] = Vector(282.570, 40.690, 137.980);
		Global.buyheros[15] = Vector(317.710, 43.690, 149.200);
		Global.buyheros[16] = Vector(230.290, -7.840, -236.560);
		Global.buyheros[17] = Vector(261.540, -15, -240.030);
		Global.buyheros[18] = Vector(284.280, -11.020, -265.110);
		Global.buyheros[19] = Vector(313, -13.880, -250.270);
		Global.buyheros[20] = Vector(334.770, -11.880, -224.670);
		Global.buyheros[21] = Vector(307.370, -14.240, -198.170);
		Global.buyheros[22] = Vector(276.420, -14, -195.170);
		Global.buyheros[23] = Vector(297.940, -14, -209.910);
		Global.herobuyrandomized = Randomized Array(Global.buyheros);
	}
}

rule("504 perk buy array list")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.start == 1;
	}

	actions
	{
		"need to do this for the rest of the arrays"
		Global.buyperks = Array(Vector(-82.374, -159.200, 59.915), Vector(-43.093, -159.045, 47.648), Vector(-109.726, -154.997, 121.286),
			Vector(304.560, 44.960, 194.940), Vector(263.760, 43.690, 178.310), Vector(285.830, 40.700, 158.770), Vector(183.370, 45.460,
			186.800), Vector(293.470, -9, -248.130), Vector(273.920, -9, -248.130), Vector(270.410, -14, -209.940));
		"need to set easy and normal difficulties to not randomize locations for buyables - hard will randomize (except pack a punch)"
		Global.perkbuyrandomized = Randomized Array(Global.buyperks);
	}
}

rule("507 april first quotes")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Global.aprilrng == 100;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(D.Va));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(0, 2)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(3, 4)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Junker Queen));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(5, 6)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Ana));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(7, 8)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Orisa));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(9, 10)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(11, 13)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(14, 15)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Roadhog));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(16, 18)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Sigma));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(19, 20)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Winston));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(21, 21)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(22, 23)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(24, 26)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Ashe));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(27, 28)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(29, 31)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(32, 37)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Echo));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(38, 38)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Genji));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(39, 40)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(41, 43)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(44, 45)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Mei));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(46, 47)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Pharah));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(48, 51)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Reaper));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(52, 53)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Sojourn));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(54, 55)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(56, 58)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Sombra));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(59, 61)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(62, 64)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(65, 66)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Tracer));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(67, 68)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(69, 71)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(72, 75)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(76, 77)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(78, 79)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(80, 81)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(82, 84)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Moira));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(85, 87)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			Create In-World Text(All Players(All Teams), Index Of Array Value(Global.aprilquotes, Random Integer(88, 90)), Event Player, 1,
				Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
			Wait(5, Ignore Condition);
			Destroy In-World Text(Last Text ID);
	}
}

rule("508 april quotes strings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.aprilquotes[0] = Custom String("Peep this POTG");
		Global.aprilquotes[1] = Custom String("Pressing Q!");
		Global.aprilquotes[2] = Custom String("Sorry, Dae-hyun!");
		Global.aprilquotes[3] = Custom String("You can’t get me!");
		Global.aprilquotes[4] = Custom String("Wheeeeeee!");
		Global.aprilquotes[5] = Custom String("Cut cut cut cut cut cut cut!");
		Global.aprilquotes[6] = Custom String("Everybody, look at my axe!");
		Global.aprilquotes[7] = Custom String("Go get them, tiger.");
		Global.aprilquotes[8] = Custom String("Hope this helps!");
		Global.aprilquotes[9] = Custom String("Check yourself or wreck yourself!");
		Global.aprilquotes[10] = Custom String("Yee-haw rodeo!");
		Global.aprilquotes[11] = Custom String("Agony is grape-flavoured!");
		Global.aprilquotes[12] = Custom String("You will suffer as I, Ramattra have suffered! Your torment will outlast the stars…");
		Global.aprilquotes[13] = Custom String("Who wants a purple hug?");
		Global.aprilquotes[14] = Custom String("Have a seat!");
		Global.aprilquotes[15] = Custom String("Here comes the bonk!");
		Global.aprilquotes[16] = Custom String("You get scrap. You get scrap.");
		Global.aprilquotes[17] = Custom String("Everybody gets scrap!");
		Global.aprilquotes[18] = Custom String("This little piggy will run you over.");
		Global.aprilquotes[19] = Custom String(" The universe sings to me!");
		Global.aprilquotes[20] = Custom String("What are those?");
		Global.aprilquotes[21] = Custom String("Winston!");
		Global.aprilquotes[22] = Custom String("Collect the little balls to win a prize.");
		Global.aprilquotes[23] = Custom String(" Behold the children of Wrecking Ball.");
		Global.aprilquotes[24] = Custom String("Group hug!");
		Global.aprilquotes[25] = Custom String("Not a supernova – a Zaryanova.");
		Global.aprilquotes[26] = Custom String("Crush Crush Crush.");
		Global.aprilquotes[27] = Custom String("Fred! I mean Bob! Do something!");
		Global.aprilquotes[28] = Custom String("Get in there, Fred! I mean Bob!");
		Global.aprilquotes[29] = Custom String("(fog horn beeps)");
		Global.aprilquotes[30] = Custom String("(air horn beeps)");
		Global.aprilquotes[31] = Custom String("(musical beeps)");
		Global.aprilquotes[32] = Custom String("It’s two in the mornin’");
		Global.aprilquotes[33] = Custom String("It’s past your bedtime.");
		Global.aprilquotes[34] = Custom String("It’s half past six.");
		Global.aprilquotes[35] = Custom String("It’s 3:24.");
		Global.aprilquotes[36] = Custom String("It’s 4:57.");
		Global.aprilquotes[37] = Custom String("It’s a country minute shy of the devil’s lunchbreak.");
		Global.aprilquotes[38] = Custom String("I’m better than you at…");
		Global.aprilquotes[39] = Custom String("(Sword noises)");
		Global.aprilquotes[40] = Custom String("Tatakae!");
		Global.aprilquotes[41] = Custom String("Sic ‘em, boys!");
		Global.aprilquotes[42] = Custom String("Nomnomnomnomnomnom!");
		Global.aprilquotes[43] = Custom String("Who’s a good dragon? Who’s a good dragon?");
		Global.aprilquotes[44] = Custom String("Everyone stand very still!");
		Global.aprilquotes[45] = Custom String("Who’s using a tire? Not me! heheh Don’t worry!");
		Global.aprilquotes[46] = Custom String("(Sigh) I’m turning on the AC!");
		Global.aprilquotes[47] = Custom String("Activating ceiling fan!");
		Global.aprilquotes[48] = Custom String("Justice rains from the ground!");
		Global.aprilquotes[49] = Custom String("Try and shoot me! You won’t!");
		Global.aprilquotes[50] = Custom String("Rain justices form above!");
		Global.aprilquotes[51] = Custom String("Hope you like rockets!");
		Global.aprilquotes[52] = Custom String("Happy, happy birthday…");
		Global.aprilquotes[53] = Custom String("WheeEEeeeeEEEeeeeEEEeeee…");
		Global.aprilquotes[54] = Custom String("Bye-bye, bad guys!");
		Global.aprilquotes[55] = Custom String("That starts then! (Pause) What?");
		Global.aprilquotes[56] = Custom String("Who took my dentures?");
		Global.aprilquotes[57] = Custom String("Turn that damn music down!");
		Global.aprilquotes[58] = Custom String("War is a game, and I’m using cheats!");
		Global.aprilquotes[59] = Custom String("Get DDOSed!");
		Global.aprilquotes[60] = Custom String("Propaganda is useless!");
		Global.aprilquotes[61] = Custom String("I’m in!");
		Global.aprilquotes[62] = Custom String("I am blocking you!");
		Global.aprilquotes[63] = Custom String("Superior to RGB!");
		Global.aprilquotes[64] = Custom String("This wall is incredibly lit!");
		Global.aprilquotes[65] = Custom String("Ahem. La-va!");
		Global.aprilquotes[66] = Custom String("The floor is lava.");
		Global.aprilquotes[67] = Custom String("Wuh wuh wuh whoa!");
		Global.aprilquotes[68] = Custom String("Tag, you’re it!");
		Global.aprilquotes[69] = Custom String("Hello! I can see you!");
		Global.aprilquotes[70] = Custom String("Wallhacks initialized.");
		Global.aprilquotes[71] = Custom String("I’m making popcorn.");
		Global.aprilquotes[72] = Custom String("This won’t hurt. Too much.");
		Global.aprilquotes[73] = Custom String("Say cheese!");
		Global.aprilquotes[74] = Custom String("Everybody shoot through the box! Through the box!");
		Global.aprilquotes[75] = Custom String("Shoot through the big glowy thing.");
		Global.aprilquotes[76] = Custom String("Face my mace. Mace to the face!");
		Global.aprilquotes[77] = Custom String("Mace to the mace to the mace to the mace to the face!");
		Global.aprilquotes[78] = Custom String("Believe it!");
		Global.aprilquotes[79] = Custom String("Just aim for the head!");
		Global.aprilquotes[80] = Custom String("Let’s get a noise violation!");
		Global.aprilquotes[81] = Custom String("Who wants a billion hit points?");
		Global.aprilquotes[82] = Custom String("Moth formation, go!");
		Global.aprilquotes[83] = Custom String("Time to connect the dots!");
		Global.aprilquotes[84] = Custom String("Do I have to?");
		Global.aprilquotes[85] = Custom String("Kamehameha!");
		Global.aprilquotes[86] = Custom String("Here’s the craic!");
		Global.aprilquotes[87] = Custom String("I’ll show you meta!");
		Global.aprilquotes[88] = Custom String("Deal with it.");
		Global.aprilquotes[89] = Custom String("You’re invincible. Now… shoot them!");
		Global.aprilquotes[90] = Custom String("Become unkillable. Some conditions may apply");
	}
}

rule("509 bot name singleplayer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) == 1;
		Global.roundnumber > 0;
		Global.aprilrng == 50;
	}

	actions
	{
		Start Forcing Dummy Bot Name(Players In Slot(0, Team 2), Custom String("01000111 01100101"));
		Start Forcing Dummy Bot Name(Players In Slot(1, Team 2), Custom String("01110100 00100000"));
		Start Forcing Dummy Bot Name(Players In Slot(2, Team 2), Custom String("01101111 01110101"));
		Start Forcing Dummy Bot Name(Players In Slot(3, Team 2), Custom String("01110100 00100000"));
		Start Forcing Dummy Bot Name(Players In Slot(4, Team 2), Custom String("01101111 01100110"));
		Start Forcing Dummy Bot Name(Players In Slot(5, Team 2), Custom String("00100000 01101000"));
		Start Forcing Dummy Bot Name(Players In Slot(6, Team 2), Custom String("01100101 01110010"));
		Start Forcing Dummy Bot Name(Players In Slot(7, Team 2), Custom String("01100101 00101110"));
	}
}

rule("510 bot name coop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) > 1;
		Global.aprilrng == 50;
		Global.roundnumber > 0;
	}

	actions
	{
		Start Forcing Dummy Bot Name(Players In Slot(0, Team 2), Custom String("77 6F 72 6B 69"));
		Start Forcing Dummy Bot Name(Players In Slot(1, Team 2), Custom String("6E 67 20 74 6F"));
		Start Forcing Dummy Bot Name(Players In Slot(2, Team 2), Custom String("67 65 74 68 65"));
		Start Forcing Dummy Bot Name(Players In Slot(3, Team 2), Custom String("72 20 69 73"));
		Start Forcing Dummy Bot Name(Players In Slot(4, Team 2), Custom String("20 66 75 74"));
		Start Forcing Dummy Bot Name(Players In Slot(5, Team 2), Custom String("69 6C 65 21"));
	}
}

rule("512 gain level")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.xp[Event Player.currentheroxp] >= 100;
		Global.experiencesystem == True;
	}

	actions
	{
		Event Player.XPlevel[Event Player.currentheroxp] += 1;
		Event Player.xp[Event Player.currentheroxp] = 0;
		disabled Event Player.damagevariable += Random Integer(1, 10);
		disabled Event Player.healvariable += Random Integer(3, 13);
		disabled Event Player.healthmax += Random Integer(1, 5);
	}
}

rule("513 Rule 321 lvl gain stat changes")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.experiencesystem == True;
	}

	actions
	{
		If(Event Player.XPlevel == 5);
			Set Ability 1 Enabled(Event Player, True);
		Else If(Event Player.XPlevel == 10);
			Set Ability 2 Enabled(Event Player, True);
		Else If(Event Player.XPlevel == 15);
			Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("516 rounds add points and XP")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.roundnumber >= 1;
		Workshop Setting Toggle(Custom String("difficulty"), Custom String("Each round adds XP and points in co-op"), True, 0) == True;
	}

	actions
	{
		Event Player.xp += 30;
		disabled If(Number Of Players(Team 1) > 2);
		Event Player.points += 500;
	}
}

rule("517 set xp to hero")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(D.Va));
			Event Player.currentheroxp = 0;
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			Event Player.currentheroxp = 1;
		Else If(Hero Of(Event Player) == Hero(Junker Queen));
			Event Player.currentheroxp = 2;
		Else If(Hero Of(Event Player) == Hero(Ana));
			Event Player.currentheroxp = 3;
		Else If(Hero Of(Event Player) == Hero(Orisa));
			Event Player.currentheroxp = 4;
		Else If(Hero Of(Event Player) == Hero(Ramattra));
			Event Player.currentheroxp = 5;
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			Event Player.currentheroxp = 6;
		Else If(Hero Of(Event Player) == Hero(Roadhog));
			Event Player.currentheroxp = 7;
		Else If(Hero Of(Event Player) == Hero(Sigma));
			Event Player.currentheroxp = 8;
		Else If(Hero Of(Event Player) == Hero(Winston));
			Event Player.currentheroxp = 9;
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			Event Player.currentheroxp = 10;
		Else If(Hero Of(Event Player) == Hero(Zarya));
			Event Player.currentheroxp = 11;
		Else If(Hero Of(Event Player) == Hero(Ashe));
			Event Player.currentheroxp = 12;
		Else If(Hero Of(Event Player) == Hero(Bastion));
			Event Player.currentheroxp = 13;
		Else If(Hero Of(Event Player) == Hero(Cassidy));
			Event Player.currentheroxp = 14;
		Else If(Hero Of(Event Player) == Hero(Echo));
			Event Player.currentheroxp = 15;
		Else If(Hero Of(Event Player) == Hero(Genji));
			Event Player.currentheroxp = 16;
		Else If(Hero Of(Event Player) == Hero(Hanzo));
			Event Player.currentheroxp = 17;
		Else If(Hero Of(Event Player) == Hero(Junkrat));
			Event Player.currentheroxp = 18;
		Else If(Hero Of(Event Player) == Hero(Mei));
			Event Player.currentheroxp = 19;
		Else If(Hero Of(Event Player) == Hero(Pharah));
			Event Player.currentheroxp = 20;
		Else If(Hero Of(Event Player) == Hero(Reaper));
			Event Player.currentheroxp = 21;
		Else If(Hero Of(Event Player) == Hero(Sojourn));
			Event Player.currentheroxp = 22;
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			Event Player.currentheroxp = 23;
		Else If(Hero Of(Event Player) == Hero(Sombra));
			Event Player.currentheroxp = 24;
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			Event Player.currentheroxp = 25;
		Else If(Hero Of(Event Player) == Hero(Torbjörn));
			Event Player.currentheroxp = 26;
		Else If(Hero Of(Event Player) == Hero(Widowmaker));
			Event Player.currentheroxp = 27;
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			Event Player.currentheroxp = 28;
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			Event Player.currentheroxp = 29;
		Else If(Hero Of(Event Player) == Hero(Kiriko));
			Event Player.currentheroxp = 30;
		Else If(Hero Of(Event Player) == Hero(Lúcio));
			Event Player.currentheroxp = 31;
		Else If(Hero Of(Event Player) == Hero(Mercy));
			Event Player.currentheroxp = 32;
		Else If(Hero Of(Event Player) == Hero(Moira));
			Event Player.currentheroxp = 33;
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			Event Player.currentheroxp = 34;
	}
}

rule("518 spawn bots subroutine")
{
	event
	{
		Subroutine;
		wavespawn;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(Random Real(3, 4), Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bossSpawn, Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[0] = Slot Of(Players In Slot(0, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[1] = Slot Of(Players In Slot(1, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[2] = Slot Of(Players In Slot(2, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[3] = Slot Of(Players In Slot(3, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[4] = Slot Of(Players In Slot(4, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[5] = Slot Of(Players In Slot(5, Team 2));
		Skip If(Global.roundnumber < 5, 99);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[6] = Slot Of(Players In Slot(6, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[7] = Slot Of(Players In Slot(7, Team 2));
		disabled Skip If(Number Of Players(Team 1) > 3, 30);
		Skip If(Global.lesszomb == True, 99);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 8, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[8] = Slot Of(Players In Slot(8, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 9, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[9] = Slot Of(Players In Slot(9, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 10, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[10] = Slot Of(Players In Slot(10, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 11, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[11] = Slot Of(Players In Slot(11, Team 2));
		disabled Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 12, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[12] = Slot Of(Players In Slot(12, Team 2));
		Skip If(Global.roundnumber < 10, 99);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 13, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[13] = Slot Of(Players In Slot(13, Team 2));
		disabled Skip If(Number Of Players(Team 1) > 1, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 14, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[14] = Slot Of(Players In Slot(14, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 15, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[15] = Slot Of(Players In Slot(15, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot1spawn, Team 2, 16, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[16] = Slot Of(Players In Slot(16, Team 2));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Global.bot2spawn, Team 2, 17, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Global.omnicspawn[17] = Slot Of(Players In Slot(17, Team 2));
	}
}

rule("519 Spawn wave director")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(1);
		Global.numberofzombies >= 4;
		Is Game In Progress == True;
	}

	actions
	{
		"needs a 3, for directors cut version, where each hero is on for 5 rounds then changes using a loop"
		If(Global.spawntype == 0);
			Global.bossSpawn = Global.hero[4];
			Global.bot1spawn = Global.hero[4];
			Global.bot2spawn = Global.hero[4];
			Wait(0.250, Ignore Condition);
			Call Subroutine(wavespawn);
		Else If(Global.spawntype == 1);
			Wait(0.250, Ignore Condition);
			Global.bossSpawn = Global.hero[32];
			Global.bot1spawn = Global.hero[32];
			Global.bot2spawn = Global.hero[32];
			Wait(0.250, Ignore Condition);
			Call Subroutine(wavespawn);
		Else If(Global.spawntype == 2);
			Wait(0.250, Ignore Condition);
			If(Global.roundnumber < 5);
				Global.bossSpawn = Global.hero[Random Integer(4, 4)];
				Global.bot1spawn = Global.hero[Random Integer(0, 38)];
				Global.bot2spawn = Global.hero[Random Integer(0, 38)];
				Wait(0.250, Ignore Condition);
				Call Subroutine(wavespawn);
			Else If(Global.roundnumber >= 5);
				Global.bossSpawn = Global.hero[Random Integer(0, 38)];
				Global.bot1spawn = Global.hero[Random Integer(0, 38)];
				Global.bot2spawn = Global.hero[Random Integer(0, 38)];
				Wait(0.250, Ignore Condition);
				Call Subroutine(wavespawn);
	}
}

rule("520 OMNIC hero array list")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.hero[0] = Hero(Ana);
		Global.hero[1] = Hero(Ashe);
		Global.hero[2] = Hero(Baptiste);
		Global.hero[3] = Hero(Bastion);
		Global.hero[4] = Hero(Brigitte);
		Global.hero[5] = Hero(Cassidy);
		Global.hero[6] = Hero(D.Va);
		Global.hero[7] = Hero(Doomfist);
		Global.hero[8] = Hero(Echo);
		Global.hero[9] = Hero(Genji);
		Global.hero[10] = Hero(Hanzo);
		Global.hero[11] = Hero(Illari);
		Global.hero[12] = Hero(Junker Queen);
		Global.hero[13] = Hero(Junkrat);
		Global.hero[14] = Hero(Kiriko);
		Global.hero[15] = Hero(Lifeweaver);
		Global.hero[16] = Hero(Lúcio);
		Global.hero[17] = Hero(Mauga);
		Global.hero[18] = Hero(Mei);
		Global.hero[19] = Hero(Mercy);
		Global.hero[20] = Hero(Moira);
		Global.hero[21] = Hero(Orisa);
		Global.hero[22] = Hero(Pharah);
		Global.hero[23] = Hero(Ramattra);
		Global.hero[24] = Hero(Reaper);
		Global.hero[25] = Hero(Reinhardt);
		Global.hero[26] = Hero(Roadhog);
		Global.hero[27] = Hero(Sigma);
		Global.hero[28] = Hero(Sojourn);
		Global.hero[29] = Hero(Soldier: 76);
		Global.hero[30] = Hero(Sombra);
		Global.hero[31] = Hero(Symmetra);
		Global.hero[32] = Hero(Torbjörn);
		Global.hero[33] = Hero(Tracer);
		Global.hero[34] = Hero(Widowmaker);
		Global.hero[35] = Hero(Winston);
		Global.hero[36] = Hero(Wrecking Ball);
		Global.hero[37] = Hero(Zarya);
		Global.hero[38] = Hero(Zenyatta);
	}
}

rule("521 start screen message")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.start == 0;
	}

	actions
	{
		Small Message(Event Player, Custom String("  Press melee for settings"));
		Small Message(Event Player, Custom String("  Press jump to start"));
		Wait(8, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("299 out of bounce boundry")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(196.085, -7.577, -239.357), 2.500, Team 1, Off) == True;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(202.240, -7.533, -244.729));
	}
}

rule("299 out of bounce boundry")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(202.856, -7.605, -227.935), 2.500, Team 1, Off) == True;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(208.001, -8.354, -232.409));
	}
}

rule("299 out of bounce boundry")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(204.956, -7.585, -218.951), 2.500, Team 1, Off) == True;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(208.268, -8.333, -222.771));
	}
}

disabled rule("559 stop throttle omnics")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 1.750;
	}

	actions
	{
		Stop Forcing Throttle(Event Player);
	}
}

rule("out of bounce boundry 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(-109.785, -151.582, 129.010), 2.500, Team 1, Off) == True;
		Global.start == 1;
	}

	actions
	{
		Teleport(Event Player, Vector(-108.361, -151.555, 133.284));
	}
}

rule("info UI cancel")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start > 0;
	}

	actions
	{
		Skip If(Count Of(Event Player.InfoUI) == 0, 6);
		Destroy HUD Text(Event Player.InfoUI[Count Of(Event Player.InfoUI) - 1]);
		Modify Player Variable(Event Player, InfoUI, Remove From Array By Index, Count Of(Event Player.InfoUI) - 1);
		Wait(0, Ignore Condition);
		Loop If(Count Of(Event Player.InfoUI) != 0);
		Event Player.InfoCooldown = Total Time Elapsed + 5;
		disabled Event Player.UI = 0;
		Abort;
	}
}

rule("Info UI")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.start == 0;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Null, Null, Custom String("."), Left, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		disabled Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("Hold spacebar for perk info, and use crouch to switch heros."), Left, 15,
			Color(White), Color(White), Color(Green), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("You will only get your ultimate once per wave, use it wisely!"), Null, Left, 15,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("You can find the latest version on Workshop.codes made by dropthatbeat"), Null,
			Left, 102, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("Zombies collection:workshop.codes/c/bvziup"), Null, Left, 101, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} Workshop Information:", Icon String(Heart)), Left, 100, Color(White),
			Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("You have limited ammo, Reloading throws away your old magazine"), Null, Left,
			33, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("shooting the same zombie in coop gives bonus points"), Null, Left, 32, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("Score in the bottom right. prices displayed in game. press interact to buy"),
			Null, Left, 31, Color(White), Color(White), Color(Green), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0}How points work:", Icon String(Diamond)), Left, 30, Color(White),
			Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("Connecting the power allows you to buy perks and pack a punch."), Null, Left,
			22, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			"When you connect the power make sure no zombies are around as they will ultimate"), Null, Left, 21, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0}Connect the power", Icon String(Bolt)), Left, 20, Color(White), Color(
			White), Color(Yellow), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			" in the map there is a mystery box, several perks, if you die you lose them, excluding Pack a punch"), Null, Left, 13, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			"Try to progress and survive by switching heros, starting heros do less damage, instead melee for bonus damage!"), Null, Left,
			12, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("most waves are normal zombies, but randomly picked waves will have challenges"),
			Null, Left, 11, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} How This mode works:", Icon String(Checkmark)), Left, 10, Color(
			White), Color(White), Color(Yellow), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("In solo play, you get 3 lives, however in coop you can revive each other"),
			Null, Left, 14, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		disabled Create HUD Text(Event Player, Null, Null, Custom String("."), Left, 2, Color(White), Color(White), Color(Orange),
			Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Custom String(
			"                                                    |   Start the mode to hide the instructions   |"), Null, Left, 900, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Event Player.InfoCooldown = Total Time Elapsed + 0.160;
		Event Player.HideHints = True;
		Event Player.UI = 1;
	}
}

rule("565 door message")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.doormessage == 1;
	}

	actions
	{
		Wait(5, Ignore Condition);
		Event Player.doormessage = 0;
	}
}

rule("38 Pickup vaporized")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[3]) <= 1.500;
		All Players(Team 1).G[3] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[4] = Vector(500, 25, 500);
		All Players(Team 1).G[3] = True;
		All Players(Team 1).S[3] = 1;
		Big Message(All Players(All Teams), Custom String("Vaporized"));
		Kill(All Living Players(Team 2), First Of(All Living Players(Team 1)));
		Wait(3, Ignore Condition);
		All Players(Team 1).G[3] = False;
		All Players(Team 1).S[3] = 0;
	}
}

rule("39 Pickup max ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[5]) <= 1.500;
		All Players(Team 1).G[5] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[5] = Vector(500, 25, 500);
		All Players(Team 1).G[5] = True;
		All Players(Team 1).S[5] = 1;
		All Living Players(Team 1).magazines += 10;
		Big Message(All Players(All Teams), Custom String("Max ammo!"));
		Wait(3, Ignore Condition);
		All Players(Team 1).G[5] = False;
		All Players(Team 1).S[5] = 0;
	}
}

rule("all the effects (each player) (and huds)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start == 1;
	}

	actions
	{
		disabled If(Global.experiencesystem == 1);
		disabled Create Progress Bar HUD Text(Event Player, Event Player.xp[Event Player.currentheroxp], Custom String("current level {0}",
			Event Player.XPlevel[Event Player.currentheroxp]), Top, 0, Color(Green), Color(Blue), Values, Default Visibility);
		Global.Died[0] = Vector(500, 0, 500);
		Global.Died[1] = Vector(500, 0, 500);
		Global.Died[2] = Vector(500, 0, 500);
		Global.Died[3] = Vector(500, 0, 500);
		Wait(5, Ignore Condition);
		Abort If Condition Is False;
		Create HUD Text(Event Player, Null, Null, Custom String("lives used: {0}", Event Player.singlelives), Right, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Null, Right, 1, Null, Color(Green),
			Null, Visible To, Visible Never);
		Create HUD Text(Event Player, Null, Custom String(" \n\n"), Null, Right, 6, Null, Color(Green), Null, Visible To, Visible Never);
		Create HUD Text(Event Player, Null, Null, Custom String("Magazines {0}", Event Player.currentmagazines), Right, 7, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Null, Custom String("{0} : {1} : {2}", Hero Icon String(Hero Of(Players In Slot(0,
			Team 1))), Players In Slot(0, Team 1), Players In Slot(0, Team 1).points), Right, 5, Color(White), Color(White), Color(Red),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Null, Custom String("{0} : {1} : {2}", Hero Icon String(Hero Of(Players In Slot(1,
			Team 1))), Players In Slot(1, Team 1), Players In Slot(1, Team 1).points), Right, 5, Color(White), Color(White), Color(Blue),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Null, Custom String("{0} : {1} : {2}", Hero Icon String(Hero Of(Players In Slot(2,
			Team 1))), Players In Slot(2, Team 1), Players In Slot(2, Team 1).points), Right, 5, Color(White), Color(White), Color(Green),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Custom String(""), Null, Custom String("{0} : {1} : {2}", Hero Icon String(Hero Of(Players In Slot(3,
			Team 1))), Players In Slot(3, Team 1), Players In Slot(3, Team 1).points), Right, 5, Color(White), Color(White), Color(Orange),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(" \n\n"), Null, Right, 8, Null, Color(Green), Null, Visible To, Visible Never);
		Create HUD Text(Event Player, Null, Null, Custom String("Heroes {0} {1}  {2}", Event Player.heroiconswap[0],
			Event Player.heroiconswap[1], Input Binding String(Button(Crouch))), Right, 9, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Follower: {0}", Hero Icon String(Hero Of(Players In Slot(Slot Of(
			Event Player) + 4, Team 1)))), Left, 5, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(" \n\n"), Null, Left, 4, Null, Color(Green), Null, Visible To, Visible Never);
		Create HUD Text(Event Player, Null, Null, Custom String(
			"                                                                             {0}", Global.romanN[Global.romanNcounter]), Left,
			7, Color(White), Color(White), Color(Orange), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(" \n\n"), Null, Left, 6, Null, Color(Green), Null, Visible To, Visible Never);
		Create HUD Text(Event Player, Null, Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Null, Left, 1, Null, Color(Green),
			Null, Visible To, Visible Never);
		Create HUD Text(Event Player, Null, Custom String("workshop.codes/ap-zombies \n Code:T5M30"), Null, Left, -1, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String(" \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"), Null, Top, 1, Null, Color(Green), Null,
			Visible To, Visible Never);
	}
}

rule("Bot effect (each player team 2)")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Effect, Color(White), Event Player, 5);
		Play Effect(All Players(All Teams), Wrecking Ball Minefield Explosion Sound, Color(White), Event Player, 100);
	}
}

disabled rule("set allowed heros (wip)")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	actions
	{
		Set Player Allowed Heroes(Event Player, Array Slice(Global.hero, 0, 0));
	}
}

rule("146 Rule 280 create ending wave 30 effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 30;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(-101.303, -150.360, -17.831), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("The end : 50,000 points"), Vector(-101.303, -150.360, -17.831), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
	}
}

disabled rule("350 hanzo ammo cancel (wip)")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Primary Fire)) && Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		If(Event Player.doublemag == 0);
			Event Player.magazines += 0.250;
		Else If(Event Player.doublemag == 1);
			Event Player.magazines += 0.125;
	}
}

rule("all the door effects loop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.dooreffectsequencer < 436;
	}

	actions
	{
		"needs to have 3 zones with the map."
		If(Global.impulseDoorArray[Global.appenddoorsequencer] == 0);
			"create effect starting at 0 - 1"
			Create Beam Effect(All Players(Team 1), Junkrat Trap Chain Beam, Global.Beameffectdoors[Evaluate Once(Global.dooreffectsequencer)],
				Global.Beameffectdoors[Evaluate Once(1 + Global.dooreffectsequencer)], Color(Red), Visible To Position and Radius);
			Wait(0.016, Ignore Condition);
			"append to allow the game to delete for later"
			Modify Global Variable At Index(doors, Global.appenddoorsequencer, Append To Array, Last Created Entity);
			Wait(0.016, Ignore Condition);
			"the index to create the door at"
			Global.dooreffectsequencer += 2;
			"the doors index itself, counted by 1 whole, while the door contains 2 effects. need to optimize so door is compatible with 1 and 2 effects with a toggle."
			Global.appenddoorsequencer += 1;
			Loop If Condition Is True;
		Else If(Global.impulseDoorArray[Global.appenddoorsequencer] == 1);
			Wait(0.016, Ignore Condition);
			Global.dooreffectsequencer += 2;
			Global.appenddoorsequencer += 1;
			Loop If Condition Is True;
	}
}

disabled rule("DOOR beam effect vectors")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"add 1 to the number (accidently started at 1)"
		Global.Beameffectdoors[0] = Vector(-73.088, -150.853, -6.025);
		Global.Beameffectdoors[1] = Vector(-63.827, -148.143, -4.766);
		Global.Beameffectdoors[2] = Vector(-63.827, -151.295, -4.766);
		Global.Beameffectdoors[3] = Vector(-72.485, -148.022, -3.371);
		"effect2"
		Global.Beameffectdoors[4] = Vector(-79.498, -154.237, -6.587);
		Global.Beameffectdoors[5] = Vector(-88.809, -151.120, -7.165);
		Global.Beameffectdoors[6] = Vector(-88.809, -154.703, -7.165);
		Global.Beameffectdoors[7] = Vector(-79.501, -151.158, -7.338);
		"effect3"
		Global.Beameffectdoors[8] = Vector(-95.811, -154.621, -6.493);
		Global.Beameffectdoors[9] = Vector(-105.837, -148.696, -6.963);
		Global.Beameffectdoors[10] = Vector(-105.265, -153.624, -7.482);
		Global.Beameffectdoors[11] = Vector(-95.589, -148.426, -6.795);
		"effect 4"
		Global.Beameffectdoors[12] = Vector(-57.245, -150.492, 33.947);
		Global.Beameffectdoors[13] = Vector(-60.593, -147.465, 33.883);
		Global.Beameffectdoors[14] = Vector(-60.704, -150.305, 33.938);
		Global.Beameffectdoors[15] = Vector(-57.496, -147.369, 34.038);
		"effect5"
		Global.Beameffectdoors[16] = Vector(-62.976, -150.410, 43.319);
		Global.Beameffectdoors[17] = Vector(-65.395, -147.186, 40.737);
		Global.Beameffectdoors[18] = Vector(-65.365, -150.364, 40.845);
		Global.Beameffectdoors[19] = Vector(-62.896, -147.234, 43.096);
		"door6"
		Global.Beameffectdoors[20] = Vector(-69.985, -154.376, 29.778);
		Global.Beameffectdoors[21] = Vector(-65.869, -150.714, 29.538);
		Global.Beameffectdoors[22] = Vector(-65.869, -154.440, 29.538);
		Global.Beameffectdoors[23] = Vector(-70.279, -150.518, 29.681);
		"door7"
		Global.Beameffectdoors[24] = Vector(-56.663, -154.371, 43.867);
		Global.Beameffectdoors[25] = Vector(-60.647, -151.191, 43.972);
		Global.Beameffectdoors[26] = Vector(-60.647, -154.650, 43.972);
		Global.Beameffectdoors[27] = Vector(-56.793, -151.493, 43.503);
		"door8"
		Global.Beameffectdoors[28] = Vector(-52.379, -154.530, 57.994);
		Global.Beameffectdoors[29] = Vector(-52.564, -150.607, 62.277);
		Global.Beameffectdoors[30] = Vector(-52.564, -154.501, 62.277);
		Global.Beameffectdoors[31] = Vector(-52.382, -150.417, 57.939);
		"door9"
		Global.Beameffectdoors[32] = Vector(-57.325, -154.328, 76.487);
		Global.Beameffectdoors[33] = Vector(-60.587, -151.134, 76.318);
		Global.Beameffectdoors[34] = Vector(-60.587, -154.286, 76.318);
		Global.Beameffectdoors[35] = Vector(-57.364, -151.254, 76.264);
		"door10"
		Global.Beameffectdoors[36] = Vector(-49.181, -160.778, 56.615);
		Global.Beameffectdoors[37] = Vector(-49.230, -156.135, 62.891);
		Global.Beameffectdoors[38] = Vector(-49.230, -161.139, 62.891);
		Global.Beameffectdoors[39] = Vector(-49.190, -155.973, 57.652);
		"door11"
		Global.Beameffectdoors[40] = Vector(-56.462, -160.651, 70.045);
		Global.Beameffectdoors[41] = Vector(-59.154, -157.047, 70.198);
		Global.Beameffectdoors[42] = Vector(-59.516, -160.535, 70.103);
		Global.Beameffectdoors[43] = Vector(-56.314, -157.444, 69.898);
		"door12"
		Global.Beameffectdoors[44] = Vector(-59.692, -160.349, 50.073);
		Global.Beameffectdoors[45] = Vector(-56.384, -157.105, 50.055);
		Global.Beameffectdoors[46] = Vector(-56.384, -160.363, 50.055);
		Global.Beameffectdoors[47] = Vector(-59.728, -157.558, 50.054);
		"door13"
		Global.Beameffectdoors[48] = Vector(-89.271, -160.303, 64.397);
		Global.Beameffectdoors[49] = Vector(-87.625, -155.285, 56.467);
		Global.Beameffectdoors[50] = Vector(-87.625, -160.140, 56.467);
		Global.Beameffectdoors[51] = Vector(-88.272, -154.825, 63.668);
		"door14"
		Global.Beameffectdoors[52] = Vector(-118.394, -152.220, 76.038);
		Global.Beameffectdoors[53] = Vector(-119.649, -149.413, 80.533);
		Global.Beameffectdoors[54] = Vector(-119.649, -152.396, 80.533);
		Global.Beameffectdoors[55] = Vector(-118.443, -149.767, 75.004);
		"door15"
		Global.Beameffectdoors[56] = Vector(-119.240, -151.983, 39.219);
		Global.Beameffectdoors[57] = Vector(-118.120, -149.475, 44.350);
		Global.Beameffectdoors[58] = Vector(-118.266, -152.218, 44.339);
		Global.Beameffectdoors[59] = Vector(-119.168, -149.468, 39.418);
		"door16"
		Global.Beameffectdoors[60] = Vector(-65.799, -154.211, 35.069);
		Global.Beameffectdoors[61] = Vector(-66.094, -151.322, 38.780);
		Global.Beameffectdoors[62] = Vector(-66.094, -154.425, 38.780);
		Global.Beameffectdoors[63] = Vector(-66.018, -151.312, 35.273);
		"door17"
		Global.Beameffectdoors[64] = Vector(-65.727, -154.378, 85.048);
		Global.Beameffectdoors[65] = Vector(-65.484, -151.316, 81.068);
		Global.Beameffectdoors[66] = Vector(-65.484, -154.349, 81.068);
		Global.Beameffectdoors[67] = Vector(-65.955, -151.335, 84.901);
		"door18"
		Global.Beameffectdoors[68] = Vector(-112.648, -152.165, 49.815);
		Global.Beameffectdoors[69] = Vector(-106.727, -148.521, 49.921);
		Global.Beameffectdoors[70] = Vector(-106.727, -152.443, 49.921);
		Global.Beameffectdoors[71] = Vector(-113.218, -148.271, 49.977);
		"door 19"
		Global.Beameffectdoors[72] = Vector(-106.052, -152.479, 70.394);
		Global.Beameffectdoors[73] = Vector(-112.862, -147.447, 70.126);
		Global.Beameffectdoors[74] = Vector(-112.862, -152.323, 70.126);
		Global.Beameffectdoors[75] = Vector(-106.302, -148.711, 69.963);
		"door 20"
		Global.Beameffectdoors[76] = Vector(-65.853, -154.266, 90.272);
		Global.Beameffectdoors[77] = Vector(-70.300, -150.578, 90.314);
		Global.Beameffectdoors[78] = Vector(-70.300, -154.309, 90.314);
		Global.Beameffectdoors[79] = Vector(-65.533, -151.004, 90.226);
		"door 21"
		Global.Beameffectdoors[80] = Vector(-60.798, -150.419, 85.997);
		Global.Beameffectdoors[81] = Vector(-57.351, -147.411, 86.261);
		Global.Beameffectdoors[82] = Vector(-57.351, -150.323, 86.261);
		Global.Beameffectdoors[83] = Vector(-60.809, -147.431, 86.179);
		"door 22"
		Global.Beameffectdoors[84] = Vector(-102.776, -157.242, 71.573);
		Global.Beameffectdoors[85] = Vector(-99.272, -154.391, 71.657);
		Global.Beameffectdoors[86] = Vector(-99.272, -157.587, 71.657);
		Global.Beameffectdoors[87] = Vector(-102.565, -154.236, 71.398);
		"door 23"
		Global.Beameffectdoors[88] = Vector(-103.044, -157.406, 48.424);
		Global.Beameffectdoors[89] = Vector(-99.291, -154.163, 48.459);
		Global.Beameffectdoors[90] = Vector(-99.291, -157.747, 48.459);
		Global.Beameffectdoors[91] = Vector(-103.164, -154.270, 48.768);
		"door 24"
		Global.Beameffectdoors[92] = Vector(-62.965, -150.387, 76.638);
		Global.Beameffectdoors[93] = Vector(-65.577, -147.174, 79.253);
		Global.Beameffectdoors[94] = Vector(-65.577, -150.588, 79.253);
		Global.Beameffectdoors[95] = Vector(-62.812, -147.364, 76.674);
		"door 25 49-50"
		Global.Beameffectdoors[96] = Vector(318.770, 44.089, 155.449);
		Global.Beameffectdoors[97] = Vector(319.970, 47.182, 152.436);
		Global.Beameffectdoors[98] = Vector(319.970, 44.087, 152.436);
		Global.Beameffectdoors[99] = Vector(318.696, 47.594, 155.546);
		"door 26"
		Global.Beameffectdoors[100] = Vector(303.941, 42.660, 145.797);
		Global.Beameffectdoors[101] = Vector(305.354, 45.080, 142.346);
		Global.Beameffectdoors[102] = Vector(305.354, 42.185, 142.346);
		Global.Beameffectdoors[103] = Vector(304.011, 44.997, 145.619);
		"door 27"
		Global.Beameffectdoors[104] = Vector(283.482, 41.037, 145.008);
		Global.Beameffectdoors[105] = Vector(279.709, 43.808, 145.068);
		Global.Beameffectdoors[106] = Vector(279.709, 40.624, 145.068);
		Global.Beameffectdoors[107] = Vector(283.408, 43.893, 145.077);
		"door 28"
		Global.Beameffectdoors[108] = Vector(256.811, 40.981, 145.144);
		Global.Beameffectdoors[109] = Vector(260.091, 44.005, 145.202);
		Global.Beameffectdoors[110] = Vector(260.091, 40.973, 145.202);
		Global.Beameffectdoors[111] = Vector(256.577, 43.834, 145.071);
		"door 29"
		Global.Beameffectdoors[112] = Vector(236.149, 42.238, 146.019);
		Global.Beameffectdoors[113] = Vector(234.710, 45.183, 142.324);
		Global.Beameffectdoors[114] = Vector(234.710, 41.986, 142.324);
		Global.Beameffectdoors[115] = Vector(236.097, 45.320, 145.469);
		"door 30"
		Global.Beameffectdoors[116] = Vector(221.366, 44.346, 155.733);
		Global.Beameffectdoors[117] = Vector(219.972, 47.237, 152.535);
		Global.Beameffectdoors[118] = Vector(219.972, 44.446, 152.535);
		Global.Beameffectdoors[119] = Vector(221.285, 47.375, 155.356);
		"door 31"
		Global.Beameffectdoors[120] = Vector(310.490, 45.933, 174.655);
		Global.Beameffectdoors[121] = Vector(311.944, 48.667, 171.504);
		Global.Beameffectdoors[122] = Vector(311.944, 45.479, 171.504);
		Global.Beameffectdoors[123] = Vector(310.515, 48.776, 174.734);
		"door32 63 64"
		Global.Beameffectdoors[124] = Vector(302.853, 46.271, 159.993);
		Global.Beameffectdoors[125] = Vector(306.380, 48.898, 160.793);
		Global.Beameffectdoors[126] = Vector(306.380, 45.746, 160.793);
		Global.Beameffectdoors[127] = Vector(303.173, 48.884, 159.571);
		"door 33"
		Global.Beameffectdoors[128] = Vector(308.914, 44.874, 188.856);
		Global.Beameffectdoors[129] = Vector(309.170, 47.619, 185.423);
		Global.Beameffectdoors[130] = Vector(309.170, 44.833, 185.423);
		Global.Beameffectdoors[131] = Vector(309.068, 47.926, 188.962);
		"door34"
		Global.Beameffectdoors[132] = Vector(300.766, 44.839, 193.844);
		Global.Beameffectdoors[133] = Vector(301.092, 47.986, 190.175);
		Global.Beameffectdoors[134] = Vector(301.035, 44.871, 190.271);
		Global.Beameffectdoors[135] = Vector(300.985, 47.740, 193.530);
		"door35"
		Global.Beameffectdoors[136] = Vector(239.198, 44.712, 193.624);
		Global.Beameffectdoors[137] = Vector(239.049, 47.704, 189.822);
		Global.Beameffectdoors[138] = Vector(238.982, 44.781, 190.182);
		Global.Beameffectdoors[139] = Vector(239.078, 47.865, 193.742);
		"door36"
		Global.Beameffectdoors[140] = Vector(230.918, 45.002, 188.596);
		Global.Beameffectdoors[141] = Vector(231.237, 47.641, 185.148);
		Global.Beameffectdoors[142] = Vector(231.237, 44.795, 185.148);
		Global.Beameffectdoors[143] = Vector(230.927, 47.671, 188.585);
		"door37"
		Global.Beameffectdoors[144] = Vector(228.082, 46.052, 171.638);
		Global.Beameffectdoors[145] = Vector(229.257, 48.970, 174.763);
		Global.Beameffectdoors[146] = Vector(229.257, 45.796, 174.763);
		Global.Beameffectdoors[147] = Vector(227.983, 49.021, 171.455);
		"door38"
		Global.Beameffectdoors[148] = Vector(233.743, 45.832, 160.699);
		Global.Beameffectdoors[149] = Vector(236.942, 48.656, 159.476);
		Global.Beameffectdoors[150] = Vector(236.942, 45.614, 159.476);
		Global.Beameffectdoors[151] = Vector(233.785, 48.718, 160.653);
		"door39"
		Global.Beameffectdoors[152] = Vector(305.219, 40.076, 177.537);
		Global.Beameffectdoors[153] = Vector(304.537, 43.452, 186.384);
		Global.Beameffectdoors[154] = Vector(304.537, 40.060, 186.384);
		Global.Beameffectdoors[155] = Vector(303.639, 43.452, 176.536);
		"door40"
		Global.Beameffectdoors[156] = Vector(312.119, 45.898, 154.129);
		Global.Beameffectdoors[157] = Vector(307.908, 49.513, 161.629);
		Global.Beameffectdoors[158] = Vector(307.993, 46.143, 161.383);
		Global.Beameffectdoors[159] = Vector(312.013, 49.101, 154.117);
		"door41"
		Global.Beameffectdoors[160] = Vector(235.878, 39.463, 185.919);
		Global.Beameffectdoors[161] = Vector(236.146, 43.260, 177.266);
		Global.Beameffectdoors[162] = Vector(236.146, 39.485, 177.266);
		Global.Beameffectdoors[163] = Vector(235.865, 43.005, 186.078);
		"door42"
		Global.Beameffectdoors[164] = Vector(232.202, 45.793, 161.824);
		Global.Beameffectdoors[165] = Vector(229.461, 50.064, 154.250);
		Global.Beameffectdoors[166] = Vector(229.461, 45.734, 154.250);
		Global.Beameffectdoors[167] = Vector(232.726, 50.126, 161.283);
		"door43"
		Global.Beameffectdoors[168] = Vector(-78.521, -153.794, 23.488);
		Global.Beameffectdoors[169] = Vector(-81.686, -150.482, 13.910);
		Global.Beameffectdoors[170] = Vector(-81.686, -154.207, 13.910);
		Global.Beameffectdoors[171] = Vector(-78.249, -149.718, 23.458);
		"door 44"
		Global.Beameffectdoors[172] = Vector(-106.770, -154.207, 26.605);
		Global.Beameffectdoors[173] = Vector(-106.893, -150.110, 16.618);
		Global.Beameffectdoors[174] = Vector(-106.893, -155.042, 16.618);
		Global.Beameffectdoors[175] = Vector(-107.362, -149.084, 27.599);
		"door 45"
		Global.Beameffectdoors[176] = Vector(-105.105, -154.701, 27.482);
		Global.Beameffectdoors[177] = Vector(-91.225, -150.445, 26.462);
		Global.Beameffectdoors[178] = Vector(-91.653, -154.843, 27.153);
		Global.Beameffectdoors[179] = Vector(-104.595, -150.216, 28.230);
		"door 46"
		Global.Beameffectdoors[180] = Vector(-83.534, -154.137, 25.964);
		Global.Beameffectdoors[181] = Vector(-89.670, -149.752, 26.437);
		Global.Beameffectdoors[182] = Vector(-89.670, -154.346, 26.437);
		Global.Beameffectdoors[183] = Vector(-83.929, -150.464, 26.279);
		"door 47"
		Global.Beameffectdoors[184] = Vector(-88.479, -154.336, 41.935);
		Global.Beameffectdoors[185] = Vector(-89.783, -159.085, 49.471);
		Global.Beameffectdoors[186] = Vector(-88.944, -153.861, 48.999);
		Global.Beameffectdoors[187] = Vector(-88.231, -159.339, 42.651);
		"door 48"
		Global.Beameffectdoors[188] = Vector(-82.109, -154.171, 39.502);
		Global.Beameffectdoors[189] = Vector(-81.734, -151.259, 33.798);
		Global.Beameffectdoors[190] = Vector(-81.734, -154.341, 33.798);
		Global.Beameffectdoors[191] = Vector(-81.842, -151.353, 39.489);
		"door 49"
		Global.Beameffectdoors[192] = Vector(-55.458, -153.370, 11.170);
		Global.Beameffectdoors[193] = Vector(-62.439, -150.548, 10.779);
		Global.Beameffectdoors[194] = Vector(-62.439, -153.410, 10.779);
		Global.Beameffectdoors[195] = Vector(-55.515, -150.347, 11.229);
		"door 50"
		Global.Beameffectdoors[196] = Vector(-88.833, -155.365, 4.708);
		Global.Beameffectdoors[197] = Vector(-90.233, -151.730, -2.408);
		Global.Beameffectdoors[198] = Vector(-90.233, -155.321, -2.408);
		Global.Beameffectdoors[199] = Vector(-89.578, -151.196, 3.979);
		"door 51"
		Global.Beameffectdoors[200] = Vector(-111.066, -152.115, 32.607);
		Global.Beameffectdoors[201] = Vector(-117.909, -149.143, 36.667);
		Global.Beameffectdoors[202] = Vector(-117.909, -152.415, 36.667);
		Global.Beameffectdoors[203] = Vector(-110.692, -147.302, 32.578);
		"door 52"
		Global.Beameffectdoors[204] = Vector(297.820, 45.041, 170.156);
		Global.Beameffectdoors[205] = Vector(288.967, 44.784, 161.501);
		Global.Beameffectdoors[206] = Vector(298.181, 45.704, 170.811);
		Global.Beameffectdoors[207] = Vector(288.834, 45.034, 174.410);
		"door 28"
		Global.Beameffectdoors[208] = Vector(256.811, 40.981, 145.144);
		Global.Beameffectdoors[209] = Vector(260.091, 44.005, 145.202);
		Global.Beameffectdoors[210] = Vector(260.091, 40.973, 145.202);
		Global.Beameffectdoors[211] = Vector(256.577, 43.834, 145.071);
		"door 29"
		Global.Beameffectdoors[212] = Vector(236.149, 42.238, 146.019);
		Global.Beameffectdoors[213] = Vector(234.710, 45.183, 142.324);
		Global.Beameffectdoors[214] = Vector(234.710, 41.986, 142.324);
		Global.Beameffectdoors[215] = Vector(236.097, 45.320, 145.469);
		"door 30"
		Global.Beameffectdoors[216] = Vector(221.366, 44.346, 155.733);
		Global.Beameffectdoors[217] = Vector(219.972, 47.237, 152.535);
		Global.Beameffectdoors[218] = Vector(219.972, 44.446, 152.535);
		Global.Beameffectdoors[219] = Vector(221.285, 47.375, 155.356);
		"door 31"
		Global.Beameffectdoors[220] = Vector(310.490, 45.933, 174.655);
		Global.Beameffectdoors[221] = Vector(311.944, 48.667, 171.504);
		Global.Beameffectdoors[222] = Vector(311.944, 45.479, 171.504);
		Global.Beameffectdoors[223] = Vector(310.515, 48.776, 174.734);
		"door32 63 64"
		Global.Beameffectdoors[224] = Vector(302.853, 46.271, 159.993);
		Global.Beameffectdoors[225] = Vector(306.380, 48.898, 160.793);
		Global.Beameffectdoors[226] = Vector(306.380, 45.746, 160.793);
		Global.Beameffectdoors[227] = Vector(303.173, 48.884, 159.571);
		"door 33"
		Global.Beameffectdoors[228] = Vector(308.914, 44.874, 188.856);
		Global.Beameffectdoors[229] = Vector(309.170, 47.619, 185.423);
		Global.Beameffectdoors[230] = Vector(309.170, 44.833, 185.423);
		Global.Beameffectdoors[231] = Vector(309.068, 47.926, 188.962);
		"door34"
		Global.Beameffectdoors[232] = Vector(300.766, 44.839, 193.844);
		Global.Beameffectdoors[233] = Vector(301.092, 47.986, 190.175);
		Global.Beameffectdoors[234] = Vector(301.035, 44.871, 190.271);
		Global.Beameffectdoors[235] = Vector(300.985, 47.740, 193.530);
		"door35"
		Global.Beameffectdoors[236] = Vector(239.198, 44.712, 193.624);
		Global.Beameffectdoors[237] = Vector(239.049, 47.704, 189.822);
		Global.Beameffectdoors[238] = Vector(238.982, 44.781, 190.182);
		Global.Beameffectdoors[239] = Vector(239.078, 47.865, 193.742);
		"door36"
		Global.Beameffectdoors[240] = Vector(230.918, 45.002, 188.596);
		Global.Beameffectdoors[241] = Vector(231.237, 47.641, 185.148);
		Global.Beameffectdoors[242] = Vector(231.237, 44.795, 185.148);
		Global.Beameffectdoors[243] = Vector(230.927, 47.671, 188.585);
		"door37"
		Global.Beameffectdoors[244] = Vector(228.082, 46.052, 171.638);
		Global.Beameffectdoors[245] = Vector(229.257, 48.970, 174.763);
		Global.Beameffectdoors[246] = Vector(229.257, 45.796, 174.763);
		Global.Beameffectdoors[247] = Vector(227.983, 49.021, 171.455);
		"door38"
		Global.Beameffectdoors[248] = Vector(233.743, 45.832, 160.699);
		Global.Beameffectdoors[249] = Vector(236.942, 48.656, 159.476);
		Global.Beameffectdoors[250] = Vector(236.942, 45.614, 159.476);
		Global.Beameffectdoors[251] = Vector(233.785, 48.718, 160.653);
		"door39"
		Global.Beameffectdoors[252] = Vector(305.219, 40.076, 177.537);
		Global.Beameffectdoors[253] = Vector(304.537, 43.452, 186.384);
		Global.Beameffectdoors[254] = Vector(304.537, 40.060, 186.384);
		Global.Beameffectdoors[255] = Vector(303.639, 43.452, 176.536);
		"door40"
		Global.Beameffectdoors[256] = Vector(312.119, 45.898, 154.129);
		Global.Beameffectdoors[257] = Vector(307.908, 49.513, 161.629);
		Global.Beameffectdoors[258] = Vector(307.993, 46.143, 161.383);
		Global.Beameffectdoors[259] = Vector(312.013, 49.101, 154.117);
		"door41"
		Global.Beameffectdoors[260] = Vector(235.878, 39.463, 185.919);
		Global.Beameffectdoors[261] = Vector(236.146, 43.260, 177.266);
		Global.Beameffectdoors[262] = Vector(236.146, 39.485, 177.266);
		Global.Beameffectdoors[263] = Vector(235.865, 43.005, 186.078);
		"door42"
		Global.Beameffectdoors[264] = Vector(232.202, 45.793, 161.824);
		Global.Beameffectdoors[265] = Vector(229.461, 50.064, 154.250);
		Global.Beameffectdoors[266] = Vector(229.461, 45.734, 154.250);
		Global.Beameffectdoors[267] = Vector(232.726, 50.126, 161.283);
		"door43"
		Global.Beameffectdoors[268] = Vector(-78.521, -153.794, 23.488);
		Global.Beameffectdoors[269] = Vector(-81.686, -150.482, 13.910);
		Global.Beameffectdoors[270] = Vector(-81.686, -154.207, 13.910);
		Global.Beameffectdoors[271] = Vector(-78.249, -149.718, 23.458);
		"door 44"
		Global.Beameffectdoors[272] = Vector(-106.770, -154.207, 26.605);
		Global.Beameffectdoors[273] = Vector(-106.893, -150.110, 16.618);
		Global.Beameffectdoors[274] = Vector(-106.893, -155.042, 16.618);
		Global.Beameffectdoors[275] = Vector(-107.362, -149.084, 27.599);
		"door 45"
		Global.Beameffectdoors[276] = Vector(-105.105, -154.701, 27.482);
		Global.Beameffectdoors[277] = Vector(-91.225, -150.445, 26.462);
		Global.Beameffectdoors[278] = Vector(-91.653, -154.843, 27.153);
		Global.Beameffectdoors[279] = Vector(-104.595, -150.216, 28.230);
		"door 46"
		Global.Beameffectdoors[280] = Vector(-83.534, -154.137, 25.964);
		Global.Beameffectdoors[281] = Vector(-89.670, -149.752, 26.437);
		Global.Beameffectdoors[282] = Vector(-89.670, -154.346, 26.437);
		Global.Beameffectdoors[283] = Vector(-83.929, -150.464, 26.279);
		"door 47"
		Global.Beameffectdoors[284] = Vector(-88.479, -154.336, 41.935);
		Global.Beameffectdoors[285] = Vector(-89.783, -159.085, 49.471);
		Global.Beameffectdoors[286] = Vector(-88.944, -153.861, 48.999);
		Global.Beameffectdoors[287] = Vector(-88.231, -159.339, 42.651);
		"door 48"
		Global.Beameffectdoors[288] = Vector(-82.109, -154.171, 39.502);
		Global.Beameffectdoors[289] = Vector(-81.734, -151.259, 33.798);
		Global.Beameffectdoors[290] = Vector(-81.734, -154.341, 33.798);
		Global.Beameffectdoors[291] = Vector(-81.842, -151.353, 39.489);
		"door 49"
		Global.Beameffectdoors[292] = Vector(-55.458, -153.370, 11.170);
		Global.Beameffectdoors[293] = Vector(-62.439, -150.548, 10.779);
		Global.Beameffectdoors[294] = Vector(-62.439, -153.410, 10.779);
		Global.Beameffectdoors[295] = Vector(-55.515, -150.347, 11.229);
		"door 50"
		Global.Beameffectdoors[296] = Vector(-88.833, -155.365, 4.708);
		Global.Beameffectdoors[297] = Vector(-90.233, -151.730, -2.408);
		Global.Beameffectdoors[298] = Vector(-90.233, -155.321, -2.408);
		Global.Beameffectdoors[299] = Vector(-89.578, -151.196, 3.979);
	}
}

disabled rule("244 subroutine door impulse (not really needed as this subroutine is only called in one place now.)")
{
	event
	{
		Subroutine;
		doorimpulse;
	}

	actions
	{
		If(Server Load Average < 230);
			If(Global.impulseDoorArray[Event Player.currentdoorIndex] == 0);
				Event Player.doorresponse = 0;
				"Store the current door's properties into player variables"
				Event Player.do = Global.doorradius[Event Player.currentdoorIndex];
				Event Player.currentdoor = Global.doors[Event Player.currentdoorIndex];
				Event Player.doorimpulse = Global.impulseDoorArray[Event Player.currentdoorIndex];
				"if walking into door normally"
				If(Is Button Held(Event Player, Button(Interact)) == False);
					Apply Impulse(Players Within Radius(Global.Vectordoorpositions[Event Player.currentdoorIndex],
						Global.doorradius[Event Player.currentdoorIndex], Team 1, Off), Direction Towards(
						Global.Vectordoorpositions[Event Player.currentdoorIndex], Event Player), 0.010, To World, Cancel Contrary Motion);
					Skip If(Event Player.doormessage == 1, 2);
					Event Player.doormessage = 1;
					Small Message(All Players(All Teams), Custom String("  Buy door HOLD {0} while close : 1000 points", Input Binding String(Button(
						Interact))));
					Wait(0.016, Ignore Condition);
					Loop If Condition Is True;
				"if trying to buy door"
				Else;
					"if they have enough points"
					If(Event Player.points >= 1000);
						Play Effect(Event Player, Buff Impact Sound, Color(White), Event Player, 70);
						Play Effect(All Players(Team 1), Good Explosion, Color(Green), Event Player.currentdoor, 4);
						Event Player.points -= 1000;
						Global.impulseDoorArray[Event Player.currentdoorIndex] = 1;
						Destroy Effect(Event Player.currentdoor);
					"if they dont have enough points to buy door"
					Else;
						Apply Impulse(Players Within Radius(Global.Vectordoorpositions[Event Player.currentdoorIndex],
							Global.doorradius[Event Player.currentdoorIndex], Team 1, Off), Direction Towards(
							Global.Vectordoorpositions[Event Player.currentdoorIndex], Event Player), 10, To World, Cancel Contrary Motion);
					End;
				End;
			End;
		Else If(Server Load Average >= 230);
			Small Message(All Players(All Teams), Custom String("  {0} Error: {1} you can pass for now (--anticrashsys--)", Hero Icon String(
				Hero(Ramattra)), Random Integer(10, 1000)));
			Wait(2, Ignore Condition);
	}
}

disabled rule("300 Impulse DOORS")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is True For Any(Global.Vectordoorpositions, Distance Between(Current Array Element, Event Player)
			< Global.doorradius[Current Array Index]) == True;
		"works with this for some reason?"
		Event Player.doorresponse == 0;
	}

	actions
	{
		Event Player.currentdoorIndex = Index Of Array Value(Global.Vectordoorpositions, First Of(Filtered Array(
			Global.Vectordoorpositions, Distance Between(Current Array Element, Event Player) < Global.doorradius[Current Array Index])));
		Call Subroutine(doorimpulse);
	}
}

rule("starting voice lines (needs new text system for more enjoyable readability)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.start == 1;
	}

	actions
	{
		"can be optmizied to not use as many if statements and use only 1 small message action"
		Wait(6, Ignore Condition);
		If(Global.startlines == 0);
			Create HUD Text(All Players(Team 1), Hero Icon String(Hero(Ramattra)), Null, Custom String(
				" Trial {0}. The path to a new world begins.", Random Integer(1, 9999)), Top, 2, Color(White), Color(White), Color(Orange),
				Visible To and String, Default Visibility);
			Wait(10, Ignore Condition);
			Destroy HUD Text(Last Text ID);
			disabled Else If(Global.startlines == 1);
			disabled Small Message(All Players(All Teams), Custom String("  {0} This time, Null Sector will not be denied.", Hero Icon String(Hero(
				Ramattra))));
			disabled Else If(Global.startlines == 2);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Trial {1}. Data insufficient.", Hero Icon String(Hero(Ramattra)),
				Random Integer(100, 9999)));
			disabled Else If(Global.startlines == 3);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Subject: Overwatch. This trial will determine their fate.",
				Hero Icon String(Hero(Ramattra))));
			disabled Else If(Global.startlines == 4);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Commencing Trial {1}.", Hero Icon String(Hero(Ramattra)),
				Random Integer(100, 9999)));
			disabled Else If(Global.startlines == 5);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Subjects: Detected. Trial {1} begins.", Hero Icon String(Hero(
				Ramattra)), Random Integer(100, 9999)));
			disabled Wait(5, Ignore Condition);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Your performance will be judged.", Hero Icon String(Hero(Ramattra))));
			disabled Else If(Global.startlines == 6);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Pathetic. ", Hero Icon String(Hero(Ramattra))));
			disabled Wait(5, Ignore Condition);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Your defiance only delays the inevitable.", Hero Icon String(Hero(
				Ramattra))));
			disabled Else If(Global.startlines == 7);
			disabled Small Message(All Players(All Teams), Custom String("  {0} Trial malfunction detected.", Hero Icon String(Hero(Ramattra))));
			disabled Wait(5, Ignore Condition);
			disabled Small Message(All Players(All Teams), Custom String("  {0}  Overclocking systems. Failure is not an option.", Hero Icon String(
				Hero(Ramattra))));
			disabled Else If(Global.startlines == 8);
			disabled Small Message(All Players(All Teams), Custom String("  {0} You call yourselves heroes?", Hero Icon String(Hero(Ramattra))));
			disabled Wait(5, Ignore Condition);
			disabled Small Message(All Players(All Teams), Custom String("  {0} You're merely variables in my equation.", Hero Icon String(Hero(
				Ramattra))));
	}
}

rule("202 Purchase hero action (needs purchase hero subroutine)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Global.herobuyrandomized, Distance Between(Current Array Element, Event Player)
			< Global.heroradius[Current Array Index]) == True;
	}

	actions
	{
		"lucio"
		If(Distance Between(Event Player, Global.herobuyrandomized[0]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Lúcio));
				Event Player.heroswap[Event Player.currentswap] = Hero(Lúcio);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Lúcio));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.points -= 1000;
				Wait(0.250, Ignore Condition);
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Lúcio), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} This melody requires a different kind of rythem", Hero Icon String(Hero(
					Ramattra))));
			End;
		"hanzo"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[1]) < 2);
			If(Event Player.points >= 1250);
				Call Subroutine(herobuy1250);
				Start Forcing Player To Be Hero(Event Player, Hero(Hanzo));
				Event Player.heroswap[Event Player.currentswap] = Hero(Hanzo);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Hanzo));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Skip If(Hero Of(Event Player) == Hero(Hanzo), 1);
				Event Player.xp = Event Player.xparray[0];
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} This path requires greater discipline", Hero Icon String(Hero(Ramattra))));
			End;
		"zenyatta"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[2]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Zenyatta));
				Event Player.heroswap[Event Player.currentswap] = Hero(Zenyatta);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Zenyatta));
				Event Player.points -= 1000;
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Wait(0.250, Ignore Condition);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Zenyatta), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Harmony requires a different balance", Hero Icon String(Hero(Ramattra))));
			End;
		"soldier 76"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[3]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Soldier: 76));
				Event Player.heroswap[Event Player.currentswap] = Hero(Soldier: 76);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Soldier: 76));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.points -= 1000;
				Wait(0.250, Ignore Condition);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Soldier: 76), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} This hero cant be bought on impulse! Earn it.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"mercy"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[4]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
				Event Player.heroswap[Event Player.currentswap] = Hero(Mercy);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Mercy));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.points -= 1000;
				Wait(0.250, Ignore Condition);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Mercy), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} You think you can afford a medical license? ", Hero Icon String(Hero(Ramattra))));
			End;
		"pharah"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[5]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Pharah));
				Event Player.heroswap[Event Player.currentswap] = Hero(Pharah);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Pharah));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.points -= 1000;
				Wait(0.250, Ignore Condition);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Pharah), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Come back when you're ready to fly.", Hero Icon String(Hero(Ramattra))));
			End;
		"junkrat"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[6]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Junkrat));
				Event Player.heroswap[Event Player.currentswap] = Hero(Junkrat);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Junkrat));
				Call Subroutine(herobuy1250);
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} This hero needs a more... Explosive budget", Hero Icon String(Hero(Ramattra))));
			End;
		"symmetra"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[7]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Symmetra));
				Event Player.heroswap[Event Player.currentswap] = Hero(Symmetra);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Symmetra));
				Event Player.points -= 1000 + 750;
				Wait(0.250, Ignore Condition);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Symmetra), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} This architect requires a stronger foundation", Hero Icon String(Hero(
					Ramattra))));
			End;
		"doomfist"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[8]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Doomfist));
				Event Player.heroswap[Event Player.currentswap] = Hero(Doomfist);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Doomfist));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} This gauntlet wasnt built for free, you know!", Hero Icon String(Hero(
					Ramattra))));
			End;
		"baptiste"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[9]) < 2);
			If(Event Player.points >= 1250);
				Start Forcing Player To Be Hero(Event Player, Hero(Baptiste));
				Event Player.heroswap[Event Player.currentswap] = Hero(Baptiste);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Baptiste));
				Call Subroutine(herobuy1250);
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} This detective needs a deeper well of empathy.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"bastion"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[10]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Bastion));
				Event Player.heroswap[Event Player.currentswap] = Hero(Bastion);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Bastion));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} No, the bird doesnt come free.", Hero Icon String(Hero(Ramattra))));
			End;
		"reaper"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[11]) < 2);
			If(Event Player.points >= 1000);
				Start Forcing Player To Be Hero(Event Player, Hero(Reaper));
				Event Player.heroswap[Event Player.currentswap] = Hero(Reaper);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Reaper));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.points -= 1000;
				Wait(0.250, Ignore Condition);
				Event Player.currentmagazines = 10;
				Skip If(Hero Of(Event Player) == Hero(Reaper), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Death awaits... you, if you dont get some points!", Hero Icon String(Hero(
					Ramattra))));
			End;
		"genji"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[12]) < 2);
			If(Event Player.points >= 1250);
				Start Forcing Player To Be Hero(Event Player, Hero(Genji));
				Event Player.heroswap[Event Player.currentswap] = Hero(Genji);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Genji));
				Call Subroutine(herobuy1250);
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} Well dont wait for a coupon. start getting points!", Hero Icon String(Hero(
					Ramattra))));
			End;
		"ashe"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[13]) < 2);
			If(Event Player.points >= 1250);
				Start Forcing Player To Be Hero(Event Player, Hero(Ashe));
				Event Player.heroswap[Event Player.currentswap] = Hero(Ashe);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Ashe));
				Call Subroutine(herobuy1250);
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} this isnt the right iron for your holster.", Hero Icon String(Hero(Ramattra))));
			End;
		"zarya"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[14]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Zarya));
				Event Player.heroswap[Event Player.currentswap] = Hero(Zarya);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Zarya));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} You need a bigger heart to bear this power.", Hero Icon String(Hero(Ramattra))));
			End;
		"roadhog"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[15]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Roadhog));
				Event Player.heroswap[Event Player.currentswap] = Hero(Roadhog);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Roadhog));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} This ain't your brand of brawl", Hero Icon String(Hero(Ramattra))));
			End;
		"dva"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[16]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
				Event Player.heroswap[Event Player.currentswap] = Hero(D.Va);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(D.Va));
				Set Ultimate Ability Enabled(Event Player, True);
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} This is in fact, not easy mode.", Hero Icon String(Hero(Ramattra))));
			End;
		"brig"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[17]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Brigitte));
				Event Player.heroswap[Event Player.currentswap] = Hero(Brigitte);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Brigitte));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} This armor doesnt come cheap!", Hero Icon String(Hero(Ramattra))));
			End;
		"rein"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[18]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Reinhardt));
				Event Player.heroswap[Event Player.currentswap] = Hero(Reinhardt);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Reinhardt));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Honor demands courage... and more points. Now get to it!", Hero Icon String(Hero(
					Ramattra))));
			End;
		"torb"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[19]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Torbjörn));
				Event Player.heroswap[Event Player.currentswap] = Hero(Torbjörn);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Torbjörn));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Seems like your hard works not paying off.", Hero Icon String(Hero(Ramattra))));
			End;
		"sigma"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[20]) < 2);
			If(Event Player.points >= 1750);
				Start Forcing Player To Be Hero(Event Player, Hero(Sigma));
				Event Player.heroswap[Event Player.currentswap] = Hero(Sigma);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Sigma));
				Call Subroutine(herobuy1750);
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} The melody sounds like you're broke.", Hero Icon String(Hero(Ramattra))));
			End;
		"orisa"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[21]) < 2);
			If(Event Player.points >= 1250);
				Start Forcing Player To Be Hero(Event Player, Hero(Orisa));
				Event Player.heroswap[Event Player.currentswap] = Hero(Orisa);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Orisa));
				Call Subroutine(herobuy1250);
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} This protector needs more purpose... and points.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"moira"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[22]) < 2);
			If(Event Player.points >= 1250);
				Start Forcing Player To Be Hero(Event Player, Hero(Moira));
				Event Player.heroswap[Event Player.currentswap] = Hero(Moira);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Moira));
				Call Subroutine(herobuy1250);
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} This scientist demands a more curious mind!", Hero Icon String(Hero(Ramattra))));
			End;
		"mei"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[23]) < 2);
			If(Event Player.points >= 30000);
				Start Forcing Player To Be Hero(Event Player, Hero(Mei));
				Event Player.heroswap[Event Player.currentswap] = Hero(Mei);
				Event Player.heroiconswap[Event Player.currentswap] = Hero Icon String(Hero(Mei));
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.points -= 30000;
				Wait(0.250, Ignore Condition);
				Play Effect(All Players(Team 1), Buff Impact Sound, Color(White), Event Player, 70);
				Event Player.currentmagazines = 50;
				Skip If(Hero Of(Event Player) == Hero(Mei), 3);
				Skip If(Global.experiencesystem == False, 2);
				Event Player.XPlevel = 0;
				Event Player.xp = 0;
			Else If(Event Player.points < 30000);
				Small Message(Event Player, Custom String("  {0} No, this is not... A-mei-zing. Get points!", Hero Icon String(Hero(Ramattra))));
			End;
		End;
		"buy ending"
		If(Distance Between(Event Player, Vector(-101.303, -150.360, -17.831)) < 2);
			If(Event Player.points >= 50000);
				Set Slow Motion(40);
				Wait(2, Ignore Condition);
				Declare Team Victory(Team 1);
			Else If(Event Player.points < 50000);
				Small Message(Event Player, Custom String("  {0} HA, good luck escaping...", Hero Icon String(Hero(Ramattra))));
			End;
	}
}

rule("hero radius array")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"is true for any needs this might simplify later...."
		Global.heroradius[0] = 2;
		Global.heroradius[1] = 2;
		Global.heroradius[2] = 2;
		Global.heroradius[3] = 2;
		Global.heroradius[4] = 2;
		Global.heroradius[5] = 2;
		Global.heroradius[6] = 2;
		Global.heroradius[7] = 2;
		Global.heroradius[8] = 2;
		Global.heroradius[9] = 2;
		Global.heroradius[10] = 2;
		Global.heroradius[11] = 2;
		Global.heroradius[12] = 2;
		Global.heroradius[13] = 2;
		Global.heroradius[14] = 2;
		Global.heroradius[15] = 2;
		Global.heroradius[16] = 2;
		Global.heroradius[17] = 2;
		Global.heroradius[18] = 2;
		Global.heroradius[19] = 2;
		Global.heroradius[20] = 2;
		Global.heroradius[21] = 2;
		Global.heroradius[22] = 2;
		Global.heroradius[23] = 2;
	}
}

rule("died radius array (need to fix teammates not being able to be respawned)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.diedradius[0] = 4;
		Global.diedradius[1] = 4;
		Global.diedradius[2] = 4;
		Global.diedradius[3] = 4;
	}
}

disabled rule("fun fact system (make this so its either not in the way, or its only when the team dies on a game over screen)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start == 1;
		Global.roundnumber > 0;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("tip: {0}", Random Value In Array(Global.tipstrings)), Left, 0, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Wait(15, Ignore Condition);
		Destroy HUD Text(Last Text ID);
	}
}

disabled rule("fun facts (can turn this into an array table)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.tipstrings[0] = Custom String("melee to consume less ammo!");
		Global.tipstrings[1] = Custom String("reload only when your clip is empty to conserve ammo");
		Global.tipstrings[2] = Custom String("you lose your hero if not revived at end of round");
		Global.tipstrings[3] = Custom String("after a playthrough, you keep all the heros you bought");
		Global.tipstrings[4] = Custom String("beating the boss' is well worth the points if you are up to a challenge");
		Global.tipstrings[5] = Custom String("its cheaper to use mystery box than new hero");
		Global.tipstrings[6] = Custom String("followers stay with you till the very end!");
		Global.tipstrings[7] = Custom String("some custom items can be used by communicating \"i need healing)");
		Global.tipstrings[8] = Custom String("there is 3 custom to play in, each with its own boss");
		Global.tipstrings[9] = Custom String("perks and hero locations rotate randomly each playthrough");
		Global.tipstrings[10] = Custom String("points depend on who gets the last hit!");
		Global.tipstrings[11] = Custom String("setting hero wave type to 2 enables wave boss' as well!");
		Global.tipstrings[12] = Custom String("faster burst damage heros gain more points!");
		Global.tipstrings[13] = Custom String("some heros have ultimate modifiers");
	}
}

rule("boss effect (consolidate later)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Global.bossbuypositions[0], 1, Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn boss: {0} : 15000 points", Input Binding String(Button(
			Interact))), Vector(-75.219, -158.958, 66.504), 1, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(White), Global.bossbuypositions[1], 1, Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn boss: {0} : 15000 points", Input Binding String(Button(
			Interact))), Vector(269.763, 41.235, 160.020), 1, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(White), Global.bossbuypositions[2], 1, Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Spawn boss: {0} : 15000 points", Input Binding String(Button(
			Interact))), Vector(284.310, -11.295, -220.941), 1, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
	}
}

rule("boss buy (consolidate later)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Global.bossbuypositions, Distance Between(Current Array Element, Event Player)
			< Global.heroradius[Current Array Index]) == True;
	}

	actions
	{
		If(Distance Between(Global.bossbuypositions[0], Event Player) < 2);
			Global.Bosssequencer = 1;
		Else If(Distance Between(Global.bossbuypositions[1], Event Player) < 2);
			Global.Bosssequencer = 2;
		Else If(Distance Between(Global.bossbuypositions[2], Event Player) < 2);
			Global.Bosssequencer = 3;
	}
}

rule("bossbuyarray")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.bossbuypositions[0] = Vector(-75.219, -159.958, 66.504);
		Global.bossbuypositions[1] = Vector(269.763, 40.235, 160.020);
		Global.bossbuypositions[2] = Vector(284.310, -12.295, -220.941);
	}
}

rule("switch between 2 heros (needs ultimates, followers, ammo, systems working)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		If(Server Load Average < 220);
			Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Color(White), Event Player, 200);
			Remove All Health Pools From Player(Event Player);
			"needs subroutine"
			If(Event Player.currentswap == 0);
				Preload Hero(Event Player, Event Player.heroswap[1]);
				Event Player.herohp[0] = Health(Event Player);
				Event Player.ultcharge[0] = Event Player.currentultcharge;
				Event Player.abilitycooldown[0] = Ability Cooldown(Event Player, Button(Ability 1));
				Event Player.abilitycooldown[1] = Ability Cooldown(Event Player, Button(Ability 2));
				Event Player.abilitycooldown[2] = Ability Cooldown(Event Player, Button(Secondary Fire));
				Press Button(Event Player, Button(Reload));
				Wait(0.016, Ignore Condition);
				Event Player.magazines[0] = Event Player.currentmagazines;
				Event Player.currentswap = 1;
				Wait(0.016, Ignore Condition);
				Event Player.currentmagazines = Event Player.magazines[1];
				Event Player.currentultcharge = Event Player.ultcharge[1];
			Else If(Event Player.currentswap == 1);
				Preload Hero(Event Player, Event Player.heroswap[0]);
				Event Player.herohp[1] = Health(Event Player);
				Event Player.ultcharge[1] = Event Player.currentultcharge;
				Event Player.abilitycooldown[3] = Ability Cooldown(Event Player, Button(Ability 1));
				Event Player.abilitycooldown[4] = Ability Cooldown(Event Player, Button(Ability 2));
				Event Player.abilitycooldown[5] = Ability Cooldown(Event Player, Button(Secondary Fire));
				Press Button(Event Player, Button(Reload));
				Wait(0.016, Ignore Condition);
				Event Player.magazines[1] = Event Player.currentmagazines;
				Event Player.currentswap = 0;
				Wait(0.016, Ignore Condition);
				Event Player.currentmagazines = Event Player.magazines[0];
				Event Player.currentultcharge = Event Player.ultcharge[0];
			End;
			Start Forcing Player To Be Hero(Event Player, Event Player.heroswap[Event Player.currentswap]);
			If(Event Player.currentswap == 0);
				Set Player Health(Event Player, Event Player.herohp[0]);
				Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.abilitycooldown[0]);
				Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.abilitycooldown[1]);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), Event Player.abilitycooldown[2]);
			Else If(Event Player.currentswap == 1);
				Set Player Health(Event Player, Event Player.herohp[1]);
				Set Ability Cooldown(Event Player, Button(Ability 1), Event Player.abilitycooldown[3]);
				Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.abilitycooldown[4]);
				Set Ability Cooldown(Event Player, Button(Secondary Fire), Event Player.abilitycooldown[5]);
			End;
			Wait(1, Ignore Condition);
			Set Ultimate Charge(Event Player, Event Player.currentultcharge);
		Else If(Server Load Average >= 220);
			Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(White), Event Player, 1);
			Small Message(All Players(All Teams), Custom String("{0} Error: {1} Not on my watch! (--anticrashsys--)", Hero Icon String(Hero(
				Ramattra)), Random Integer(10, 1000)));
			Wait(6, Ignore Condition);
	}
}

rule("Set starting heros (needs to be a variable, and also need to set up a way to go through hero selection twice")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.heroswap[0] = Hero(Cassidy);
		Event Player.heroswap[1] = Hero(D.Va);
		Event Player.heroiconswap[0] = Hero Icon String(Hero(Cassidy));
		Event Player.heroiconswap[1] = Hero Icon String(Hero(D.Va));
	}
}

rule("anticrash (not truely enjoyed by most developers but not too noticable for most players.")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load >= 240;
	}

	actions
	{
		Set Slow Motion(70);
	}
}

rule("anticrash (would be nice to make it so it ramps up and down instead of flat amount.)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load < 240;
	}

	actions
	{
		Set Slow Motion(100);
	}
}

disabled rule("Rule 245 (consolidate into a table)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"door 51"
		Global.Beameffectdoors[300] = Vector(282.556, 41.252, 190.333);
		Global.Beameffectdoors[301] = Vector(285.799, 45.495, 177.556);
		Global.Beameffectdoors[302] = Vector(287.267, 40.446, 177.163);
		Global.Beameffectdoors[303] = Vector(280.403, 46.403, 190.382);
		"door 52"
		Global.Beameffectdoors[304] = Vector(281.050, 41.288, 202.168);
		Global.Beameffectdoors[305] = Vector(279.188, 46.140, 194.684);
		Global.Beameffectdoors[306] = Vector(279.188, 42.899, 194.684);
		Global.Beameffectdoors[307] = Vector(281.023, 44.832, 202.868);
		"door 53"
		Global.Beameffectdoors[308] = Vector(242.009, 46.479, 169.800);
		Global.Beameffectdoors[309] = Vector(251.408, 46.080, 161.734);
		Global.Beameffectdoors[310] = Vector(242.089, 47.104, 170.472);
		Global.Beameffectdoors[311] = Vector(251.766, 45.238, 174.647);
		"door 54"
		Global.Beameffectdoors[312] = Vector(253.156, 40.422, 177.081);
		Global.Beameffectdoors[313] = Vector(259.614, 46.703, 190.677);
		Global.Beameffectdoors[314] = Vector(260.309, 42.205, 190.020);
		Global.Beameffectdoors[315] = Vector(253.341, 44.803, 178.024);
		"door 55"
		Global.Beameffectdoors[316] = Vector(260.643, 46.074, 194.312);
		Global.Beameffectdoors[317] = Vector(258.651, 41.490, 202.410);
		Global.Beameffectdoors[318] = Vector(258.008, 45.414, 203.312);
		Global.Beameffectdoors[319] = Vector(260.038, 43.091, 194.771);
		"door 56"
		Global.Beameffectdoors[320] = Vector(265.771, 47.592, 182.207);
		Global.Beameffectdoors[321] = Vector(274.523, 43.873, 181.819);
		Global.Beameffectdoors[322] = Vector(274.392, 47.574, 181.897);
		Global.Beameffectdoors[323] = Vector(265.373, 43.487, 181.354);
		"door 57"
		Global.Beameffectdoors[324] = Vector(-88.476, -158.497, 70.859);
		Global.Beameffectdoors[325] = Vector(-88.066, -155.052, 77.914);
		Global.Beameffectdoors[326] = Vector(-88.066, -159.274, 77.914);
		Global.Beameffectdoors[327] = Vector(-88.725, -154.884, 70.664);
		"door 58"
		Global.Beameffectdoors[328] = Vector(-81.799, -154.278, 80.547);
		Global.Beameffectdoors[329] = Vector(-83.029, -151.032, 86.653);
		Global.Beameffectdoors[330] = Vector(-83.029, -153.936, 86.653);
		Global.Beameffectdoors[331] = Vector(-82.479, -151.443, 80.042);
		"door 59"
		Global.Beameffectdoors[332] = Vector(-104.238, -154.681, 92.161);
		Global.Beameffectdoors[333] = Vector(-91.499, -151.172, 92.909);
		Global.Beameffectdoors[334] = Vector(-91.559, -154.657, 92.633);
		Global.Beameffectdoors[335] = Vector(-107.366, -150.851, 92.729);
		"door 60"
		Global.Beameffectdoors[336] = Vector(-83.214, -154.119, 96.558);
		Global.Beameffectdoors[337] = Vector(-83.645, -150.492, 106.693);
		Global.Beameffectdoors[338] = Vector(-83.645, -154.561, 106.693);
		Global.Beameffectdoors[339] = Vector(-82.936, -150.706, 96.837);
		"door 61"
		Global.Beameffectdoors[340] = Vector(-64.028, -151.314, 127.214);
		Global.Beameffectdoors[341] = Vector(-73.411, -147.984, 126.034);
		Global.Beameffectdoors[342] = Vector(-73.411, -151.033, 126.034);
		Global.Beameffectdoors[343] = Vector(-63.258, -146.605, 126.256);
		"door 62"
		Global.Beameffectdoors[344] = Vector(-79.482, -154.225, 126.745);
		Global.Beameffectdoors[345] = Vector(-88.680, -149.832, 126.410);
		Global.Beameffectdoors[346] = Vector(-88.680, -154.136, 126.410);
		Global.Beameffectdoors[347] = Vector(-79.202, -150.741, 126.623);
		"door 63"
		Global.Beameffectdoors[348] = Vector(-95.613, -149.432, 127.771);
		Global.Beameffectdoors[349] = Vector(-105.972, -153.051, 126.922);
		Global.Beameffectdoors[350] = Vector(-105.972, -149.008, 126.922);
		Global.Beameffectdoors[351] = Vector(-95.418, -154.222, 126.978);
		"door 64"
		Global.Beameffectdoors[352] = Vector(-106.988, -155.104, 93.289);
		Global.Beameffectdoors[353] = Vector(-106.350, -151.676, 103.051);
		Global.Beameffectdoors[354] = Vector(-106.350, -155.068, 103.051);
		Global.Beameffectdoors[355] = Vector(-107.563, -152.218, 93.568);
		"door 65"
		Global.Beameffectdoors[356] = Vector(239.009, -11.663, -250.343);
		Global.Beameffectdoors[357] = Vector(242.752, -7.841, -243.207);
		Global.Beameffectdoors[358] = Vector(242.752, -11.403, -243.207);
		Global.Beameffectdoors[359] = Vector(239.191, -7.520, -250.269);
		"door 66"
		Global.Beameffectdoors[360] = Vector(245.644, -6.442, -230.744);
		Global.Beameffectdoors[361] = Vector(241.295, -11.681, -219.030);
		Global.Beameffectdoors[362] = Vector(240.854, -8.572, -218.097);
		Global.Beameffectdoors[363] = Vector(244.134, -10.386, -231.273);
		"door 67"
		Global.Beameffectdoors[364] = Vector(239.719, -6.772, -214.816);
		Global.Beameffectdoors[365] = Vector(238.306, -9.207, -209.643);
		Global.Beameffectdoors[366] = Vector(238.306, -7.235, -209.643);
		Global.Beameffectdoors[367] = Vector(239.706, -9.113, -215.032);
		"door 68"
		Global.Beameffectdoors[368] = Vector(270.938, -10.761, -233.089);
		Global.Beameffectdoors[369] = Vector(270.556, -13.854, -226.851);
		Global.Beameffectdoors[370] = Vector(270.556, -10.582, -226.851);
		Global.Beameffectdoors[371] = Vector(270.452, -13.999, -233.169);
		"door 69"
		Global.Beameffectdoors[372] = Vector(264.629, -11.534, -237.516);
		Global.Beameffectdoors[373] = Vector(269.336, -14.720, -237.523);
		Global.Beameffectdoors[374] = Vector(269.336, -11.567, -237.523);
		Global.Beameffectdoors[375] = Vector(264.812, -14.830, -237.634);
		"door 70"
		Global.Beameffectdoors[376] = Vector(264, -10.020, -252.010);
		Global.Beameffectdoors[377] = Vector(264.010, -13.020, -248.010);
		Global.Beameffectdoors[378] = Vector(264, -13.020, -252.010);
		Global.Beameffectdoors[379] = Vector(264.010, -10.020, -248.010);
		"door 71"
		Global.Beameffectdoors[380] = Vector(303.690, -9.350, -258.980);
		Global.Beameffectdoors[381] = Vector(303.780, -13.350, -262.980);
		Global.Beameffectdoors[382] = Vector(303.690, -13.350, -258.980);
		Global.Beameffectdoors[383] = Vector(303.780, -9.350, -262.980);
		"door 72"
		Global.Beameffectdoors[384] = Vector(287.980, -7.020, -254.360);
		Global.Beameffectdoors[385] = Vector(279.990, -11.020, -254.730);
		Global.Beameffectdoors[386] = Vector(287.980, -11.020, -254.360);
		Global.Beameffectdoors[387] = Vector(279.990, -7.020, -254.730);
		"door 73"
		Global.Beameffectdoors[388] = Vector(304.220, -9.970, -248.030);
		Global.Beameffectdoors[389] = Vector(304.170, -12.970, -252.030);
		Global.Beameffectdoors[390] = Vector(304.220, -12.970, -248.030);
		Global.Beameffectdoors[391] = Vector(304.170, -9.970, -252.030);
		"door 74"
		Global.Beameffectdoors[392] = Vector(264.480, -9.020, -263.060);
		Global.Beameffectdoors[393] = Vector(264.410, -13.020, -259.060);
		Global.Beameffectdoors[394] = Vector(264.480, -13.020, -263.060);
		Global.Beameffectdoors[395] = Vector(264.410, -9.020, -259.060);
		"door 75"
		Global.Beameffectdoors[396] = Vector(297.640, -10.200, -226.990);
		Global.Beameffectdoors[397] = Vector(297.830, -14.200, -232.980);
		Global.Beameffectdoors[398] = Vector(297.640, -14.200, -226.990);
		Global.Beameffectdoors[399] = Vector(297.830, -10.200, -232.980);
		"door 76"
		Global.Beameffectdoors[400] = Vector(298.900, -12, -237.470);
		Global.Beameffectdoors[401] = Vector(302.900, -15, -237.460);
		Global.Beameffectdoors[402] = Vector(298.900, -15, -237.470);
		Global.Beameffectdoors[403] = Vector(302.900, -12, -237.460);
		"door 77"
		Global.Beameffectdoors[404] = Vector(327.070, -7.240, -216.850);
		Global.Beameffectdoors[405] = Vector(322.740, -12.240, -232.260);
		Global.Beameffectdoors[406] = Vector(327.070, -12.240, -216.850);
		Global.Beameffectdoors[407] = Vector(322.740, -7.240, -232.260);
		"door 78"
		Global.Beameffectdoors[408] = Vector(330.130, -7.130, -209.870);
		Global.Beameffectdoors[409] = Vector(328.850, -10.130, -215.730);
		Global.Beameffectdoors[410] = Vector(330.130, -10.130, -209.870);
		Global.Beameffectdoors[411] = Vector(328.850, -7.130, -215.730);
		"door 79"
		Global.Beameffectdoors[412] = Vector(325.820, -7.910, -242.870);
		Global.Beameffectdoors[413] = Vector(329.450, -11.910, -250);
		Global.Beameffectdoors[414] = Vector(325.820, -11.910, -242.870);
		Global.Beameffectdoors[415] = Vector(329.450, -7.910, -250);
		"door 80"
		disabled Global.Beameffectdoors[416] = Vector(282.556, 41.252, 190.333);
		disabled Global.Beameffectdoors[417] = Vector(285.799, 45.495, 177.556);
		disabled Global.Beameffectdoors[418] = Vector(287.267, 40.446, 177.163);
		disabled Global.Beameffectdoors[419] = Vector(280.403, 46.403, 190.382);
		"door 81"
		disabled Global.Beameffectdoors[420] = Vector(282.556, 41.252, 190.333);
		disabled Global.Beameffectdoors[421] = Vector(285.799, 45.495, 177.556);
		disabled Global.Beameffectdoors[422] = Vector(287.267, 40.446, 177.163);
		disabled Global.Beameffectdoors[423] = Vector(280.403, 46.403, 190.382);
		"door 82"
		disabled Global.Beameffectdoors[424] = Vector(282.556, 41.252, 190.333);
		disabled Global.Beameffectdoors[425] = Vector(285.799, 45.495, 177.556);
		disabled Global.Beameffectdoors[426] = Vector(287.267, 40.446, 177.163);
		disabled Global.Beameffectdoors[427] = Vector(280.403, 46.403, 190.382);
		"door 83"
		disabled Global.Beameffectdoors[428] = Vector(282.556, 41.252, 190.333);
		disabled Global.Beameffectdoors[429] = Vector(285.799, 45.495, 177.556);
		disabled Global.Beameffectdoors[430] = Vector(287.267, 40.446, 177.163);
		disabled Global.Beameffectdoors[431] = Vector(280.403, 46.403, 190.382);
		"door 84"
		disabled Global.Beameffectdoors[432] = Vector(282.556, 41.252, 190.333);
		disabled Global.Beameffectdoors[433] = Vector(285.799, 45.495, 177.556);
		disabled Global.Beameffectdoors[434] = Vector(287.267, 40.446, 177.163);
		disabled Global.Beameffectdoors[435] = Vector(280.403, 46.403, 190.382);
	}
}

disabled rule("DEV door numbers")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		disabled Create In-World Text(All Players(All Teams), Custom String("1-2"), Global.Vectordoorpositions[0], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("3-4"), Global.Vectordoorpositions[1], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("5-6"), Global.Vectordoorpositions[2], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("7-8"), Global.Vectordoorpositions[3], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("9-10"), Global.Vectordoorpositions[4], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("11-12"), Global.Vectordoorpositions[5], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("13-14"), Global.Vectordoorpositions[6], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("15-16"), Global.Vectordoorpositions[7], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("17-18"), Global.Vectordoorpositions[8], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("19-20"), Global.Vectordoorpositions[9], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("21-22"), Global.Vectordoorpositions[10], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("23-24"), Global.Vectordoorpositions[11], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("25-26"), Global.Vectordoorpositions[12], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("27-28"), Global.Vectordoorpositions[13], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("29-30"), Global.Vectordoorpositions[14], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("31-32"), Global.Vectordoorpositions[15], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("33-34"), Global.Vectordoorpositions[16], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("35-36"), Global.Vectordoorpositions[17], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("37-38"), Global.Vectordoorpositions[18], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("39-40"), Global.Vectordoorpositions[19], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("41-42"), Global.Vectordoorpositions[20], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("43-44"), Global.Vectordoorpositions[21], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("45-46"), Global.Vectordoorpositions[22], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("47-48"), Global.Vectordoorpositions[23], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("49-50"), Global.Vectordoorpositions[24], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("51-52"), Global.Vectordoorpositions[25], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("53-54"), Global.Vectordoorpositions[26], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("55-56"), Global.Vectordoorpositions[27], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("57-58"), Global.Vectordoorpositions[28], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("59-60"), Global.Vectordoorpositions[29], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("61-62"), Global.Vectordoorpositions[30], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("63-64"), Global.Vectordoorpositions[31], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("65-66"), Global.Vectordoorpositions[32], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("67-68"), Global.Vectordoorpositions[33], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("69-70"), Global.Vectordoorpositions[34], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("71-72"), Global.Vectordoorpositions[35], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("73-74"), Global.Vectordoorpositions[36], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("75-76"), Global.Vectordoorpositions[37], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("77-78"), Global.Vectordoorpositions[38], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("79-80"), Global.Vectordoorpositions[39], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("81-82"), Global.Vectordoorpositions[40], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("83-84"), Global.Vectordoorpositions[41], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("85-86"), Global.Vectordoorpositions[42], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("87-88"), Global.Vectordoorpositions[43], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("89-90"), Global.Vectordoorpositions[44], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("91-92"), Global.Vectordoorpositions[45], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("93-94"), Global.Vectordoorpositions[46], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("95-96"), Global.Vectordoorpositions[47], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("97-98"), Global.Vectordoorpositions[48], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("99-100"), Global.Vectordoorpositions[49], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("101-102"), Global.Vectordoorpositions[50], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("103-104"), Global.Vectordoorpositions[51], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("105-106"), Global.Vectordoorpositions[52], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("107-108"), Global.Vectordoorpositions[53], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("109-110"), Global.Vectordoorpositions[54], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("111-112"), Global.Vectordoorpositions[55], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("113-114"), Global.Vectordoorpositions[56], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("115-116"), Global.Vectordoorpositions[57], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("117-118"), Global.Vectordoorpositions[58], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("119-120"), Global.Vectordoorpositions[59], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("121-122"), Global.Vectordoorpositions[60], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("123-124"), Global.Vectordoorpositions[61], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("125-126"), Global.Vectordoorpositions[62], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("127-128"), Global.Vectordoorpositions[63], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("129-130"), Global.Vectordoorpositions[64], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("131-132"), Global.Vectordoorpositions[65], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("133-134"), Global.Vectordoorpositions[66], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("135-136"), Global.Vectordoorpositions[67], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("137-138"), Global.Vectordoorpositions[68], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("139-140"), Global.Vectordoorpositions[69], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("141-142"), Global.Vectordoorpositions[70], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("143-144"), Global.Vectordoorpositions[71], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("145-146"), Global.Vectordoorpositions[72], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("147-148"), Global.Vectordoorpositions[73], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("149-150"), Global.Vectordoorpositions[74], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("151-152"), Global.Vectordoorpositions[75], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("153-154"), Global.Vectordoorpositions[76], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("155-156"), Global.Vectordoorpositions[77], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("157-158"), Global.Vectordoorpositions[78], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("159-160"), Global.Vectordoorpositions[79], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		disabled Create In-World Text(All Players(All Teams), Custom String("161-162"), Global.Vectordoorpositions[80], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		"overlaps"
		disabled Create In-World Text(All Players(All Teams), Custom String("163-164"), Global.Vectordoorpositions[81], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("165-166"), Global.Vectordoorpositions[82], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("167-168"), Global.Vectordoorpositions[83], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("169-170"), Global.Vectordoorpositions[84], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("171-172"), Global.Vectordoorpositions[85], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("173-174"), Global.Vectordoorpositions[86], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("bastion re enter turret mode (need to add cooldown reduction to seemlessly re-enter turret mode)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Wait(0.250, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		Wait(6.500, Ignore Condition);
		Loop;
	}
}

rule("137  get out of spawn bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		disabled Wait(0.500, Abort When False);
		"A great yet simple action of code, that lets you spawn bots on any map. but still needs some finishing touches to get some quality control."
		Teleport(Event Player, Nearest Walkable Position(Direction From Angles(Random Real(0, 360), Random Real(-3, 3)) * Random Real(10,
			20) + Position Of(First Of(All Living Players(Team 1)))));
	}
}

rule("settings page (not finished)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start == 2;
	}

	actions
	{
		Start Camera(Event Player, Vector(169.539, 51.549, 424.869), Vector(183.415, 49.892, 412.655), 0);
		Create HUD Text(All Players(All Teams), Custom String("Difficulty settings:"), Null, Null, Top, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("Damage recieved: {0}", Global.Difficulty), Top, 0, Color(White), Color(
			White), Color(Red), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("bonus points: 0"), Top, 0, Color(White), Color(White), Color(Red),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Stability settings:"), Null, Null, Top, 0, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("less zombies: {0}", Global.lesszomb), Top, 0, Color(White), Color(White),
			Color(Red), Visible To and String, Default Visibility);
	}
}

rule("settings page initial control (dont need 2 rules for this)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.start == 0;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Global.start = 2;
	}
}

rule("settings page leave control (dont need 2 rules for this)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.start == 2;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Global.start = 0;
	}
}

rule("521 settings screen message (i feel like a small message isnt what i want)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.start == 2;
	}

	actions
	{
		Small Message(Event Player, Custom String("Press crouch to go back!"));
		Wait(8, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 235")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == False;
	}

	actions
	{
		Wait(30, Ignore Condition);
		Global.outofpsawn = 1;
	}
}

rule("soldier explosive rounds")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"higher than .11 due to lag"
		Wait(0.220, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 100, All Players(Team 2), Event Player, True), 5);
		Loop If Condition Is True;
	}
}

rule("roman numerals array")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.romanN = Array(Custom String("0"), Custom String("I"), Custom String("II"), Custom String("III"), Custom String("IV"),
			Custom String("V"), Custom String("VI"), Custom String("VII"), Custom String("VIII"), Custom String("IX"), Custom String("X"),
			Global.roundnumber, Custom String("0"), Custom String("00110001"), Custom String("00110010"), Custom String("00110011"),
			Custom String("00110100"), Custom String("00110101"), Custom String("00110110"), Custom String("00110111"), Custom String(
			"00111000"), Custom String("00111001"), Global.roundnumber);
	}
}

rule("teleporter timer")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.teleporterwait > 0;
	}

	actions
	{
		Wait(60, Ignore Condition);
		Global.teleporterwait = 0;
		disabled Loop If Condition Is True;
	}
}

rule("glitch in the system")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber < 10;
	}

	actions
	{
		Wait(Random Integer(120, 600), Abort When False);
		Global.romanNcounter += 12;
		Wait(0.100, Ignore Condition);
		Global.romanNcounter -= 12;
		Wait(0.100, Ignore Condition);
		Global.romanNcounter += 12;
		Wait(0.100, Ignore Condition);
		Global.romanNcounter -= 12;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("teleporter back to blue")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.teleporterwait == 0;
	}

	actions
	{
		Global.teleportercolor = Color(Blue);
	}
}

rule("toggle perk info")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.perkinfo == 0;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Event Player.perkinfo = 1;
		Wait(0.500, Ignore Condition);
		Event Player.perkinfo = 2;
		Wait(7, Ignore Condition);
		Event Player.perkinfo = 1;
		Wait(0.500, Ignore Condition);
		Event Player.perkinfo = 0;
	}
}

rule("perk info expanded")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.perkinfo == 2;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Club), Icon String(Checkmark)), Custom String("Increased health"),
			Custom String("juggernaut"), Left, 3, Color(Orange), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Diamond), Icon String(Fire)), Custom String("increased damage"),
			Custom String("Pack-a-Punch"), Left, 3, Color(Sky Blue), Color(Orange), Color(White), Visible To and String,
			Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Bolt)), Custom String("speed increased"), Custom String(
			"sprint boost"), Left, 3, Color(Red), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Heart)), Custom String("increased healing"), Custom String(
			"Field Medic"), Left, 3, Color(Red), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
	}
}

rule("perk delete")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.perkinfo == 1;
	}

	actions
	{
		Destroy HUD Text(Event Player.Perkui[Count Of(Event Player.Perkui) - 1]);
		Modify Player Variable(Event Player, Perkui, Remove From Array By Index, Count Of(Event Player.Perkui) - 1);
		Wait(0.016, Ignore Condition);
		Loop If(Count Of(Event Player.Perkui) != 0);
		Abort;
	}
}

rule("perk info simplified")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.start == 1;
		Event Player.perkinfo == 0;
	}

	actions
	{
		Skip If(Global.roundnumber > 0, 1);
		Wait(5, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Club), Icon String(Checkmark)), Null, Null, Left, 3, Color(Orange),
			Color(Orange), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Diamond), Icon String(Fire)), Null, Null, Left, 3, Color(Sky Blue),
			Color(Orange), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Bolt)), Null, Null, Left, 3, Color(Red), Color(Orange), Color(
			White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("{0}", Icon String(Heart)), Null, Null, Left, 3, Color(Red), Color(Orange), Color(
			White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Custom String(" \n\n"), Null, Left, 6, Null, Color(Green), Null, Visible To, Visible Never);
		Modify Player Variable(Event Player, Perkui, Append To Array, Last Text ID);
	}
}

rule("245  tank sheild 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Winston));
			Add Health Pool To Player(Event Player, Health, 100, False, False);
			Wait(10, Ignore Condition);
			"will create future conflicts with other sheilds need patch"
			Remove All Health Pools From Player(Event Player);
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			Add Health Pool To Player(Event Player, Health, 100, False, False);
			Wait(10, Ignore Condition);
			Remove All Health Pools From Player(Event Player);
	}
}

rule("jugg tier 2 and 3")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Jugg > 1;
	}

	actions
	{
		If(Event Player.Jugg == 2);
			Wait(10, Restart When True);
			Add Health Pool To Player(Event Player, Health, 25, False, False);
		Else If(Event Player.Jugg == 3);
			Wait(10, Restart When True);
			Add Health Pool To Player(Event Player, Health, 50, False, False);
	}
}

rule("buy perk subroutine")
{
	event
	{
		Subroutine;
		perkbuyanimation;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("229 buy perks and power activate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is True For Any(Global.perkbuyrandomized, Distance Between(Current Array Element, Event Player)
			< Global.heroradius[Current Array Index]) == True;
	}

	actions
	{
		"add a subroutine for the perk system"
		If(Distance Between(Event Player, Global.perkbuyrandomized[0]) < 2);
			If(Global.K == 0);
				Destroy Effect(Global.powerconnected[0]);
				Destroy In-World Text(Global.powerconnected[1]);
				Global.powerconnected = 1;
				Global.K = 1;
				Big Message(All Players(All Teams), String("{0} {1}", String("Power"), String("On")));
				Set Ultimate Charge(All Players(Team 2), 100);
			End;
		"juggernaut"
		Else If(Distance Between(Event Player, Global.perkbuyrandomized[1]) < 2);
			If(Event Player.points >= 2500);
				If(Event Player.Jugg == 0);
					Event Player.points -= 2500;
					Wait(0.250, Ignore Condition);
					Set Max Health(Event Player, Workshop Setting Integer(Custom String("perks"), Custom String("max HP/ juggernaut"), 100, 100, 400,
						0));
					Heal(Event Player, Null, 1000);
					Event Player.Jugg = 1;
					Call Subroutine(perkbuyanimation);
				Else If(Event Player.Jugg == 1);
					Event Player.points -= 2500;
					Wait(0.250, Ignore Condition);
					Small Message(Event Player, Custom String("  you now get (25) shields 10 seconds after not taking damage"));
					Heal(Event Player, Null, 1000);
					Event Player.Jugg = 2;
					Call Subroutine(perkbuyanimation);
				Else If(Event Player.Jugg == 2);
					Event Player.points -= 2500;
					Wait(0.250, Ignore Condition);
					Small Message(Event Player, Custom String("  you now get (50) shields 10 seconds after not taking damage"));
					Heal(Event Player, Null, 1000);
					Event Player.Jugg = 3;
					Call Subroutine(perkbuyanimation);
				End;
			Else If(Event Player.points < 2500);
				Small Message(Event Player, Custom String("  {0} No points? NO perks!", Hero Icon String(Hero(Ramattra))));
			End;
		"pack a punch"
		Else If(Distance Between(Event Player, Global.perkbuyrandomized[2]) < 2);
			If(Event Player.points >= 5000);
				If(Event Player.Packapunch == 0);
					Event Player.magazines += 20;
					Event Player.points -= 5000;
					Event Player.damagevariable = Workshop Setting Integer(Custom String("perks"), Custom String("pack a punch; damage"), 200, 200,
						500, 0);
					Set Damage Dealt(Event Player, Event Player.damagevariable);
					Create Effect(All Players(Team 1), Baptiste Immortality Field Protected Effect, Color(White), Event Player, 1,
						Visible To Position Radius and Color);
					Event Player.Packapunch = 1;
					Event Player.Maniac = 0;
					Call Subroutine(perkbuyanimation);
				Else If(Event Player.Packapunch == 1);
					Event Player.points -= 5000;
					Wait(0.250, Ignore Condition);
					Small Message(Event Player, Custom String("  you now get (+300%) damage with this hero"));
					Create Effect(All Players(Team 1), Ana Nano Boosted Effect, Color(White), Event Player, 1, Visible To Position Radius and Color);
					Event Player.Packapunch = 2;
					Call Subroutine(perkbuyanimation);
				Else If(Event Player.Packapunch == 2);
					Event Player.points -= 5000;
					Wait(0.250, Ignore Condition);
					Small Message(Event Player, Custom String("  you now get (+400%) damage with this hero"));
					Create Effect(All Players(Team 1), Echo Cloning Effect, Color(Green), Event Player, 1, Visible To Position Radius and Color);
					Event Player.Packapunch = 3;
					Call Subroutine(perkbuyanimation);
				End;
			Else If(Event Player.points < 5000);
				Small Message(Event Player, Custom String("  {0} How about pack a few points first!", Hero Icon String(Hero(Ramattra))));
			End;
		"headshot maniac"
		Else If(Distance Between(Event Player, Global.perkbuyrandomized[4]) < 2);
			"check this variable name"
			Event Player.Packapunch = 0;
			If(Event Player.points >= 4000);
				Event Player.points -= 4000;
				Clear Status(Event Player, Burning);
				"check this variable name"
				Event Player.damagevariable = 200;
				Event Player.Maniac = 1;
				Call Subroutine(perkbuyanimation);
			"double mag"
			Else If(Distance Between(Event Player, Global.perkbuyrandomized[5]) < 2);
				If(Event Player.points >= 2000);
					Event Player.points -= 2000;
					Event Player.doublemag = 1;
					Call Subroutine(perkbuyanimation);
				"double mag again?"
				Else If(Distance Between(Event Player, Global.perkbuyrandomized[6]) < 2);
					If(Event Player.points >= 2000);
						Event Player.points -= 2000;
						Event Player.doublemag = 1;
						Call Subroutine(perkbuyanimation);
					"sprint burst"
					Else If(Distance Between(Event Player, Global.perkbuyrandomized[7]) < 2);
						If(Event Player.points >= 2000);
							Event Player.points -= 2000;
							Event Player.sprintburstperk = 1;
							Call Subroutine(perkbuyanimation);
						End;
	}
}

rule("ultimate use check")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.currentultcharge = 0;
	}
}

rule("Ana pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
		Is In View Angle(Event Player, All Living Players(Team 1), 5) == True;
	}

	actions
	{
		Set Damage Dealt(Players in View Angle(Event Player, Team 1, 5), 1000);
		Wait(8, Ignore Condition);
		"need to make sure this gives the right players variable."
		Set Damage Dealt(All Players(Team 1), Event Player.damagevariable);
	}
}

rule("Ashe Pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ashe;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Event Was Critical Hit == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Burning, 4);
		Start Damage Over Time(Victim, Event Player, 4, 150);
	}
}

rule("Baptiste Pack a Punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
		Wait(0.016, Ignore Condition);
		Add Health Pool To Player(Event Player, Health, 100, False, False);
	}
}

rule("Bastion Pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Primary(Event Player) == True;
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(1.500, Abort When False);
		Loop If Condition Is True;
	}
}

disabled rule("use interact to give pack a punch (Dev testing)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Event Player.Packapunch = 1;
	}
}

rule("brigitte Pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Start Scaling Player(Event Player, 1.500, True);
		Add Health Pool To Player(Event Player, Health, 1000, False, False);
		Wait(8, Ignore Condition);
		Stop Scaling Player(Event Player);
		Remove All Health Pools From Player(Event Player);
	}
}

rule("brigitte Pack a punch 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.Packapunch >= 1;
		Has Status(Victim, Stunned) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 4);
	}
}

rule("Dva pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 400, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound, 0,
			25, 5, 0, All Living Players(Team 2), 0.500);
	}
}

rule("Doomfist Pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Set Status(Victim, Null, Knocked Down, 4);
	}
}

rule("echo pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		"needs more than 1 but will fix later"
		Create Homing Projectile(Echo Sticky Bomb, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Genji pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.Packapunch >= 1;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Create Projectile(Reinhardt Fire Strike, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player), To World,
			Damage, Team 2, 300, 1, 0, Bad Explosion, Explosion Sound, 0, 10, 5, 0, 0, 0);
	}
}

rule("Hanzo pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 8);
	}
}

rule("illari pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 4);
	}
}

rule("junker queen pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 4);
	}
}

rule("junkrat pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Victim, 8);
		Damage(Players Within Radius(Victim, 8, All Teams, Off), Attacker, 300);
	}
}

disabled rule("juno pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Echo Sticky Bomb, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound, 0,
			25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(0.150, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Kiriko pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Players Within Radius(Event Player, 15, Team 2, Off), 50);
		Wait(8, Ignore Condition);
		If(Global.roundnumber <= 6);
			Set Move Speed(All Players(Team 2), 52 + 8 * Global.roundnumber);
		Else If(Global.roundnumber > 6);
			Set Move Speed(All Players(Team 2), 100);
	}
}

rule("lifeweaver pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Players in View Angle(Event Player, Team 1, 5), Health, 100, False, False);
	}
}

rule("lucio pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 3, Team 2, Surfaces And Enemy Barriers), Event Player, Rooted, 3);
	}
}

rule("mauga pack a punch")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Mauga;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("mei pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}
}

rule("Mercy pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
		Damage(Players Within Radius(Victim, 5, Team 2, Off), Attacker, 400);
	}
}

rule("Moira pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 4);
		Wait(0.250, Ignore Condition);
	}
}

rule("Orisa pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Scaling Player(Event Player, 2, True);
		Set Damage Dealt(Event Player, 1000);
		Wait Until(False, 8);
		Start Scaling Player(Event Player, 1, True);
		Set Damage Dealt(Event Player, Event Player.damagevariable);
	}
}

rule("Pharah pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Ramattra pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		All Living Players(Team 1).points += 1000;
		All Living Players(Team 1).magazines += 5;
	}
}

rule("Reinhardt pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(All Living Players(Team 1), Event Player, Knocked Down, 8);
	}
}

rule("Roadhog pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Secondary(Event Player) == True;
		Ability Resource(Event Player, Button(Secondary Fire)) > 0;
	}

	actions
	{
		Start Heal Over Time(Players Within Radius(Event Player, 5, Team 1, Surfaces And Enemy Barriers), Event Player, 2, 20);
		Create Effect(All Players(Team 1), Ring, Color(Orange), Event Player, 5, Visible To Position and Radius);
		Wait Until(False, 5);
		Destroy Effect(Last Created Entity);
	}
}

rule("Sigma pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Damage(Players Within Radius(Victim, 5, All Teams, Off), Event Player, 200);
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
	}
}

rule("Sigma part 2 pack a punch")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Event Player.points += 50;
	}
}

rule("Sojourn pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 3, Team 2, Off), Event Player, Knocked Down, 4);
	}
}

rule("Soldier: 76 pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
	}
}

rule("Sombra pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		disabled Number Of Players(Team 1) > 1;
		Event Player.Packapunch >= 1;
		Is Firing Primary(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Wait(2, Abort When False);
		Event Player.T = 1;
		Wait(4, Ignore Condition);
		Event Player.T = 0;
	}
}

rule("Symmetra pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 10);
	}
}

rule("Torbjorn pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Communicating(Event Player, Need Healing) == True;
		Global.dispencerplaced == 0;
	}

	actions
	{
		Event Player.dispencereffect = Empty Array;
		Wait(0.016, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Green), Position Of(Event Player), 0.800, Visible To);
		Modify Player Variable(Event Player, dispencereffect, Append To Array, Last Created Entity);
		Wait(0.016, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Green), Vector(0, 1.300, 0) + Position Of(Event Player), 0.800, Visible To);
		Modify Player Variable(Event Player, dispencereffect, Append To Array, Last Created Entity);
		Wait(0.016, Ignore Condition);
		Create Effect(All Players(All Teams), Ring, Color(Green), Position Of(Event Player), 3.500, Visible To);
		Modify Player Variable(Event Player, dispencereffect, Append To Array, Last Created Entity);
		Global.dispencerposition = Evaluate Once(Position Of(Event Player));
		Global.dispencerplaced = 1;
		Wait(30, Ignore Condition);
		Global.dispencerplaced = 2;
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 60);
		Wait(0.100, Ignore Condition);
		Destroy Effect(Event Player.dispencereffect[0]);
		Destroy Effect(Event Player.dispencereffect[1]);
		Destroy Effect(Event Player.dispencereffect[2]);
		Wait(0.100, Ignore Condition);
		Modify Player Variable At Index(Event Player, dispencereffect, 0, Remove From Array By Index, 0);
		Modify Player Variable At Index(Event Player, dispencereffect, 1, Remove From Array By Index, 0);
		Modify Player Variable At Index(Event Player, dispencereffect, 2, Remove From Array By Index, 0);
		Wait(60, Ignore Condition);
		Global.dispencerplaced = 0;
	}
}

rule("Torbjorn part 2 pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.dispencerposition, 3.500, Team 1, Surfaces And Enemy Barriers) == True;
		Global.dispencerplaced == 1;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.currentmagazines += 0.200;
		Wait(0.500, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Tracer pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Evaluate Once(Position Of(Event Player)), 5, Team 2, Off), Event Player, Stunned, 4);
	}
}

rule("venture pack a punch")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Venture;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
		Damage(Players Within Radius(Victim, 5, All Teams, Off), Attacker, 400);
	}
}

rule("Widowmaker pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.T = 1;
		If(Number Of Players(Team 1) < 2);
			Wait Until(False, 4);
			Event Player.T = 0;
		Else If(Number Of Players(Team 1) >= 2);
			Wait Until(False, 16);
			Event Player.T = 0;
	}
}

rule("Winston pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Event Player, Unkillable, 10);
	}
}

rule("Wrecking ball pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Facing(Players Within Radius(Event Player, 20, Team 2, Off), Evaluate Once(Position Of(Event Player)), 100, To World,
			Direction and Turn Rate);
		Wait(6, Ignore Condition);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
			All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
			To World, Direction and Turn Rate);
	}
}

rule("follower subroutine")
{
	event
	{
		Subroutine;
		followerbuy;
	}

	actions
	{
		Destroy Dummy Bot(Team 1, Slot Of(Event Player) + 4);
		Wait(0.250, Ignore Condition);
		Create Dummy Bot(Event Player.followerbuy, Team 1, Slot Of(Event Player) + 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Wait(0.030, Ignore Condition);
		Attach Players(Players In Slot(Slot Of(Event Player) + 4, Team 1), Event Player, Vector(-0.500, 1.800, -0.200));
		Wait(0.100, Ignore Condition);
		Start Scaling Player(Players In Slot(Slot Of(Event Player) + 4, Team 1), 0.200, True);
		Start Modifying Hero Voice Lines(Slot Of(Event Player) + 4, 1.300, True);
		disabled Skip If(Global.experiencesystem == False, 2);
		disabled Event Player.XPlevel = 0;
		disabled Event Player.xp = 0;
	}
}

rule("202 Purchase Follower action")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Is True For Any(Global.herobuyrandomized, Distance Between(Current Array Element, Event Player)
			< Global.heroradius[Current Array Index]) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		"lucio"
		If(Distance Between(Event Player, Global.herobuyrandomized[0]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Lúcio);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} The beat drops, but the wallet doesn't.", Hero Icon String(Hero(Ramattra))));
			End;
		"hanzo"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[1]) < 2);
			If(Event Player.points >= 1250);
				Event Player.followerbuy = Hero(Hanzo);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1250;
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0}You require more points to fuel the dragon's fury.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"zenyatta"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[2]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Zenyatta);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} your emptiness hinders our path to enlightenment.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"soldier 76"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[3]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Soldier: 76);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Your mission requires adequate funding, soldier.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"mercy"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[4]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Mercy);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Your reserves are depleted, angel.", Hero Icon String(Hero(Ramattra))));
			End;
		"pharah"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[5]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Pharah);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Refuel the jetpack with more points, commander.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"junkrat"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[6]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Junkrat);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Your explosive plans require more points.", Hero Icon String(Hero(Ramattra))));
			End;
		"symmetra"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[7]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Symmetra);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Allocate more points for the realization of this vision.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"doomfist"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[8]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Doomfist);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Our path to dominance is blocked by insufficient funds.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"baptiste"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[9]) < 2);
			If(Event Player.points >= 1250);
				Event Player.followerbuy = Hero(Baptiste);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1250;
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} To heal and protect, we require sustenance.", Hero Icon String(Hero(Ramattra))));
			End;
		"bastion"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[10]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Bastion);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Boop beep boop?", Hero Icon String(Hero(Ramattra))));
			End;
		"reaper"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[11]) < 2);
			If(Event Player.points >= 1000);
				Event Player.followerbuy = Hero(Reaper);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1000;
			Else If(Event Player.points < 1000);
				Small Message(Event Player, Custom String("  {0} Feed this darkness with more points.", Hero Icon String(Hero(Ramattra))));
			End;
		"genji"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[12]) < 2);
			If(Event Player.points >= 1250);
				Event Player.followerbuy = Hero(Genji);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1250;
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} Your spirit is strong, but your balance is weak. Seek points.", Hero Icon String(
					Hero(Ramattra))));
			End;
		"ashe"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[13]) < 2);
			If(Event Player.points >= 1250);
				Event Player.followerbuy = Hero(Ashe);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1250;
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} This heist requires more capital, partner.", Hero Icon String(Hero(Ramattra))));
			End;
		"zarya"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[14]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Zarya);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Acquire more points to fuel your power.", Hero Icon String(Hero(Ramattra))));
			End;
		"roadhog"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[15]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Roadhog);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} No scrap metal without points, you know?", Hero Icon String(Hero(Ramattra))));
			End;
		"dva"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[16]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(D.Va);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0}  More points, or it's game over!", Hero Icon String(Hero(Ramattra))));
			End;
		"brig"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[17]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Brigitte);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Father would be disappointed.", Hero Icon String(Hero(Ramattra))));
			End;
		"rein"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[18]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Reinhardt);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Beer!", Hero Icon String(Hero(Ramattra))));
			End;
		"torb"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[19]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Torbjörn);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} My forge runs cold without fuel", Hero Icon String(Hero(Ramattra))));
			End;
		"sigma"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[20]) < 2);
			If(Event Player.points >= 1750);
				Event Player.followerbuy = Hero(Sigma);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1750;
			Else If(Event Player.points < 1750);
				Small Message(Event Player, Custom String("  {0} Our gravitational experiments require additional energy.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"orisa"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[21]) < 2);
			If(Event Player.points >= 1250);
				Event Player.followerbuy = Hero(Orisa);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1250;
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} Your systems require upgrades.", Hero Icon String(Hero(Ramattra))));
			End;
		"moira"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[22]) < 2);
			If(Event Player.points >= 1250);
				Event Player.followerbuy = Hero(Moira);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 1250;
			Else If(Event Player.points < 1250);
				Small Message(Event Player, Custom String("  {0} Acquire more points for scientific advancement.", Hero Icon String(Hero(
					Ramattra))));
			End;
		"mei"
		Else If(Distance Between(Event Player, Global.herobuyrandomized[23]) < 2);
			If(Event Player.points >= 30000);
				Event Player.followerbuy = Hero(Mei);
				Wait(0.016, Ignore Condition);
				Call Subroutine(followerbuy);
				Event Player.points -= 30000;
			Else If(Event Player.points < 30000);
				Small Message(Event Player, Custom String("  {0} My experiments require more cryogenic energy.", Hero Icon String(Hero(
					Ramattra))));
			End;
		End;
	}
}

rule("Zarya pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) == True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Else If(Is Using Ability 2(Event Player) == True);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("Zenyatta pack a punch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 10.500, Team 2, Surfaces And Enemy Barriers), Event Player, 300);
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Rule 292")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Server Load < 220;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Color(White), Event Player, 80);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Initial Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.AllPos = Empty Array;
		Global.AllDir = Empty Array;
		Global.firstpos = Empty Array;
		Global.secondpos = Empty Array;
		Global.firstpoint2 = Empty Array;
		Global.secondpoint2 = Empty Array;
		Global.second = Empty Array;
		Global.z = Empty Array;
		Global.Wall_ID = Empty Array;
		Global.g_beamType = Empty Array;
	}
}

rule("Initial Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.filterpos = False;
		Event Player.lastsavedpos = False;
		Event Player.closestbodypos = False;
		Event Player.fullbodypos = False;
		Event Player.prevpos_intersection = False;
		Event Player.active_wall = Empty Array;
		Event Player.closestwall = Empty Array;
	}
}

rule("Collision Logic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.lastsavedpos = (Eye Position(Event Player) + Position Of(Event Player)) / 2;
		Wait(Server Load Average / 255 * (0.340 - 0.032) + 0.032, Ignore Condition);
		Event Player.closestwall = Filtered Array(Global.AllPos, Distance Between(Global.AllPos[Current Array Index], Event Player)
			<= Distance Between(Global.AllPos[Current Array Index], Global.firstpos[Current Array Index])
			|| Event Player.active_wall[Current Array Index] == 1 || (Dot Product(Direction Towards(Current Array Element,
			Event Player.lastsavedpos), Global.AllDir[Current Array Index]) > 0) != (Dot Product(Direction Towards(Current Array Element,
			Event Player), Global.AllDir[Current Array Index]) > 0));
		For Player Variable(Event Player, x, 0, Count Of(Event Player.closestwall), 1);
			Global.z = Index Of Array Value(Global.AllPos, Event Player.closestwall[Event Player.x]);
			If(Global.Wall_ID[Global.z] == 1 || Global.Wall_ID[Global.z] == 3 || Global.Wall_ID[Global.z] == 5);
				If(Y Component Of(Global.firstpos[Global.z]) >= Y Component Of(Position Of(Event Player)) && Y Component Of(
					Global.firstpos[Global.z]) <= Y Component Of(Eye Position(Event Player) + Vector(Empty Array, 0.200, Empty Array)));
					Event Player.closestbodypos = Global.firstpos[Global.z];
				Else If(Y Component Of(Global.secondpos[Global.z]) >= Y Component Of(Position Of(Event Player)) && Y Component Of(
						Global.secondpos[Global.z]) <= Y Component Of(Eye Position(Event Player) + Vector(Empty Array, 0.200, Empty Array)));
					Event Player.closestbodypos = Global.secondpos[Global.z];
				Else;
					Event Player.closestbodypos = Position Of(Event Player);
				End;
				Event Player.fullbodypos = Vector(X Component Of(Eye Position(Event Player)), Y Component Of(Event Player.closestbodypos),
					Z Component Of(Eye Position(Event Player)));
				Event Player.filterpos = Event Player.fullbodypos + Global.AllDir[Global.z] * Dot Product(
					Global.AllPos[Global.z] - Event Player.fullbodypos, Global.AllDir[Global.z]) / Dot Product(Global.AllDir[Global.z],
					Global.AllDir[Global.z]);
				If(Global.Wall_ID[Global.z] == 1 || Global.Wall_ID[Global.z] == 3);
					If((Dot Product(Direction Towards(Global.AllPos[Global.z], Event Player.lastsavedpos), Global.AllDir[Global.z]) > 0) != (
						Dot Product(Direction Towards(Global.AllPos[Global.z], Event Player.fullbodypos), Global.AllDir[Global.z]) > 0));
						Event Player.intersection_length = Dot Product(Global.AllPos[Global.z] - Event Player.fullbodypos, Global.AllDir[Global.z])
							/ Dot Product(Direction Towards(Event Player.lastsavedpos, Event Player.fullbodypos), Global.AllDir[Global.z]);
						Event Player.prevpos_intersection = Event Player.fullbodypos + Direction Towards(Event Player.lastsavedpos,
							Event Player.fullbodypos) * Vector(1, Empty Array, 1) * Event Player.intersection_length;
						If(Dot Product(Direction Towards(Global.firstpos[Global.z], Vector(X Component Of(Global.secondpos[Global.z]), Y Component Of(
							Global.firstpos[Global.z]), Z Component Of(Global.secondpos[Global.z]))), Direction Towards(Global.firstpos[Global.z],
							Event Player.prevpos_intersection)) >= 0 && Dot Product(Direction Towards(Global.firstpos[Global.z], Vector(X Component Of(
							Global.firstpos[Global.z]), Y Component Of(Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))),
							Direction Towards(Global.firstpos[Global.z], Event Player.prevpos_intersection)) >= 0 && Dot Product(Direction Towards(
							Global.secondpos[Global.z], Vector(X Component Of(Global.secondpos[Global.z]), Y Component Of(Global.firstpos[Global.z]),
							Z Component Of(Global.secondpos[Global.z]))), Direction Towards(Global.secondpos[Global.z], Event Player.prevpos_intersection))
							>= 0 && Dot Product(Direction Towards(Global.secondpos[Global.z], Vector(X Component Of(Global.firstpos[Global.z]),
							Y Component Of(Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))), Direction Towards(
							Global.secondpos[Global.z], Event Player.prevpos_intersection)) >= 0);
							Cancel Primary Action(Event Player);
							Teleport(Event Player, Event Player.prevpos_intersection + Direction Towards(Event Player.prevpos_intersection,
								Event Player.lastsavedpos) * Vector(1, Empty Array, 1) * 2);
						End;
					End;
				End;
				Event Player.thickness = 0;
				If(Global.Wall_ID[Global.z] == 5);
					Event Player.thickness = 8;
				Else;
					Event Player.thickness = 4;
				End;
				If(Distance Between(Event Player.fullbodypos, Event Player.filterpos) <= Event Player.thickness && Dot Product(Direction Towards(
					Global.firstpos[Global.z], Vector(X Component Of(Global.secondpos[Global.z]), Y Component Of(Global.firstpos[Global.z]),
					Z Component Of(Global.secondpos[Global.z]))), Direction Towards(Global.firstpos[Global.z], Event Player.filterpos))
					>= 0 && Dot Product(Direction Towards(Global.firstpos[Global.z], Vector(X Component Of(Global.firstpos[Global.z]),
					Y Component Of(Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))), Direction Towards(
					Global.firstpos[Global.z], Event Player.filterpos)) >= 0 && Dot Product(Direction Towards(Global.secondpos[Global.z], Vector(
					X Component Of(Global.secondpos[Global.z]), Y Component Of(Global.firstpos[Global.z]), Z Component Of(
					Global.secondpos[Global.z]))), Direction Towards(Global.secondpos[Global.z], Event Player.filterpos)) >= 0 && Dot Product(
					Direction Towards(Global.secondpos[Global.z], Vector(X Component Of(Global.firstpos[Global.z]), Y Component Of(
					Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))), Direction Towards(Global.secondpos[Global.z],
					Event Player.filterpos)) >= 0);
					If(Event Player.active_wall[Global.z] == False);
						Event Player.active_wall[Global.z] = 1;
						If((Global.Wall_ID[Global.z] == 1 || Global.Wall_ID[Global.z] == 3) && Global.is_Grounded == False);
							Set Gravity(Event Player, 100);
						Else If(Global.Wall_ID[Global.z] == 5);
							Disable Movement Collision With Environment(Event Player, False);
						End;
					End;
					If(Global.Wall_ID[Global.z] == 1);
						Apply Impulse(Event Player, Direction Towards(Event Player.filterpos, Event Player.fullbodypos) * Vector(1, Empty Array, 1), 1,
							To World, Cancel Contrary Motion);
						Set Move Speed(Event Player, 100 - Dot Product(Direction Towards(Eye Position(Event Player), Eye Position(Event Player)
							+ World Vector Of(Throttle Of(Event Player), Event Player, Rotation)), Direction Towards(Event Player.filterpos,
							Event Player.fullbodypos) * -1) * 100);
					Else If(Global.Wall_ID[Global.z] == 3);
						Apply Impulse(Event Player, Direction Towards(Event Player.filterpos, Event Player.fullbodypos), Speed Of(Event Player) + Speed Of(
							Event Player), To World, Cancel Contrary Motion);
					End;
				Else;
					Event Player.active_wall[Global.z] = 0;
					Set Move Speed(Event Player, 100);
				End;
			End;
		End;
		Loop;
	}
}

rule("Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Filtered Array(Event Player.active_wall, Current Array Element != 0)) == 0;
	}

	actions
	{
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Wall_ID = Empty Array;
		Wait(0.032, Ignore Condition);
		disabled Global.AllPos = Array(Vector(-68.399, -142.469, -4.721), Vector(-83.908, -149.871, -7.150), Vector(-113.802, -141.123, -7.230),
			Vector(-59.005, -149.030, 33.906), Vector(-64.063, -149.031, 42.033), Vector(-68.098, -152.506, 29.691), Vector(-58.919,
			-153.048, 43.894), Vector(-52.614, -152.334, 59.998), Vector(-58.899, -152.969, 76.232), Vector(-49.338, -158.052, 59.948),
			Vector(-58, -159.006, 69.951), Vector(-57.995, -159.035, 49.963), Vector(-88.515, -157.096, 60.141), Vector(-119.161, -137.823,
			78.430), Vector(-118.822, -137.515, 41.529), Vector(-65.905, -153.003, 36.982), Vector(-65.810, -153.032, 83.003), Vector(
			-109.760, -146.025, 49.964), Vector(-109.797, -145.800, 70.192), Vector(-68.086, -152.458, 90.235), Vector(-58.967, -149.007,
			86.062), Vector(-100.992, -155.974, 71.602), Vector(-101.101, -156.074, 48.335), Vector(-64.118, -149.036, 77.955), Vector(
			319.402, 45.651, 153.953), Vector(304.797, 43.696, 144.066), Vector(281.467, 42.174, 144.977), Vector(258.523, 42.164,
			145.098), Vector(235.392, 43.603, 144.061), Vector(220.577, 45.627, 153.978), Vector(311.228, 47.173, 173.017), Vector(304.622,
			47.176, 160.122), Vector(309.076, 46.169, 186.934), Vector(300.946, 46.210, 191.985), Vector(239.112, 46.146, 191.971), Vector(
			231.078, 46.246, 187.033), Vector(228.805, 47.184, 173.040), Vector(235.363, 47.169, 160.032), Vector(304.819, 41.645,
			181.725), Vector(310.065, 61.439, 157.893), Vector(235.966, 41.762, 181.722), Vector(230.692, 59.558, 157.922), Vector(-80.031,
			-148.591, 18.812), Vector(-106.539, -140.923, 21.237), Vector(-98.316, -141.879, 27.365), Vector(-86.662, -146.147, 26.087),
			Vector(-88.781, -148.169, 44.427), Vector(-81.993, -147.304, 36.828), Vector(-59, -146.521, 11.071), Vector(-89.580, -146.031,
			1.410), Vector(-114.743, -132.932, 34.900), Vector(293.212, 56.037, 165.909), Vector(284.264, 57.238, 183.906), Vector(284.917,
			57.659, 215.064), Vector(246.685, 60.198, 165.641), Vector(256.809, 61.025, 184.126), Vector(257.654, 53.187, 208.158), Vector(
			269.951, 45.836, 181.572), Vector(-88.548, -148.066, 75.550), Vector(-82.249, -145.659, 82.982), Vector(-97.979, -142.592,
			92.272), Vector(-83.426, -145.527, 101.313), Vector(-68.310, -145.634, 126.418), Vector(-84.032, -148.543, 126.459), Vector(
			-112.964, -139.017, 125.988), Vector(-106.796, -141.692, 97.956), Vector(240.768, 4.635, -246.807), Vector(242.603, 1.732,
			-225.628), Vector(238.989, -7.469, -212.653), Vector(270.505, -12.171, -230), Vector(266.989, -13.165, -237.629), Vector(
			263.833, -11.426, -250.002), Vector(303.602, -10.829, -260.988), Vector(304.211, -11.500, -250.048), Vector(264.523, -10.700,
			-260.977), Vector(297.759, -12.250, -230), Vector(300.999, -13.157, -237.511), Vector(324.178, 0.848, -224.630), Vector(
			329.619, -7.576, -212.584), Vector(327.949, -0.501, -246.461));
		disabled Global.AllDir = Array(Vector(0.006, 0, -1), Vector(0.059, 0, -0.998), Vector(0.025, 0, -1), Vector(0.001, 0, -1), Vector(0.675, 0,
			-0.738), Vector(0.015, 0, 1), Vector(-0.003, 0, -1), Vector(-1, 0, -0.012), Vector(0.008, 0, -1), Vector(-1, 0, -0.011),
			Vector(-0.029, 0, -1), Vector(0.014, 0, 1), Vector(0.986, 0, 0.167), Vector(-0.962, 0, -0.272), Vector(-0.984, 0, 0.180),
			Vector(-0.998, 0, -0.064), Vector(-0.999, 0, 0.042), Vector(-0.022, 0, 1), Vector(-0.009, 0, -1), Vector(-0.010, 0, -1),
			Vector(-0.010, 0, 1), Vector(-0.009, 0, 1), Vector(-0.058, 0, 0.998), Vector(-0.682, 0, -0.731), Vector(0.917, 0, 0.399),
			Vector(0.921, 0, 0.391), Vector(-0.028, 0, -1), Vector(-0.018, 0, 1), Vector(0.920, 0, -0.392), Vector(0.947, 0, -0.322),
			Vector(-0.899, 0, -0.437), Vector(-0.360, 0, 0.933), Vector(-0.999, 0, -0.037), Vector(0.999, 0, 0.035), Vector(1, 0, 0.004),
			Vector(0.999, 0, -0.037), Vector(0.939, 0, -0.344), Vector(-0.354, 0, -0.935), Vector(-0.995, 0, -0.104), Vector(-0.881, 0,
			-0.472), Vector(0.999, 0, 0.048), Vector(0.949, 0, -0.316), Vector(0.949, 0, -0.315), Vector(0.997, 0, -0.073), Vector(-0.011,
			0, -1), Vector(-0.005, 0, -1), Vector(0.981, 0, 0.196), Vector(-0.998, 0, -0.056), Vector(-0.048, 0, 0.999), Vector(0.986, 0,
			-0.165), Vector(-0.472, 0, -0.882), Vector(-0.700, 0, 0.714), Vector(-0.916, 0, -0.401), Vector(-0.965, 0, 0.260), Vector(
			-0.732, 0, -0.681), Vector(-0.881, 0, 0.473), Vector(-0.989, 0, -0.150), Vector(-0.066, 0, 0.998), Vector(1, 0, 0.002), Vector(
			0.986, 0, 0.166), Vector(0.050, 0, -0.999), Vector(-0.999, 0, -0.042), Vector(0.113, 0, -0.994), Vector(0.057, 0, -0.998),
			Vector(0.060, 0, -0.998), Vector(0.998, 0, -0.057), Vector(-0.891, 0, 0.454), Vector(-0.969, 0, -0.247), Vector(-0.985, 0,
			-0.170), Vector(-1, 0, 0.005), Vector(0.041, 0, 0.999), Vector(1, 0, 0.017), Vector(1, 0, -0.013), Vector(-1, 0, -0.022),
			Vector(0.999, 0, 0.052), Vector(-1, 0, -0.025), Vector(-0.020, 0, 1), Vector(0.936, 0, -0.351), Vector(0.982, 0, -0.190),
			Vector(0.895, 0, 0.446));
		disabled Global.firstpos = Array(Vector(-64.782, -151.500, -4.700), Vector(-80.139, -154.261, -6.926), Vector(-97.052, -154.891, -6.809),
			Vector(-57.572, -150.421, 33.907), Vector(-63.019, -150.420, 42.989), Vector(-69.947, -154.385, 29.720), Vector(-57.545,
			-154.458, 43.890), Vector(-52.592, -154.253, 58.112), Vector(-57.482, -154.417, 76.243), Vector(-49.299, -160.548, 56.457),
			Vector(-56.562, -160.373, 69.910), Vector(-59.373, -160.420, 49.982), Vector(-89.212, -160.419, 64.262), Vector(-118.567,
			-152.098, 76.328), Vector(-119.183, -152.400, 39.559), Vector(-65.811, -154.408, 35.522), Vector(-65.869, -154.452, 81.569),
			Vector(-112.382, -152.429, 49.906), Vector(-107.191, -152.470, 70.169), Vector(-66.250, -154.298, 90.216), Vector(-60.359,
			-150.420, 86.049), Vector(-102.454, -157.430, 71.588), Vector(-102.568, -157.441, 48.250), Vector(-63.062, -150.443, 76.970),
			Vector(318.834, 44.251, 155.257), Vector(304.246, 42.349, 145.365), Vector(282.872, 40.773, 144.938), Vector(257.155, 40.773,
			145.073), Vector(235.926, 42.251, 145.315), Vector(221.032, 44.202, 155.317), Vector(311.844, 45.822, 171.749), Vector(303.294,
			45.742, 159.609), Vector(309.127, 44.790, 185.561), Vector(300.896, 44.776, 193.410), Vector(239.107, 44.744, 193.348), Vector(
			231.130, 44.943, 188.436), Vector(229.284, 45.773, 174.345), Vector(236.611, 45.773, 159.559), Vector(305.225, 39.904,
			177.847), Vector(311.903, 45.693, 154.464), Vector(235.782, 40.137, 185.574), Vector(231.827, 45.729, 161.327), Vector(-78.640,
			-154.221, 23), Vector(-106.224, -155.389, 25.528), Vector(-92.858, -155.191, 27.303), Vector(-84.072, -154.329, 26.075),
			Vector(-89.609, -159.373, 48.582), Vector(-81.853, -154.147, 34.320), Vector(-62, -153.484, 10.925), Vector(-89.141, -155.500,
			4.039), Vector(-111.694, -152.655, 33.267), Vector(288.825, 41.764, 161.606), Vector(286.787, 39.977, 178.139), Vector(279.720,
			41.437, 195.797), Vector(251.137, 42.113, 160.858), Vector(253.501, 40.106, 177.957), Vector(259.546, 41.684, 195.692), Vector(
			265.902, 43.618, 181.303), Vector(-88.556, -159.078, 79.691), Vector(-82.693, -154.377, 85.625), Vector(-92.225, -155.334,
			92.561), Vector(-83.244, -154.230, 97), Vector(-64.623, -151.188, 126.837), Vector(-80.064, -154.126, 126.684), Vector(-96.232,
			-154.537, 126.996), Vector(-106.557, -154.879, 102.114), Vector(239.511, -11.354, -249.274), Vector(244.101, -10.240,
			-231.512), Vector(239.364, -9.132, -214.828), Vector(270.490, -14.082, -232.740), Vector(265.522, -14.691, -237.570), Vector(
			263.810, -12.716, -248.635), Vector(303.629, -12.429, -258.841), Vector(304.240, -12.865, -251.353), Vector(264.411, -12.429,
			-258.819), Vector(297.828, -14.239, -232.740), Vector(299.526, -14.676, -237.541), Vector(326.184, -11.501, -219.274), Vector(
			330.029, -9.691, -210.462), Vector(326.661, -11.383, -243.875));
		disabled Global.secondpos = Array(Vector(-72.015, -133.438, -4.742), Vector(-87.676, -145.482, -7.374), Vector(-130.552, -127.356, -7.651),
			Vector(-60.437, -147.638, 33.904), Vector(-65.108, -147.642, 41.078), Vector(-66.250, -150.626, 29.663), Vector(-60.293,
			-151.638, 43.898), Vector(-52.636, -150.415, 61.884), Vector(-60.317, -151.520, 76.221), Vector(-49.377, -155.556, 63.440),
			Vector(-59.437, -157.639, 69.992), Vector(-56.617, -157.649, 49.943), Vector(-87.817, -153.773, 56.020), Vector(-119.756,
			-123.549, 80.532), Vector(-118.460, -122.630, 43.499), Vector(-65.999, -151.599, 38.441), Vector(-65.750, -151.611, 84.438),
			Vector(-107.138, -139.620, 50.022), Vector(-112.403, -139.129, 70.214), Vector(-69.921, -150.618, 90.254), Vector(-57.574,
			-147.593, 86.076), Vector(-99.530, -154.518, 71.616), Vector(-99.635, -154.706, 48.421), Vector(-65.174, -147.629, 78.941),
			Vector(319.970, 47.052, 152.649), Vector(305.349, 45.042, 142.767), Vector(280.063, 43.576, 145.016), Vector(259.892, 43.555,
			145.123), Vector(234.857, 44.955, 142.808), Vector(220.121, 47.052, 152.638), Vector(310.611, 48.525, 174.285), Vector(305.949,
			48.611, 160.634), Vector(309.025, 47.548, 188.308), Vector(300.996, 47.643, 190.561), Vector(239.117, 47.548, 190.595), Vector(
			231.025, 47.549, 185.629), Vector(228.327, 48.594, 171.736), Vector(234.116, 48.565, 160.505), Vector(304.413, 43.386,
			185.604), Vector(308.227, 77.185, 161.323), Vector(236.150, 43.386, 177.870), Vector(229.557, 73.388, 154.516), Vector(-81.421,
			-142.961, 14.625), Vector(-106.854, -126.457, 16.946), Vector(-103.774, -128.568, 27.426), Vector(-89.252, -137.965, 26.099),
			Vector(-87.952, -136.965, 40.273), Vector(-82.132, -140.460, 39.335), Vector(-56, -139.557, 11.217), Vector(-90.020, -136.562,
			-1.219), Vector(-117.792, -113.210, 36.532), Vector(297.600, 70.310, 170.211), Vector(281.740, 74.499, 189.673), Vector(
			290.115, 73.882, 234.331), Vector(242.232, 78.283, 170.424), Vector(260.117, 81.944, 190.294), Vector(255.763, 64.690,
			220.624), Vector(274, 48.053, 181.842), Vector(-88.539, -137.055, 71.409), Vector(-81.805, -136.942, 80.339), Vector(-103.733,
			-129.850, 91.983), Vector(-83.608, -136.825, 105.625), Vector(-71.996, -140.081, 126), Vector(-88, -142.959, 126.235), Vector(
			-129.696, -123.496, 124.979), Vector(-107.035, -128.504, 93.797), Vector(242.025, 20.623, -244.340), Vector(241.104, 13.704,
			-219.743), Vector(238.614, -5.805, -210.477), Vector(270.520, -10.260, -227.260), Vector(268.456, -11.638, -237.689), Vector(
			263.855, -10.135, -251.368), Vector(303.574, -9.229, -263.135), Vector(304.182, -10.135, -248.743), Vector(264.635, -8.972,
			-263.135), Vector(297.690, -10.260, -227.260), Vector(302.472, -11.638, -237.481), Vector(322.172, 13.197, -229.986), Vector(
			329.210, -5.461, -214.705), Vector(329.238, 10.382, -249.046));
		disabled Global.firstpoint2 = Array(Vector(-64.782, -133.438, -4.700), Vector(-80.139, -145.482, -6.926), Vector(-97.052, -127.356, -6.809),
			Vector(-57.572, -147.638, 33.907), Vector(-63.019, -147.642, 42.989), Vector(-69.947, -150.626, 29.720), Vector(-57.545,
			-151.638, 43.890), Vector(-52.592, -150.415, 58.112), Vector(-57.482, -151.520, 76.243), Vector(-49.299, -155.556, 56.457),
			Vector(-56.562, -157.639, 69.910), Vector(-59.373, -157.649, 49.982), Vector(-89.212, -153.773, 64.262), Vector(-118.567,
			-123.549, 76.328), Vector(-119.183, -122.630, 39.559), Vector(-65.811, -151.599, 35.522), Vector(-65.869, -151.611, 81.569),
			Vector(-112.382, -139.620, 49.906), Vector(-107.191, -139.129, 70.169), Vector(-66.250, -150.618, 90.216), Vector(-60.359,
			-147.593, 86.049), Vector(-102.454, -154.518, 71.588), Vector(-102.568, -154.706, 48.250), Vector(-63.062, -147.629, 76.970),
			Vector(318.834, 47.052, 155.257), Vector(304.246, 45.042, 145.365), Vector(282.872, 43.576, 144.938), Vector(257.155, 43.555,
			145.073), Vector(235.926, 44.955, 145.315), Vector(221.032, 47.052, 155.317), Vector(311.844, 48.525, 171.749), Vector(303.294,
			48.611, 159.609), Vector(309.127, 47.548, 185.561), Vector(300.896, 47.643, 193.410), Vector(239.107, 47.548, 193.348), Vector(
			231.130, 47.549, 188.436), Vector(229.284, 48.594, 174.345), Vector(236.611, 48.565, 159.559), Vector(305.225, 43.386,
			177.847), Vector(311.903, 77.185, 154.464), Vector(235.782, 43.386, 185.574), Vector(231.827, 73.388, 161.327), Vector(-78.640,
			-142.961, 23), Vector(-106.224, -126.457, 25.528), Vector(-92.858, -128.568, 27.303), Vector(-84.072, -137.965, 26.075),
			Vector(-89.609, -136.965, 48.582), Vector(-81.853, -140.460, 34.320), Vector(-62, -139.557, 10.925), Vector(-89.141, -136.562,
			4.039), Vector(-111.694, -113.210, 33.267), Vector(288.825, 70.310, 161.606), Vector(286.787, 74.499, 178.139), Vector(279.720,
			73.882, 195.797), Vector(251.137, 78.283, 160.858), Vector(253.501, 81.944, 177.957), Vector(259.546, 64.690, 195.692), Vector(
			265.902, 48.053, 181.303), Vector(-88.556, -137.055, 79.691), Vector(-82.693, -136.942, 85.625), Vector(-92.225, -129.850,
			92.561), Vector(-83.244, -136.825, 97), Vector(-64.623, -140.081, 126.837), Vector(-80.064, -142.959, 126.684), Vector(-96.232,
			-123.496, 126.996), Vector(-106.557, -128.504, 102.114), Vector(239.511, 20.623, -249.274), Vector(244.101, 13.704, -231.512),
			Vector(239.364, -5.805, -214.828), Vector(270.490, -10.260, -232.740), Vector(265.522, -11.638, -237.570), Vector(263.810,
			-10.135, -248.635), Vector(303.629, -9.229, -258.841), Vector(304.240, -10.135, -251.353), Vector(264.411, -8.972, -258.819),
			Vector(297.828, -10.260, -232.740), Vector(299.526, -11.638, -237.541), Vector(326.184, 13.197, -219.274), Vector(330.029,
			-5.461, -210.462), Vector(326.661, 10.382, -243.875));
		disabled Global.secondpoint2 = Array(Vector(-72.015, -151.500, -4.742), Vector(-87.676, -154.261, -7.374), Vector(-130.552, -154.891,
			-7.651), Vector(-60.437, -150.421, 33.904), Vector(-65.108, -150.420, 41.078), Vector(-66.250, -154.385, 29.663), Vector(
			-60.293, -154.458, 43.898), Vector(-52.636, -154.253, 61.884), Vector(-60.317, -154.417, 76.221), Vector(-49.377, -160.548,
			63.440), Vector(-59.437, -160.373, 69.992), Vector(-56.617, -160.420, 49.943), Vector(-87.817, -160.419, 56.020), Vector(
			-119.756, -152.098, 80.532), Vector(-118.460, -152.400, 43.499), Vector(-65.999, -154.408, 38.441), Vector(-65.750, -154.452,
			84.438), Vector(-107.138, -152.429, 50.022), Vector(-112.403, -152.470, 70.214), Vector(-69.921, -154.298, 90.254), Vector(
			-57.574, -150.420, 86.076), Vector(-99.530, -157.430, 71.616), Vector(-99.635, -157.441, 48.421), Vector(-65.174, -150.443,
			78.941), Vector(319.970, 44.251, 152.649), Vector(305.349, 42.349, 142.767), Vector(280.063, 40.773, 145.016), Vector(259.892,
			40.773, 145.123), Vector(234.857, 42.251, 142.808), Vector(220.121, 44.202, 152.638), Vector(310.611, 45.822, 174.285), Vector(
			305.949, 45.742, 160.634), Vector(309.025, 44.790, 188.308), Vector(300.996, 44.776, 190.561), Vector(239.117, 44.744,
			190.595), Vector(231.025, 44.943, 185.629), Vector(228.327, 45.773, 171.736), Vector(234.116, 45.773, 160.505), Vector(304.413,
			39.904, 185.604), Vector(308.227, 45.693, 161.323), Vector(236.150, 40.137, 177.870), Vector(229.557, 45.729, 154.516), Vector(
			-81.421, -154.221, 14.625), Vector(-106.854, -155.389, 16.946), Vector(-103.774, -155.191, 27.426), Vector(-89.252, -154.329,
			26.099), Vector(-87.952, -159.373, 40.273), Vector(-82.132, -154.147, 39.335), Vector(-56, -153.484, 11.217), Vector(-90.020,
			-155.500, -1.219), Vector(-117.792, -152.655, 36.532), Vector(297.600, 41.764, 170.211), Vector(281.740, 39.977, 189.673),
			Vector(290.115, 41.437, 234.331), Vector(242.232, 42.113, 170.424), Vector(260.117, 40.106, 190.294), Vector(255.763, 41.684,
			220.624), Vector(274, 43.618, 181.842), Vector(-88.539, -159.078, 71.409), Vector(-81.805, -154.377, 80.339), Vector(-103.733,
			-155.334, 91.983), Vector(-83.608, -154.230, 105.625), Vector(-71.996, -151.188, 126), Vector(-88, -154.126, 126.235), Vector(
			-129.696, -154.537, 124.979), Vector(-107.035, -154.879, 93.797), Vector(242.025, -11.354, -244.340), Vector(241.104, -10.240,
			-219.743), Vector(238.614, -9.132, -210.477), Vector(270.520, -14.082, -227.260), Vector(268.456, -14.691, -237.689), Vector(
			263.855, -12.716, -251.368), Vector(303.574, -12.429, -263.135), Vector(304.182, -12.865, -248.743), Vector(264.635, -12.429,
			-263.135), Vector(297.690, -14.239, -227.260), Vector(302.472, -14.676, -237.481), Vector(322.172, -11.501, -229.986), Vector(
			329.210, -9.691, -214.705), Vector(329.238, -11.383, -249.046));
		disabled For Global Variable(forindex, 0, 80, 1);
		disabled Global.Wall_ID[Global.forindex] = 1;
		disabled Wait(0.016, Ignore Condition);
		Global.Wall_ID = Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1);
		disabled End;
		Global.AllPos = Vector(-3.110, 2.500, -0.270);
		Global.firstpos = Vector(-0.110, 0, -0.250);
		Global.secondpos = Vector(-6.110, 5, -0.290);
		Global.firstpoint2 = Vector(-0.110, 5, -0.250);
		Global.secondpoint2 = Vector(-6.110, 0, 0.290);
		Global.AllDir = Direction From Angles(0, 0);
		Global.Beameffectdoors[0] = Vector(-0.110, 0, -0.250);
		Global.Beameffectdoors[1] = Vector(-6.110, 5, -0.290);
		Global.Beameffectdoors[2] = Vector(-0.110, 5, -0.250);
		Global.Beameffectdoors[3] = Vector(-6.110, 0, -0.290);
	}
}

disabled rule("all the effects (needs to be simplified and looped)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.start == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Global.Vectordoorpositions[Global.telespot], 3,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Global.teleportercolor, Global.Vectordoorpositions[Global.telespot], 3,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Good Aura, Global.teleportercolor, Global.Vectordoorpositions[Global.telespot], 1,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Good Aura, Global.teleportercolor, Global.Vectordoorpositions[Global.telespot], 2,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Sparkles, Global.teleportercolor, Global.Vectordoorpositions[Global.telespot], 3,
			Visible To Position Radius and Color);
		Create Effect(All Players(All Teams), Ring, Color(White), Global.Vectordoorpositions[Global.telespot], 2,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Global.Vectordoorpositions[Global.telespot], 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.Died[0], 4, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[0], Players In Slot(0, Team 1).C,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Green), Global.Died[1], 4, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[1], Players In Slot(1, Team 1).C,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Global.Died[2], 4, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[2], Players In Slot(2, Team 1).C,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Turquoise), Global.Died[3], 4, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[3], Players In Slot(3, Team 1).C,
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Revive: 1"), Global.Died[0], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Revive: 2"), Global.Died[1], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Revive: 3"), Global.Died[2], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("Revive: 4"), Global.Died[3], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		"mystery box"
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.rngbox, 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), Custom String("Mystery box: 950 points")),
			Global.rngbox, 1, Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.rngbox, 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.rngbox, 0.750, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Turquoise), Global.perkbuyrandomized[0], 2, Visible To Position and Radius);
		Global.powerconnected[0] = Last Created Entity;
		Create Icon(All Living Players(Team 1), Global.perkbuyrandomized[0], Bolt, Visible To and Position, Color(Yellow), True);
		Global.powerconnected[1] = Last Text ID;
		Create Effect(All Players(All Teams), Ring, Color(Red), Global.perkbuyrandomized[1], 1, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Juggernaut"), String("{0} {1}", 100, String(
			"{0}: {1}", String(""), 2500))), Global.perkbuyrandomized[1], 1, Clip Against Surfaces, Visible To Position and String, Color(
			White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Red), Global.perkbuyrandomized[2], 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Pack-a-Punch"), String("{0} {1}", 100, String(
			"{0}: {1}", String(""), 5000))), Global.perkbuyrandomized[2], 1, Clip Against Surfaces, Visible To Position and String, Color(
			Red), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.perkbuyrandomized[3], 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("passive & healing dealt buff: 6000 points"),
			Global.perkbuyrandomized[3], 1, Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Global.perkbuyrandomized[4], 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Headshot maniac"), String("{0} {1}", Custom String(
			"50% to 400%"), String("{0}: {1}", String(""), 4000))), Global.perkbuyrandomized[4], 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.perkbuyrandomized[5], 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Revive self (coop only): 4000 points"), Global.perkbuyrandomized[5], 1,
			Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Double-mag"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Global.perkbuyrandomized[6], 1, Clip Against Surfaces, Visible To Position and String, Color(
			White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.perkbuyrandomized[6], 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Sprint burst"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Global.perkbuyrandomized[7], 1, Clip Against Surfaces, Visible To Position and String, Color(
			White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Global.perkbuyrandomized[9], 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Omnic bomb"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2500))), Global.perkbuyrandomized[9], 1, Clip Against Surfaces, Visible To Position and String, Color(
			White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[4], 2, Visible To);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Mercy)), 1000)), Global.herobuyrandomized[4], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[0], 2, Visible To);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Lúcio)), 1000)), Global.herobuyrandomized[0], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[3], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Soldier: 76)), 1000)), Global.herobuyrandomized[3], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[1], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Hanzo)), 1250)), Global.herobuyrandomized[1], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[2], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Zenyatta)), 1000)), Global.herobuyrandomized[2], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[5], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Pharah)), 1000)), Global.herobuyrandomized[5], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[6], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0} -- Hold {1} For Follower",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload))), String("{0}: {1}", Hero Icon String(Hero(
			Junkrat)), 1250)), Global.herobuyrandomized[6], 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[8], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Doomfist)), 500 + 500)), Global.herobuyrandomized[8], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[9], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Baptiste)), 1250)), Global.herobuyrandomized[9], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[10], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Bastion)), 1000 + 750)), Global.herobuyrandomized[10], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[11], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Reaper)), 1000)), Global.herobuyrandomized[11], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[7], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Symmetra)), 1000 + 750)), Global.herobuyrandomized[7], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[14], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Zarya)), 1750)), Global.herobuyrandomized[14], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[13], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Ashe)), 1250)), Global.herobuyrandomized[13], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[12], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Genji)), 1250)), Global.herobuyrandomized[12], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[15], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Roadhog)), 1750)), Global.herobuyrandomized[15], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[16], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(D.Va)), 1750)), Global.herobuyrandomized[16], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[17], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Brigitte)), 1750)), Global.herobuyrandomized[17], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[18], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Reinhardt)), 750 + 1000)), Global.herobuyrandomized[18], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[19], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Torbjörn)), 1000 + 750)), Global.herobuyrandomized[19], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[20], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Sigma)), 1000 + 750)), Global.herobuyrandomized[20], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[21], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Orisa)), 1250 * 1)), Global.herobuyrandomized[21], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[23], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Mei)), 30000)), Global.herobuyrandomized[23], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.herobuyrandomized[22], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press {0}", Input Binding String(Button(Interact))),
			String("{0}: {1}", Hero Icon String(Hero(Moira)), 1250)), Global.herobuyrandomized[22], 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-83.799, -160.001, 64.224), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Bastion Trap: press {0}", Input Binding String(
			Button(Interact))), String("{0}: {1}", Hero Icon String(Hero(Bastion)), 1000)), Vector(-83.763, -158.950, 64.107), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.rngbox2, 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), Custom String("Fairy mystery box: 950 points")),
			Global.rngbox2, 1, Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.rngbox2, 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.rngbox2, 0.250, Visible To Position and Radius);
	}
}

rule("Dev Decompressed hud")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Local Player, Custom String("firstpos {0} secondpos {1} firstpos2 {2}", Global.firstpos[0], Global.secondpos[0],
			Global.firstpoint2[0]), Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Local Player, Custom String("allpos {0} alldir {1} secondpoint2 {2}", Global.AllPos[0], Global.AllDir[0],
			Global.secondpoint2[0]), Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
	}
}

rule("Decompress string")
{
	event
	{
		Subroutine;
		DecompressString;
	}

	actions
	{
		Global.decompressed = Mapped Array(Global.compressedData, String Split(Current Array Element, Custom String(",")));
		Global.compressedData = Empty Array;
		For Global Variable(i, 0, Count Of(Global.decompressed), 1);
			Modify Global Variable(compressedData, Append To Array, Global.decompressed[Global.i]);
		End;
		Global.decompressed = Empty Array;
		For Global Variable(i, 0, Count Of(Global.compressedData), 1);
			If(Char In String(Global.compressedData[Global.i], 0) == Custom String("v"));
				Global.compressedData[Global.i] = String Slice(Global.compressedData[Global.i], 1, 999);
				Call Subroutine(ParseNumber);
				Global.scratch[0] = Global.param0;
				Global.i += 1;
				Call Subroutine(ParseNumber);
				Global.scratch[1] = Global.param0;
				Global.i += 1;
				Call Subroutine(ParseNumber);
				Global.scratch[2] = Global.param0;
				Modify Global Variable(decompressed, Append To Array, Vector(Global.scratch[0], Global.scratch[1], Global.scratch[2]));
			Else If(Char In String(Global.compressedData[Global.i], 0) == Custom String("c"));
				Modify Global Variable(decompressed, Append To Array, Global.colors[Index Of String Char(Global.numbers, Char In String(
					Global.compressedData[Global.i], 1))]);
			Else If(Char In String(Global.compressedData[Global.i], 0) == Custom String("$"));
				Modify Global Variable(decompressed, Append To Array, String Slice(Global.compressedData[Global.i], 1, 999));
			Else;
				Call Subroutine(ParseNumber);
				Modify Global Variable(decompressed, Append To Array, Global.param0);
			End;
		End;
		Global.compressedData = Null;
	}
}

rule("Parse number")
{
	event
	{
		Subroutine;
		ParseNumber;
	}

	actions
	{
		Global.param0 = 0;
		Global.param1 = 0;
		Global.param2 = 1;
		Global.param3 = 0;
		Global.param4 = Null;
		For Global Variable(charIndex, 0, String Length(Global.compressedData[Global.i]), 1);
			Global.param4 = Char In String(Global.compressedData[Global.i], Global.charIndex);
			If(Global.param4 == Custom String("-"));
				Global.param2 *= -1;
			Else If(Global.param4 == Custom String("."));
				Global.param3 = 10;
			Else;
				Global.param1 = Index Of String Char(Global.numbers, Global.param4);
				If(Global.param1 != -1);
					If(Global.param3 == 0);
						Global.param0 = Global.param0 * 10 + Global.param1;
					Else;
						Global.param0 += Global.param1 / Global.param3;
						Global.param3 *= 10;
					End;
				End;
			End;
		End;
		Global.param0 *= Global.param2;
	}
}

rule("set arrays")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.numbers = Custom String("0123456789abcdef");
		Global.compressedData = Custom String("{0}", Custom String("v132,0,304,4,4,90,1,5,5"));
		Call Subroutine(DecompressString);
		Global.doorscompresser = Global.decompressed;
	}
}

rule("use data from original point of door")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		For Global Variable(i, 0, Count Of(Global.doorscompresser), 1);
			"first point - bottom left"
			Modify Global Variable(Beameffectdoors, Append To Array, Global.doorscompresser[Global.i]);
			"top right point"
			Modify Global Variable(Beameffectdoors, Append To Array, Global.doorscompresser[Global.i] + Direction From Angles(
				Global.doorscompresser[Global.i + 3], 0) * Global.doorscompresser[Global.i + 2] + Up * Global.doorscompresser[Global.i + 1]);
			"top left point"
			Modify Global Variable(Beameffectdoors, Append To Array,
				Global.doorscompresser[Global.i] + Up * Global.doorscompresser[Global.i + 2]);
			"bottom right point"
			Modify Global Variable(Beameffectdoors, Append To Array, Global.doorscompresser[Global.i] + Direction From Angles(
				Global.doorscompresser[Global.i + 3], 0) * Global.doorscompresser[Global.i + 2]);
			disabled Modify Global Variable(firstpos, Append To Array, Global.doorscompresser[Global.i]);
			"accounts for 2nd point using first point, angle and width."
			disabled Modify Global Variable(secondpos, Append To Array, Global.doorscompresser[Global.i] + Direction From Angles(
				Global.doorscompresser[Global.i + 3], 0) * Global.doorscompresser[Global.i + 2]);
			disabled Modify Global Variable(firstpoint2, Append To Array, Global.doorscompresser[Global.i] + Up * 1000);
			disabled Modify Global Variable(secondpoint2, Append To Array, Global.doorscompresser[Global.i] + Direction From Angles(
				Global.doorscompresser[Global.i + 4] * Global.doorscompresser[Global.i + 3], 0) + Up * 1000);
			disabled Global.i += 1;
			"do something with width"
			disabled Global.roundnumber = 0;
			disabled Global.i += 1;
			"do something with height"
			disabled Global.roundnumber = 0;
			disabled Global.i += 1;
			"do something with angle"
			disabled Global.roundnumber = 0;
			Modify Global Variable(AllDir, Append To Array, Direction From Angles(Global.doorscompresser[Global.i + 3] + 90, 0));
			disabled Global.i += 1;
			disabled If(Global.doorscompresser[Global.i] == 1);
			disabled Global.i += 1;
			"do something with width"
			disabled Global.roundnumber = 0;
			disabled Global.i += 1;
			"do something with height"
			disabled Global.roundnumber = 0;
			disabled Global.roundnumber = Up;
			"first point - bottom left"
			Modify Global Variable(firstpos, Append To Array, Global.doorscompresser[Global.i]);
			"top right point"
			Modify Global Variable(secondpos, Append To Array, Global.doorscompresser[Global.i] + Direction From Angles(
				Global.doorscompresser[Global.i + 3], 0) * Global.doorscompresser[Global.i + 2] + Up * Global.doorscompresser[Global.i + 1]);
			"top left point"
			Modify Global Variable(firstpoint2, Append To Array, Global.doorscompresser[Global.i] + Up * Global.doorscompresser[Global.i + 2]);
			"bottom right point"
			Modify Global Variable(secondpoint2, Append To Array, Global.doorscompresser[Global.i] + Direction From Angles(
				Global.doorscompresser[Global.i + 3], 0) * Global.doorscompresser[Global.i + 2]);
			Modify Global Variable(AllPos, Append To Array, (Global.firstpos[Global.i] + Global.secondpos[Global.i]) / 2);
	}
}

rule("Rule 302")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Local Player, Custom String("position of player: {0}", Position Of(Host Player)), Null, Null, Left, 0, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("Rule 303")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(0, 0, 0));
	}
}