variables
{
	global:
	    82: _arrayBuilder
		83: AllPos
		84: AllDir
		85: firstpos
		86: secondpos
		87: firstpoint2
		88: secondpoint2
	    89: second
		90: z
		91: Wall_ID
		92: showwalls
		93: is_Grounded
		94: g_beamType

	player:
		69: filterpos
		70: lastsavedpos
		71: closestbodypos
		72: fullbodypos
		73: prevpos_intersection
		74: active_wall
		75: closestwall
		76: x
		77: intersection_length
		78: thickness
}

rule("Initial Global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.AllPos = Empty Array;
		Global.AllDir = Empty Array;
		Global.firstpos = Empty Array;
		Global.secondpos = Empty Array;
		Global.firstpoint2 = Empty Array;
		Global.secondpoint2 = Empty Array;
		Global.second = Empty Array;
		Global.z = Empty Array;
		Global.Wall_ID = Empty Array;
		Global.g_beamType = Empty Array;
	}
}

rule("Initial Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.filterpos = False;
		Event Player.lastsavedpos = False;
		Event Player.closestbodypos = False;
		Event Player.fullbodypos = False;
		Event Player.prevpos_intersection = False;
		Event Player.active_wall = Empty Array;
		Event Player.closestwall = Empty Array;
	}
}

rule("Collision Logic")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.lastsavedpos = (Eye Position(Event Player) + Position Of(Event Player)) / 2;
		Wait(Server Load Average / 255 * (0.340 - 0.032) + 0.032, Ignore Condition);
		Event Player.closestwall = Filtered Array(Global.AllPos, Distance Between(Global.AllPos[Current Array Index], Event Player)
			<= Distance Between(Global.AllPos[Current Array Index], Global.firstpos[Current Array Index])
			|| Event Player.active_wall[Current Array Index] == 1 || (Dot Product(Direction Towards(Current Array Element,
			Event Player.lastsavedpos), Global.AllDir[Current Array Index]) > 0) != (Dot Product(Direction Towards(Current Array Element,
			Event Player), Global.AllDir[Current Array Index]) > 0));
		For Player Variable(Event Player, x, 0, Count Of(Event Player.closestwall), 1);
			Global.z = Index Of Array Value(Global.AllPos, Event Player.closestwall[Event Player.x]);
			If(Global.Wall_ID[Global.z] == 1 || Global.Wall_ID[Global.z] == 3 || Global.Wall_ID[Global.z] == 5);
				If(Y Component Of(Global.firstpos[Global.z]) >= Y Component Of(Position Of(Event Player)) && Y Component Of(
					Global.firstpos[Global.z]) <= Y Component Of(Eye Position(Event Player) + Vector(Empty Array, 0.200, Empty Array)));
					Event Player.closestbodypos = Global.firstpos[Global.z];
				Else If(Y Component Of(Global.secondpos[Global.z]) >= Y Component Of(Position Of(Event Player)) && Y Component Of(
						Global.secondpos[Global.z]) <= Y Component Of(Eye Position(Event Player) + Vector(Empty Array, 0.200, Empty Array)));
					Event Player.closestbodypos = Global.secondpos[Global.z];
				Else;
					Event Player.closestbodypos = Position Of(Event Player);
				End;
				Event Player.fullbodypos = Vector(X Component Of(Eye Position(Event Player)), Y Component Of(Event Player.closestbodypos),
					Z Component Of(Eye Position(Event Player)));
				Event Player.filterpos = Event Player.fullbodypos + Global.AllDir[Global.z] * Dot Product(
					Global.AllPos[Global.z] - Event Player.fullbodypos, Global.AllDir[Global.z]) / Dot Product(Global.AllDir[Global.z],
					Global.AllDir[Global.z]);
				If(Global.Wall_ID[Global.z] == 1 || Global.Wall_ID[Global.z] == 3);
					If((Dot Product(Direction Towards(Global.AllPos[Global.z], Event Player.lastsavedpos), Global.AllDir[Global.z]) > 0) != (
						Dot Product(Direction Towards(Global.AllPos[Global.z], Event Player.fullbodypos), Global.AllDir[Global.z]) > 0));
						Event Player.intersection_length = Dot Product(Global.AllPos[Global.z] - Event Player.fullbodypos, Global.AllDir[Global.z])
							/ Dot Product(Direction Towards(Event Player.lastsavedpos, Event Player.fullbodypos), Global.AllDir[Global.z]);
						Event Player.prevpos_intersection = Event Player.fullbodypos + Direction Towards(Event Player.lastsavedpos,
							Event Player.fullbodypos) * Vector(1, Empty Array, 1) * Event Player.intersection_length;
						If(Dot Product(Direction Towards(Global.firstpos[Global.z], Vector(X Component Of(Global.secondpos[Global.z]), Y Component Of(
							Global.firstpos[Global.z]), Z Component Of(Global.secondpos[Global.z]))), Direction Towards(Global.firstpos[Global.z],
							Event Player.prevpos_intersection)) >= 0 && Dot Product(Direction Towards(Global.firstpos[Global.z], Vector(X Component Of(
							Global.firstpos[Global.z]), Y Component Of(Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))),
							Direction Towards(Global.firstpos[Global.z], Event Player.prevpos_intersection)) >= 0 && Dot Product(Direction Towards(
							Global.secondpos[Global.z], Vector(X Component Of(Global.secondpos[Global.z]), Y Component Of(Global.firstpos[Global.z]),
							Z Component Of(Global.secondpos[Global.z]))), Direction Towards(Global.secondpos[Global.z], Event Player.prevpos_intersection))
							>= 0 && Dot Product(Direction Towards(Global.secondpos[Global.z], Vector(X Component Of(Global.firstpos[Global.z]),
							Y Component Of(Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))), Direction Towards(
							Global.secondpos[Global.z], Event Player.prevpos_intersection)) >= 0);
							Cancel Primary Action(Event Player);
							Teleport(Event Player, Event Player.prevpos_intersection + Direction Towards(Event Player.prevpos_intersection,
								Event Player.lastsavedpos) * Vector(1, Empty Array, 1) * 2);
						End;
					End;
				End;
				Event Player.thickness = 0;
				If(Global.Wall_ID[Global.z] == 5);
					Event Player.thickness = 8;
				Else;
					Event Player.thickness = 4;
				End;
				If(Distance Between(Event Player.fullbodypos, Event Player.filterpos) <= Event Player.thickness && Dot Product(Direction Towards(
					Global.firstpos[Global.z], Vector(X Component Of(Global.secondpos[Global.z]), Y Component Of(Global.firstpos[Global.z]),
					Z Component Of(Global.secondpos[Global.z]))), Direction Towards(Global.firstpos[Global.z], Event Player.filterpos))
					>= 0 && Dot Product(Direction Towards(Global.firstpos[Global.z], Vector(X Component Of(Global.firstpos[Global.z]),
					Y Component Of(Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))), Direction Towards(
					Global.firstpos[Global.z], Event Player.filterpos)) >= 0 && Dot Product(Direction Towards(Global.secondpos[Global.z], Vector(
					X Component Of(Global.secondpos[Global.z]), Y Component Of(Global.firstpos[Global.z]), Z Component Of(
					Global.secondpos[Global.z]))), Direction Towards(Global.secondpos[Global.z], Event Player.filterpos)) >= 0 && Dot Product(
					Direction Towards(Global.secondpos[Global.z], Vector(X Component Of(Global.firstpos[Global.z]), Y Component Of(
					Global.secondpos[Global.z]), Z Component Of(Global.firstpos[Global.z]))), Direction Towards(Global.secondpos[Global.z],
					Event Player.filterpos)) >= 0);
					If(Event Player.active_wall[Global.z] == False);
						Event Player.active_wall[Global.z] = 1;
						If((Global.Wall_ID[Global.z] == 1 || Global.Wall_ID[Global.z] == 3) && Global.is_Grounded == False);
							Set Gravity(Event Player, 100);
						Else If(Global.Wall_ID[Global.z] == 5);
							Disable Movement Collision With Environment(Event Player, False);
						End;
					End;
					If(Global.Wall_ID[Global.z] == 1);
						Apply Impulse(Event Player, Direction Towards(Event Player.filterpos, Event Player.fullbodypos) * Vector(1, Empty Array, 1), 1,
							To World, Cancel Contrary Motion);
						Set Move Speed(Event Player, 100 - Dot Product(Direction Towards(Eye Position(Event Player), Eye Position(Event Player)
							+ World Vector Of(Throttle Of(Event Player), Event Player, Rotation)), Direction Towards(Event Player.filterpos,
							Event Player.fullbodypos) * -1) * 100);
					Else If(Global.Wall_ID[Global.z] == 3);
						Apply Impulse(Event Player, Direction Towards(Event Player.filterpos, Event Player.fullbodypos), Speed Of(Event Player) + Speed Of(Event Player), To World,
							Cancel Contrary Motion);
					End;
				Else;
					Event Player.active_wall[Global.z] = 0;
					Set Move Speed(Event Player, 100);
				End;
			End;
		End;
		Loop;
	}
}

rule("Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Count Of(Filtered Array(Event Player.active_wall, Current Array Element != 0)) == 0;
	}

	actions
	{
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("Rule 6")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Wall_ID = Empty Array;
		Wait(0.032, Ignore Condition);
		Global.AllPos = Array(Vector(-68.399, -142.469, -4.721), Vector(-83.908, -149.871, -7.150), Vector(-113.802, -141.123, -7.230),
			Vector(-59.005, -149.030, 33.906), Vector(-64.063, -149.031, 42.033), Vector(-68.098, -152.506, 29.691), Vector(-58.919,
			-153.048, 43.894), Vector(-52.614, -152.334, 59.998), Vector(-58.899, -152.969, 76.232), Vector(-49.338, -158.052, 59.948),
			Vector(-58, -159.006, 69.951), Vector(-57.995, -159.035, 49.963), Vector(-88.515, -157.096, 60.141), Vector(-119.161, -137.823,
			78.430), Vector(-118.822, -137.515, 41.529), Vector(-65.905, -153.003, 36.982), Vector(-65.810, -153.032, 83.003), Vector(
			-109.760, -146.025, 49.964), Vector(-109.797, -145.800, 70.192), Vector(-68.086, -152.458, 90.235), Vector(-58.967, -149.007,
			86.062), Vector(-100.992, -155.974, 71.602), Vector(-101.101, -156.074, 48.335), Vector(-64.118, -149.036, 77.955), Vector(
			319.402, 45.651, 153.953), Vector(304.797, 43.696, 144.066), Vector(281.467, 42.174, 144.977), Vector(258.523, 42.164,
			145.098), Vector(235.392, 43.603, 144.061), Vector(220.577, 45.627, 153.978), Vector(311.228, 47.173, 173.017), Vector(304.622,
			47.176, 160.122), Vector(309.076, 46.169, 186.934), Vector(300.946, 46.210, 191.985), Vector(239.112, 46.146, 191.971), Vector(
			231.078, 46.246, 187.033), Vector(228.805, 47.184, 173.040), Vector(235.363, 47.169, 160.032), Vector(304.819, 41.645,
			181.725), Vector(310.065, 61.439, 157.893), Vector(235.966, 41.762, 181.722), Vector(230.692, 59.558, 157.922), Vector(-80.031,
			-148.591, 18.812), Vector(-106.539, -140.923, 21.237), Vector(-98.316, -141.879, 27.365), Vector(-86.662, -146.147, 26.087),
			Vector(-88.781, -148.169, 44.427), Vector(-81.993, -147.304, 36.828), Vector(-59, -146.521, 11.071), Vector(-89.580, -146.031,
			1.410), Vector(-114.743, -132.932, 34.900), Vector(293.212, 56.037, 165.909), Vector(284.264, 57.238, 183.906), Vector(284.917,
			57.659, 215.064), Vector(246.685, 60.198, 165.641), Vector(256.809, 61.025, 184.126), Vector(257.654, 53.187, 208.158), Vector(
			269.951, 45.836, 181.572), Vector(-88.548, -148.066, 75.550), Vector(-82.249, -145.659, 82.982), Vector(-97.979, -142.592,
			92.272), Vector(-83.426, -145.527, 101.313), Vector(-68.310, -145.634, 126.418), Vector(-84.032, -148.543, 126.459), Vector(
			-112.964, -139.017, 125.988), Vector(-106.796, -141.692, 97.956), Vector(240.768, 4.635, -246.807), Vector(242.603, 1.732,
			-225.628), Vector(238.989, -7.469, -212.653), Vector(270.505, -12.171, -230), Vector(266.989, -13.165, -237.629), Vector(
			263.833, -11.426, -250.002), Vector(303.602, -10.829, -260.988), Vector(304.211, -11.500, -250.048), Vector(264.523, -10.700,
			-260.977), Vector(297.759, -12.250, -230), Vector(300.999, -13.157, -237.511), Vector(324.178, 0.848, -224.630), Vector(
			329.619, -7.576, -212.584), Vector(327.949, -0.501, -246.461));
		Global.AllDir = Array(Vector(0.006, 0, -1), Vector(0.059, 0, -0.998), Vector(0.025, 0, -1), Vector(0.001, 0, -1), Vector(0.675, 0,
			-0.738), Vector(0.015, 0, 1), Vector(-0.003, 0, -1), Vector(-1, 0, -0.012), Vector(0.008, 0, -1), Vector(-1, 0, -0.011),
			Vector(-0.029, 0, -1), Vector(0.014, 0, 1), Vector(0.986, 0, 0.167), Vector(-0.962, 0, -0.272), Vector(-0.984, 0, 0.180),
			Vector(-0.998, 0, -0.064), Vector(-0.999, 0, 0.042), Vector(-0.022, 0, 1), Vector(-0.009, 0, -1), Vector(-0.010, 0, -1),
			Vector(-0.010, 0, 1), Vector(-0.009, 0, 1), Vector(-0.058, 0, 0.998), Vector(-0.682, 0, -0.731), Vector(0.917, 0, 0.399),
			Vector(0.921, 0, 0.391), Vector(-0.028, 0, -1), Vector(-0.018, 0, 1), Vector(0.920, 0, -0.392), Vector(0.947, 0, -0.322),
			Vector(-0.899, 0, -0.437), Vector(-0.360, 0, 0.933), Vector(-0.999, 0, -0.037), Vector(0.999, 0, 0.035), Vector(1, 0, 0.004),
			Vector(0.999, 0, -0.037), Vector(0.939, 0, -0.344), Vector(-0.354, 0, -0.935), Vector(-0.995, 0, -0.104), Vector(-0.881, 0,
			-0.472), Vector(0.999, 0, 0.048), Vector(0.949, 0, -0.316), Vector(0.949, 0, -0.315), Vector(0.997, 0, -0.073), Vector(-0.011,
			0, -1), Vector(-0.005, 0, -1), Vector(0.981, 0, 0.196), Vector(-0.998, 0, -0.056), Vector(-0.048, 0, 0.999), Vector(0.986, 0,
			-0.165), Vector(-0.472, 0, -0.882), Vector(-0.700, 0, 0.714), Vector(-0.916, 0, -0.401), Vector(-0.965, 0, 0.260), Vector(
			-0.732, 0, -0.681), Vector(-0.881, 0, 0.473), Vector(-0.989, 0, -0.150), Vector(-0.066, 0, 0.998), Vector(1, 0, 0.002), Vector(
			0.986, 0, 0.166), Vector(0.050, 0, -0.999), Vector(-0.999, 0, -0.042), Vector(0.113, 0, -0.994), Vector(0.057, 0, -0.998),
			Vector(0.060, 0, -0.998), Vector(0.998, 0, -0.057), Vector(-0.891, 0, 0.454), Vector(-0.969, 0, -0.247), Vector(-0.985, 0,
			-0.170), Vector(-1, 0, 0.005), Vector(0.041, 0, 0.999), Vector(1, 0, 0.017), Vector(1, 0, -0.013), Vector(-1, 0, -0.022),
			Vector(0.999, 0, 0.052), Vector(-1, 0, -0.025), Vector(-0.020, 0, 1), Vector(0.936, 0, -0.351), Vector(0.982, 0, -0.190),
			Vector(0.895, 0, 0.446));
		Global.firstpos = Array(Vector(-64.782, -151.500, -4.700), Vector(-80.139, -154.261, -6.926), Vector(-97.052, -154.891, -6.809),
			Vector(-57.572, -150.421, 33.907), Vector(-63.019, -150.420, 42.989), Vector(-69.947, -154.385, 29.720), Vector(-57.545,
			-154.458, 43.890), Vector(-52.592, -154.253, 58.112), Vector(-57.482, -154.417, 76.243), Vector(-49.299, -160.548, 56.457),
			Vector(-56.562, -160.373, 69.910), Vector(-59.373, -160.420, 49.982), Vector(-89.212, -160.419, 64.262), Vector(-118.567,
			-152.098, 76.328), Vector(-119.183, -152.400, 39.559), Vector(-65.811, -154.408, 35.522), Vector(-65.869, -154.452, 81.569),
			Vector(-112.382, -152.429, 49.906), Vector(-107.191, -152.470, 70.169), Vector(-66.250, -154.298, 90.216), Vector(-60.359,
			-150.420, 86.049), Vector(-102.454, -157.430, 71.588), Vector(-102.568, -157.441, 48.250), Vector(-63.062, -150.443, 76.970),
			Vector(318.834, 44.251, 155.257), Vector(304.246, 42.349, 145.365), Vector(282.872, 40.773, 144.938), Vector(257.155, 40.773,
			145.073), Vector(235.926, 42.251, 145.315), Vector(221.032, 44.202, 155.317), Vector(311.844, 45.822, 171.749), Vector(303.294,
			45.742, 159.609), Vector(309.127, 44.790, 185.561), Vector(300.896, 44.776, 193.410), Vector(239.107, 44.744, 193.348), Vector(
			231.130, 44.943, 188.436), Vector(229.284, 45.773, 174.345), Vector(236.611, 45.773, 159.559), Vector(305.225, 39.904,
			177.847), Vector(311.903, 45.693, 154.464), Vector(235.782, 40.137, 185.574), Vector(231.827, 45.729, 161.327), Vector(-78.640,
			-154.221, 23), Vector(-106.224, -155.389, 25.528), Vector(-92.858, -155.191, 27.303), Vector(-84.072, -154.329, 26.075),
			Vector(-89.609, -159.373, 48.582), Vector(-81.853, -154.147, 34.320), Vector(-62, -153.484, 10.925), Vector(-89.141, -155.500,
			4.039), Vector(-111.694, -152.655, 33.267), Vector(288.825, 41.764, 161.606), Vector(286.787, 39.977, 178.139), Vector(279.720,
			41.437, 195.797), Vector(251.137, 42.113, 160.858), Vector(253.501, 40.106, 177.957), Vector(259.546, 41.684, 195.692), Vector(
			265.902, 43.618, 181.303), Vector(-88.556, -159.078, 79.691), Vector(-82.693, -154.377, 85.625), Vector(-92.225, -155.334,
			92.561), Vector(-83.244, -154.230, 97), Vector(-64.623, -151.188, 126.837), Vector(-80.064, -154.126, 126.684), Vector(-96.232,
			-154.537, 126.996), Vector(-106.557, -154.879, 102.114), Vector(239.511, -11.354, -249.274), Vector(244.101, -10.240,
			-231.512), Vector(239.364, -9.132, -214.828), Vector(270.490, -14.082, -232.740), Vector(265.522, -14.691, -237.570), Vector(
			263.810, -12.716, -248.635), Vector(303.629, -12.429, -258.841), Vector(304.240, -12.865, -251.353), Vector(264.411, -12.429,
			-258.819), Vector(297.828, -14.239, -232.740), Vector(299.526, -14.676, -237.541), Vector(326.184, -11.501, -219.274), Vector(
			330.029, -9.691, -210.462), Vector(326.661, -11.383, -243.875));
		Global.secondpos = Array(Vector(-72.015, -133.438, -4.742), Vector(-87.676, -145.482, -7.374), Vector(-130.552, -127.356, -7.651),
			Vector(-60.437, -147.638, 33.904), Vector(-65.108, -147.642, 41.078), Vector(-66.250, -150.626, 29.663), Vector(-60.293,
			-151.638, 43.898), Vector(-52.636, -150.415, 61.884), Vector(-60.317, -151.520, 76.221), Vector(-49.377, -155.556, 63.440),
			Vector(-59.437, -157.639, 69.992), Vector(-56.617, -157.649, 49.943), Vector(-87.817, -153.773, 56.020), Vector(-119.756,
			-123.549, 80.532), Vector(-118.460, -122.630, 43.499), Vector(-65.999, -151.599, 38.441), Vector(-65.750, -151.611, 84.438),
			Vector(-107.138, -139.620, 50.022), Vector(-112.403, -139.129, 70.214), Vector(-69.921, -150.618, 90.254), Vector(-57.574,
			-147.593, 86.076), Vector(-99.530, -154.518, 71.616), Vector(-99.635, -154.706, 48.421), Vector(-65.174, -147.629, 78.941),
			Vector(319.970, 47.052, 152.649), Vector(305.349, 45.042, 142.767), Vector(280.063, 43.576, 145.016), Vector(259.892, 43.555,
			145.123), Vector(234.857, 44.955, 142.808), Vector(220.121, 47.052, 152.638), Vector(310.611, 48.525, 174.285), Vector(305.949,
			48.611, 160.634), Vector(309.025, 47.548, 188.308), Vector(300.996, 47.643, 190.561), Vector(239.117, 47.548, 190.595), Vector(
			231.025, 47.549, 185.629), Vector(228.327, 48.594, 171.736), Vector(234.116, 48.565, 160.505), Vector(304.413, 43.386,
			185.604), Vector(308.227, 77.185, 161.323), Vector(236.150, 43.386, 177.870), Vector(229.557, 73.388, 154.516), Vector(-81.421,
			-142.961, 14.625), Vector(-106.854, -126.457, 16.946), Vector(-103.774, -128.568, 27.426), Vector(-89.252, -137.965, 26.099),
			Vector(-87.952, -136.965, 40.273), Vector(-82.132, -140.460, 39.335), Vector(-56, -139.557, 11.217), Vector(-90.020, -136.562,
			-1.219), Vector(-117.792, -113.210, 36.532), Vector(297.600, 70.310, 170.211), Vector(281.740, 74.499, 189.673), Vector(
			290.115, 73.882, 234.331), Vector(242.232, 78.283, 170.424), Vector(260.117, 81.944, 190.294), Vector(255.763, 64.690,
			220.624), Vector(274, 48.053, 181.842), Vector(-88.539, -137.055, 71.409), Vector(-81.805, -136.942, 80.339), Vector(-103.733,
			-129.850, 91.983), Vector(-83.608, -136.825, 105.625), Vector(-71.996, -140.081, 126), Vector(-88, -142.959, 126.235), Vector(
			-129.696, -123.496, 124.979), Vector(-107.035, -128.504, 93.797), Vector(242.025, 20.623, -244.340), Vector(241.104, 13.704,
			-219.743), Vector(238.614, -5.805, -210.477), Vector(270.520, -10.260, -227.260), Vector(268.456, -11.638, -237.689), Vector(
			263.855, -10.135, -251.368), Vector(303.574, -9.229, -263.135), Vector(304.182, -10.135, -248.743), Vector(264.635, -8.972,
			-263.135), Vector(297.690, -10.260, -227.260), Vector(302.472, -11.638, -237.481), Vector(322.172, 13.197, -229.986), Vector(
			329.210, -5.461, -214.705), Vector(329.238, 10.382, -249.046));
		Global.firstpoint2 = Array(Vector(-64.782, -133.438, -4.700), Vector(-80.139, -145.482, -6.926), Vector(-97.052, -127.356, -6.809),
			Vector(-57.572, -147.638, 33.907), Vector(-63.019, -147.642, 42.989), Vector(-69.947, -150.626, 29.720), Vector(-57.545,
			-151.638, 43.890), Vector(-52.592, -150.415, 58.112), Vector(-57.482, -151.520, 76.243), Vector(-49.299, -155.556, 56.457),
			Vector(-56.562, -157.639, 69.910), Vector(-59.373, -157.649, 49.982), Vector(-89.212, -153.773, 64.262), Vector(-118.567,
			-123.549, 76.328), Vector(-119.183, -122.630, 39.559), Vector(-65.811, -151.599, 35.522), Vector(-65.869, -151.611, 81.569),
			Vector(-112.382, -139.620, 49.906), Vector(-107.191, -139.129, 70.169), Vector(-66.250, -150.618, 90.216), Vector(-60.359,
			-147.593, 86.049), Vector(-102.454, -154.518, 71.588), Vector(-102.568, -154.706, 48.250), Vector(-63.062, -147.629, 76.970),
			Vector(318.834, 47.052, 155.257), Vector(304.246, 45.042, 145.365), Vector(282.872, 43.576, 144.938), Vector(257.155, 43.555,
			145.073), Vector(235.926, 44.955, 145.315), Vector(221.032, 47.052, 155.317), Vector(311.844, 48.525, 171.749), Vector(303.294,
			48.611, 159.609), Vector(309.127, 47.548, 185.561), Vector(300.896, 47.643, 193.410), Vector(239.107, 47.548, 193.348), Vector(
			231.130, 47.549, 188.436), Vector(229.284, 48.594, 174.345), Vector(236.611, 48.565, 159.559), Vector(305.225, 43.386,
			177.847), Vector(311.903, 77.185, 154.464), Vector(235.782, 43.386, 185.574), Vector(231.827, 73.388, 161.327), Vector(-78.640,
			-142.961, 23), Vector(-106.224, -126.457, 25.528), Vector(-92.858, -128.568, 27.303), Vector(-84.072, -137.965, 26.075),
			Vector(-89.609, -136.965, 48.582), Vector(-81.853, -140.460, 34.320), Vector(-62, -139.557, 10.925), Vector(-89.141, -136.562,
			4.039), Vector(-111.694, -113.210, 33.267), Vector(288.825, 70.310, 161.606), Vector(286.787, 74.499, 178.139), Vector(279.720,
			73.882, 195.797), Vector(251.137, 78.283, 160.858), Vector(253.501, 81.944, 177.957), Vector(259.546, 64.690, 195.692), Vector(
			265.902, 48.053, 181.303), Vector(-88.556, -137.055, 79.691), Vector(-82.693, -136.942, 85.625), Vector(-92.225, -129.850,
			92.561), Vector(-83.244, -136.825, 97), Vector(-64.623, -140.081, 126.837), Vector(-80.064, -142.959, 126.684), Vector(-96.232,
			-123.496, 126.996), Vector(-106.557, -128.504, 102.114), Vector(239.511, 20.623, -249.274), Vector(244.101, 13.704, -231.512),
			Vector(239.364, -5.805, -214.828), Vector(270.490, -10.260, -232.740), Vector(265.522, -11.638, -237.570), Vector(263.810,
			-10.135, -248.635), Vector(303.629, -9.229, -258.841), Vector(304.240, -10.135, -251.353), Vector(264.411, -8.972, -258.819),
			Vector(297.828, -10.260, -232.740), Vector(299.526, -11.638, -237.541), Vector(326.184, 13.197, -219.274), Vector(330.029,
			-5.461, -210.462), Vector(326.661, 10.382, -243.875));
		Global.secondpoint2 = Array(Vector(-72.015, -151.500, -4.742), Vector(-87.676, -154.261, -7.374), Vector(-130.552, -154.891,
			-7.651), Vector(-60.437, -150.421, 33.904), Vector(-65.108, -150.420, 41.078), Vector(-66.250, -154.385, 29.663), Vector(
			-60.293, -154.458, 43.898), Vector(-52.636, -154.253, 61.884), Vector(-60.317, -154.417, 76.221), Vector(-49.377, -160.548,
			63.440), Vector(-59.437, -160.373, 69.992), Vector(-56.617, -160.420, 49.943), Vector(-87.817, -160.419, 56.020), Vector(
			-119.756, -152.098, 80.532), Vector(-118.460, -152.400, 43.499), Vector(-65.999, -154.408, 38.441), Vector(-65.750, -154.452,
			84.438), Vector(-107.138, -152.429, 50.022), Vector(-112.403, -152.470, 70.214), Vector(-69.921, -154.298, 90.254), Vector(
			-57.574, -150.420, 86.076), Vector(-99.530, -157.430, 71.616), Vector(-99.635, -157.441, 48.421), Vector(-65.174, -150.443,
			78.941), Vector(319.970, 44.251, 152.649), Vector(305.349, 42.349, 142.767), Vector(280.063, 40.773, 145.016), Vector(259.892,
			40.773, 145.123), Vector(234.857, 42.251, 142.808), Vector(220.121, 44.202, 152.638), Vector(310.611, 45.822, 174.285), Vector(
			305.949, 45.742, 160.634), Vector(309.025, 44.790, 188.308), Vector(300.996, 44.776, 190.561), Vector(239.117, 44.744,
			190.595), Vector(231.025, 44.943, 185.629), Vector(228.327, 45.773, 171.736), Vector(234.116, 45.773, 160.505), Vector(304.413,
			39.904, 185.604), Vector(308.227, 45.693, 161.323), Vector(236.150, 40.137, 177.870), Vector(229.557, 45.729, 154.516), Vector(
			-81.421, -154.221, 14.625), Vector(-106.854, -155.389, 16.946), Vector(-103.774, -155.191, 27.426), Vector(-89.252, -154.329,
			26.099), Vector(-87.952, -159.373, 40.273), Vector(-82.132, -154.147, 39.335), Vector(-56, -153.484, 11.217), Vector(-90.020,
			-155.500, -1.219), Vector(-117.792, -152.655, 36.532), Vector(297.600, 41.764, 170.211), Vector(281.740, 39.977, 189.673),
			Vector(290.115, 41.437, 234.331), Vector(242.232, 42.113, 170.424), Vector(260.117, 40.106, 190.294), Vector(255.763, 41.684,
			220.624), Vector(274, 43.618, 181.842), Vector(-88.539, -159.078, 71.409), Vector(-81.805, -154.377, 80.339), Vector(-103.733,
			-155.334, 91.983), Vector(-83.608, -154.230, 105.625), Vector(-71.996, -151.188, 126), Vector(-88, -154.126, 126.235), Vector(
			-129.696, -154.537, 124.979), Vector(-107.035, -154.879, 93.797), Vector(242.025, -11.354, -244.340), Vector(241.104, -10.240,
			-219.743), Vector(238.614, -9.132, -210.477), Vector(270.520, -14.082, -227.260), Vector(268.456, -14.691, -237.689), Vector(
			263.855, -12.716, -251.368), Vector(303.574, -12.429, -263.135), Vector(304.182, -12.865, -248.743), Vector(264.635, -12.429,
			-263.135), Vector(297.690, -14.239, -227.260), Vector(302.472, -14.676, -237.481), Vector(322.172, -11.501, -229.986), Vector(
			329.210, -9.691, -214.705), Vector(329.238, -11.383, -249.046));
		For Global Variable(forindex2, 0, 80, 1);
			Global.Wall_ID[Global.forindex2] = 1;
			Wait(0.016, Ignore Condition);
		End;
	}
}