settings
{
	main
	{
		Description: "winstons, brigs, riens, torbs, new call of duty feel, 7 perks, wonder weapons, and a heck of a lot of points to collect!"
		Mode Name: "Zombies Remastered"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Max Spectators: 12
		Max Team 1 Players: 6
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Watchpoint: Gibraltar 972777519512068292
			}
		}

		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Health Pack Respawn Time Scalar: 50%
			Hero Limit: Off
			Kill Cam: Off
			Kill Feed: Off
			Respawn As Random Hero: On
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		Team 1
		{
			Movement Speed: 120%
			Spawn With Ultimate Ready: On

			Brigitte
			{
				Barrier Shield Cooldown Time: 50%
				Damage Dealt: 70%
				Healing Dealt: 40%
				Health: 50%
				Repair Pack Cooldown Time: 50%
				Shield Bash Cooldown Time: 50%
				Shield Bash Knockback Scalar: 300%
				Whip Shot Cooldown Time: 50%
				Whip Shot Knockback Scalar: 300%
			}

			Doomfist
			{
				Healing Received: 50%
				Health: 40%
				No Ammunition Requirement: On
				Power Block Cooldown Time: 50%
				Rocket Punch Cooldown Time: 50%
				Seismic Slam Cooldown Time: 50%
			}

			Echo
			{
				Damage Dealt: 200%
				Flight Cooldown Time: 500%
				Focusing Beam Cooldown Time: 50%
				Glide: Off
			}

			Genji
			{
				Damage Dealt: 220%
			}

			Junker Queen
			{
				Healing Received: 50%
				Health: 50%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 50%
				Concussion Mine Knockback Scalar: 25%
				Damage Dealt: 210%
				Frag Launcher Knockback Scalar: 25%
				Steel Trap Cooldown Time: 25%
				Ultimate Duration: 25%
			}

			Kiriko
			{
				Damage Dealt: 150%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 500%
				Health: 40%
				Secondary Fire: Off
				Weapon Freeze Duration Scalar: 20%
				Weapon Freeze Minimum: 0%
				Weapon Freeze Rate Scalar: 0%
			}

			Moira
			{
				Biotic Orb Cooldown Time: 25%
				Damage Dealt: 500%
				Fade Cooldown Time: 200%
				Healing Dealt: 150%
				Movement Speed: 110%
			}

			Ramattra
			{
				Healing Received: 50%
				Health: 50%
			}

			Reinhardt
			{
				Barrier Field Recharge Rate: 300%
				Charge Cooldown Time: 50%
				Charge Knockback Scalar: 300%
				Damage Dealt: 65%
				Fire Strike Cooldown Time: 10%
				Healing Received: 50%
				Health: 30%
				Ultimate Generation Earthshatter: 165%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 0%
				Damage Dealt: 105%
				Healing Received: 33%
				Health: 25%
			}

			Sigma
			{
				Accretion Knockback Scalar: 300%
				Damage Dealt: 420%
				Experimental Barrier Cooldown Time: 0%
				Experimental Barrier Recharge Rate: 300%
				Healing Received: 50%
				Health: 38%
			}

			Sombra
			{
				Ammunition Clip Size Scalar: 150%
				Damage Dealt: 250%
				Hack Cooldown Time: 25%
				Translocator Cooldown Time: 75%
				Virus Cooldown Time: 300%
			}

			Symmetra
			{
				Damage Dealt: 340%
				Sentry Turret Cooldown Time: 200%
			}

			Torbjörn
			{
				Damage Dealt: 260%
				Deploy Turret Cooldown Time: 25%
			}

			Winston
			{
				Barrier Projector Cooldown Time: 20%
				Damage Dealt: 150%
				Healing Received: 50%
				Health: 30%
				Jump Vertical Speed: 80%
				Movement Speed: 79%
				Primal Rage Melee Knockback Scalar: 300%
			}

			Zenyatta
			{
				Damage Dealt: 154%
				Healing Dealt: 150%
			}
		}

		Team 2
		{
			Jump Vertical Speed: 200%
			Movement Speed: 110%

			Brigitte
			{
				Barrier Shield Cooldown Time: 50%
				Damage Dealt: 70%
				Healing Dealt: 40%
				Health: 25%
				Movement Speed: 75%
				Repair Pack Cooldown Time: 50%
				Ultimate Generation - Combat Rally: 500%
				Ultimate Generation Rally: 500%
			}

			Doomfist
			{
				Health: 500%
				No Ammunition Requirement: On
				Power Block Cooldown Time: 50%
				Rocket Punch Cooldown Time: 50%
				Seismic Slam Cooldown Time: 50%
			}

			Echo
			{
				Flight Cooldown Time: 500%
				Focusing Beam Cooldown Time: 50%
			}

			Genji
			{
				Damage Dealt: 50%
				Health: 500%
				Infinite Ultimate Duration: On
				Movement Speed: 79%
				Spawn With Ultimate Ready: On
			}

			Junker Queen
			{
				Health: 50%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 50%
				Concussion Mine Knockback Scalar: 25%
				Damage Dealt: 250%
				Frag Launcher Knockback Scalar: 25%
				Steel Trap Cooldown Time: 25%
				Ultimate Duration: 25%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 250%
				Health: 40%
				Secondary Fire: Off
				Weapon Freeze Duration Scalar: 20%
				Weapon Freeze Minimum: 0%
				Weapon Freeze Rate Scalar: 0%
			}

			Moira
			{
				Biotic Orb: Off
				Damage Dealt: 200%
				Fade Cooldown Time: 0%
				Healing Dealt: 150%
				Health: 500%
				Movement Speed: 110%
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Ability Coalescence: Off
			}

			Reinhardt
			{
				Barrier Field Recharge Rate: 300%
				Damage Dealt: 65%
				Fire Strike Cooldown Time: 10%
				Healing Received: 250%
				Health: 125%
				Rocket Hammer Knockback Scalar: 200%
				Ultimate Generation - Combat Earthshatter: 500%
				Ultimate Generation Earthshatter: 165%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 0%
				Damage Dealt: 105%
				Healing Received: 33%
				Health: 200%
			}

			Sigma
			{
				Accretion Cooldown Time: 25%
				Accretion Knockback Scalar: 300%
				Damage Dealt: 420%
				Experimental Barrier Cooldown Time: 0%
				Experimental Barrier Recharge Rate: 300%
				Healing Received: 50%
				Health: 38%
				Kinetic Grasp Cooldown Time: 0%
			}

			Sombra
			{
				Ammunition Clip Size Scalar: 150%
				Damage Dealt: 200%
				Hack Cooldown Time: 25%
				Translocator Cooldown Time: 75%
				Virus Cooldown Time: 300%
			}

			Symmetra
			{
				Damage Dealt: 70%
				Sentry Turret Cooldown Time: 200%
			}

			Torbjörn
			{
				Damage Dealt: 89%
				Deploy Turret: Off
				Movement Gravity: 80%
				Movement Speed: 85%
				Overload Cooldown Time: 40%
				Overload Duration Scalar: 500%
				Ultimate Generation - Combat Molten Core: 500%
				Ultimate Generation Molten Core: 220%
				Weapons Enabled: Forge Hammer Only
			}

			Winston
			{
				Ammunition Clip Size Scalar: 25%
				Barrier Projector: Off
				Damage Dealt: 150%
				Healing Received: 50%
				Infinite Ultimate Duration: On
				Jump Pack: Off
				Jump Pack Knockback Scalar: 400%
				Jump Vertical Speed: 80%
				Movement Speed: 79%
				Primal Rage Melee Knockback Scalar: 25%
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
			}

			Zenyatta
			{
				Damage Dealt: 200%
				Healing Dealt: 150%
				Health: 500%
			}

			enabled heroes
			{
				Brigitte
				Reinhardt
				Torbjörn
				Winston
			}
		}

		General
		{
			Health: 50%
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			Ana
			{
				Biotic Grenade Cooldown Time: 50%
				Damage Dealt: 300%
				Healing Dealt: 150%
				Sleep Dart Cooldown Time: 0%
			}

			Ashe
			{
				Coach Gun Cooldown Time: 35%
				Damage Dealt: 125%
				Dynamite Cooldown Time: 50%
			}

			Baptiste
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 163%
				Healing Dealt: 150%
				Regenerative Burst Cooldown Time: 25%
			}

			Bastion
			{
				Ammunition Clip Size Scalar: 35%
				Damage Dealt: 90%
				Health: 34%
			}

			Cassidy
			{
				Ammunition Clip Size Scalar: 116%
				Combat Roll Cooldown Time: 35%
				Damage Dealt: 30%
				Flashbang Cooldown Time: 15%
				Health: 45%
				Ultimate Ability Deadeye: Off
			}

			D.Va
			{
				Boosters Cooldown Time: 200%
				Damage Dealt: 155%
				Healing Received: 50%
				Health: 25%
			}

			Hanzo
			{
				Damage Dealt: 300%
				Sonic Arrow Cooldown Time: 50%
				Storm Arrows Cooldown Time: 50%
				Storm Arrows Quantity: 6
			}

			Lúcio
			{
				Ammunition Clip Size Scalar: 300%
				Amp It Up Cooldown Time: 25%
				Damage Dealt: 500%
				Healing Dealt: 250%
				Movement Speed: 110%
				Soundwave Cooldown Time: 200%
			}

			Mercy
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 250%
				Healing Dealt: 150%
				Resurrect Cooldown Time: 0%
				Ultimate Generation - Combat Valkyrie: 0%
				Ultimate Generation - Passive Valkyrie: 0%
				Ultimate Generation Valkyrie: 10%
			}

			Orisa
			{
				Energy Javelin Cooldown Time: 50%
				Fortify Cooldown Time: 75%
				Healing Received: 50%
				Health: 34%
				Javelin Spin Cooldown Time: 25%
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 200%
				Concussive Blast Cooldown Time: 50%
				Damage Dealt: 250%
				Hover Jets Recharge Rate: 5%
				Jump Jet Cooldown Time: 300%
			}

			Reaper
			{
				Ammunition Clip Size Scalar: 250%
				Damage Dealt: 107%
				Shadow Step Cooldown Time: 20%
				Wraith Form Cooldown Time: 50%
			}

			Soldier: 76
			{
				Ammunition Clip Size Scalar: 82%
			}

			Tracer
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 160%
				Health: 67%
			}

			Widowmaker
			{
				Damage Dealt: 280%
				Grappling Hook Cooldown Time: 35%
				Health: 58%
				Venom Mine Cooldown Time: 0%
			}

			Wrecking Ball
			{
				Damage Dealt: 200%
				Grappling Claw Cooldown Time: 250%
				Healing Received: 50%
				Health: 25%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 420%
				Healing Received: 50%
				Health: 38%
				Particle Barrier Cooldown Time: 40%
				Projected Barrier Cooldown Time: 40%
			}

			disabled heroes
			{
				Hazard
				Juno
				Mauga
				Venture
			}
		}
	}

	extensions
	{
		Beam Effects
		Buff Status Effects
		Debuff Status Effects
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: roundnumber
		1: numberofzombies
		13: powerconnected
		18: Died
		21: Vectordoorpositions
		26: gamestarted
		27: impulseDoorArray
		28: optimizeddoors
		29: cutscene
		30: rnd0

	player:
		0: points
		3: ammo
		4: doublemag
		10: healthmax
		11: dmgmaniac
		12: healvariable
		14: InfoCooldown
		17: HideHints
		22: hasjugg
		23: experience
		25: attributes
		26: Jugg
		27: brawler
		28: Pack
		29: electriccherry
		30: Maniac
		31: revived
		32: revivebought
		33: carrysacr
}

disabled rule("effect for development")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"1payload"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Yellow), Vector(32.567, 5.068, -141.406), 30, Visible To Position and Radius);
		"2 highground infront of payload"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Green), Vector(59.087, 9.566, -110.457), 23, Visible To Position and Radius);
		"3 cliffside"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Purple), Vector(65.474, -3.677, -135.486), 14, Visible To Position and Radius);
		"4 lowground infront of payload"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Red), Vector(28.563, -10.587, -104.486), 18, Visible To Position and Radius);
		"5 first teleporter spot"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Blue), Vector(6.428, 1.339, -85.958), 34, Visible To Position and Radius);
		"8"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Orange), Vector(2.440, 0.060, -31.420), 25, Visible To Position and Radius);
		"9"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Orange), Vector(43.380, 0.800, -50.511), 25, Visible To Position and Radius);
		"10"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Yellow), Vector(61.601, 1.021, -27.356), 25, Visible To Position and Radius);
		"11"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Lime Green), Vector(54.398, 12.309, 6.858), 25,
			Visible To Position and Radius);
		"12"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Black), Vector(101.454, 4.887, -27.820), 34, Visible To Position and Radius);
		"13"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Rose), Vector(94.181, 5.663, 7.495), 18, Visible To Position and Radius);
		"stairs 1"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Gray), Vector(52.049, 2.711, -75.253), 12, Visible To Position and Radius);
		"stairs 2"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Gray), Vector(76.924, 4.197, -57.927), 14, Visible To Position and Radius);
		"6"
		Create Effect(All Players(All Teams), Sphere, Color(Aqua), Vector(72.009, 11.983, 43.957), 34, Visible To Position and Radius);
		"power room"
		disabled Create Effect(All Players(All Teams), Sphere, Color(Yellow), Vector(36.058, -0.821, -13.345), 20, Visible To Position and Radius);
		"first area preround stage"
		Create Effect(All Players(All Teams), Sphere, Color(Yellow), Vector(104.187, 1.740, 63.810), 20, Visible To Position and Radius);
	}
}

rule("Get out of Spawn Bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Random Value In Array(Global.Y));
	}
}

rule("SpawnPoints Array Add yellow")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(32.567, 5.068, -141.406), Closest Player To(Vector(32.567, 5.068, -141.406), Team 1)) <= 30;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(28.561, -4.602, -149.536));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(39.402, -3.301, -122.161));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(44.386, 1.455, -139.499));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(24.816, -4.100, -152.090));
		"5"
		Modify Global Variable(Y, Append To Array, Vector(31.510, 5.455, -150.826));
		"6"
		Modify Global Variable(Y, Append To Array, Vector(45.133, 1.455, -151.513));
		"7"
		Modify Global Variable(Y, Append To Array, Vector(36.410, 4.455, -118.846));
	}
}

rule("SpawnPoints Array Remove Area payload section yellow")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(32.567, 5.068, -141.406), Closest Player To(Vector(32.567, 5.068, -141.406), Team 1)) > 30;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(28.561, -4.602, -149.536));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(39.402, -3.301, -122.161));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(34.170, 6.357, -148.384));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(24.816, -4.100, -152.090));
		"5"
		Modify Global Variable(Y, Remove From Array By Value, Vector(31.510, 5.455, -150.826));
		"6"
		Modify Global Variable(Y, Remove From Array By Value, Vector(45.133, 1.455, -151.513));
		"7"
		Modify Global Variable(Y, Remove From Array By Value, Vector(36.410, 4.455, -118.846));
	}
}

rule("SpawnPoints Array Add Area cliff side purple")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(65.474, -3.677, -135.486), Closest Player To(Vector(65.474, -3.677, -135.486), Team 1)) <= 10;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(7.059, 6.690, -28.235));
		Modify Global Variable(Y, Append To Array, Vector(-15.281, 1.455, -52.249));
		Modify Global Variable(Y, Append To Array, Vector(8.981, 6.528, -15.899));
		Modify Global Variable(Y, Append To Array, Vector(-14.988, 6.455, -45.021));
	}
}

rule("SpawnPoints Array Remove Area cliff side purple")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(65.474, -3.677, -135.486), Closest Player To(Vector(65.474, -3.677, -135.486), Team 1)) > 14;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(7.059, 6.690, -28.235));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-15.281, 1.455, -52.249));
		Modify Global Variable(Y, Remove From Array By Value, Vector(8.981, 6.528, -15.899));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-14.988, 6.455, -45.021));
	}
}

rule("SpawnPoints Array Add Area highground tunnel  green")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(59.087, 9.566, -110.457), Closest Player To(Vector(59.087, 9.566, -110.457), Team 1)) <= 23;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(39.570, 4.630, -104.002));
		Modify Global Variable(Y, Append To Array, Vector(49.977, 0.455, -111.108));
		Modify Global Variable(Y, Append To Array, Vector(65.931, -5.273, -120.880));
		Modify Global Variable(Y, Append To Array, Vector(51.116, -4.674, -115.110));
	}
}

rule("SpawnPoints Array Remove Area highground tunnel green")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(59.087, 9.566, -110.457), Closest Player To(Vector(59.087, 9.566, -110.457), Team 1)) > 23;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(39.570, 4.630, -104.002));
		Modify Global Variable(Y, Remove From Array By Value, Vector(49.977, 0.455, -111.108));
		Modify Global Variable(Y, Remove From Array By Value, Vector(65.931, -5.273, -120.880));
		Modify Global Variable(Y, Remove From Array By Value, Vector(51.116, -4.674, -115.110));
	}
}

rule("SpawnPoints Array Add Area first teleporter red")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(28.563, -10.587, -104.486), Closest Player To(Vector(28.563, -10.587, -104.486), Team 1)) <= 18;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(38.505, -10.545, -92.139));
		Modify Global Variable(Y, Append To Array, Vector(26.302, -10.545, -115.117));
		Modify Global Variable(Y, Append To Array, Vector(24.321, -8.474, -99.595));
		Modify Global Variable(Y, Append To Array, Vector(25.312, -5.374, -90.766));
		Modify Global Variable(Y, Append To Array, Vector(43.105, -8.906, -108.389));
	}
}

rule("SpawnPoints Array Remove Area first teleporter red")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(28.563, -10.587, -104.486), Closest Player To(Vector(28.563, -10.587, -104.486), Team 1)) > 18;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(38.505, -10.545, -92.139));
		Modify Global Variable(Y, Remove From Array By Value, Vector(26.302, -10.545, -115.117));
		Modify Global Variable(Y, Remove From Array By Value, Vector(24.321, -8.474, -99.595));
		Modify Global Variable(Y, Remove From Array By Value, Vector(25.312, -5.374, -90.766));
		Modify Global Variable(Y, Remove From Array By Value, Vector(43.105, -8.906, -108.389));
	}
}

rule("SpawnPoints Array Add 2nd last defender spawn after the 2nd teleporter black")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(67.997, 0.330, 5.765), Closest Player To(Vector(101.454, 4.887, -27.820), Team 1)) <= 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(115.775, 0.455, 1.954));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(97.672, 3.455, -25.625));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(100.319, -1.387, -36.053));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(99.784, 3.240, -15.818));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(82.001, -2.744, -24.741));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(89.035, 1.856, -2.363));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(88.545, -2.540, -47.606));
	}
}

rule("SpawnPoints Array Remove 2nd last def spawn black")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(67.997, 0.330, 5.765), Closest Player To(Vector(101.454, 4.887, -27.820), Team 1)) > 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(115.775, 0.455, 1.954));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(97.672, 3.455, -25.625));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(100.319, -1.387, -36.053));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(99.784, 3.240, -15.818));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(82.001, -2.744, -24.741));
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(89.035, 1.856, -2.363));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(88.545, -2.540, -47.606));
	}
}

disabled rule("SpawnPoints Array Add round Zero escape")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(106.549, 1.036, 67.504), Closest Player To(Vector(106.549, 1.036, 67.504), Team 1)) <= 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(67.221, -6.521, 55.943));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(93.081, -5.121, 33.076));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(68.824, -9.521, 53.998));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(76.875, -9.521, 24.761));
		"5"
		Modify Global Variable(Y, Append To Array, Vector(63.316, -9.521, 41.349));
		"6"
		Modify Global Variable(Y, Append To Array, Vector(89.788, -9.521, 35.887));
		"7"
		Modify Global Variable(Y, Append To Array, Vector(97.725, -7.521, 44.437));
	}
}

disabled rule("SpawnPoints Array Remove round zero escape")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(106.549, 1.036, 67.504), Closest Player To(Vector(106.549, 1.036, 67.504), Team 1)) > 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(67.221, -6.521, 55.943));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(93.081, -5.121, 33.076));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(68.824, -9.521, 53.998));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(76.875, -9.521, 24.761));
		"5"
		Modify Global Variable(Y, Remove From Array By Value, Vector(63.316, -9.521, 41.349));
		"6"
		Modify Global Variable(Y, Remove From Array By Value, Vector(89.788, -9.521, 35.887));
		"7"
		Modify Global Variable(Y, Remove From Array By Value, Vector(97.725, -7.521, 44.437));
	}
}

rule("SpawnPoints Array Add Area power room")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(67.997, 0.330, 5.765), Closest Player To(Vector(36.058, -0.821, -13.345), Team 1)) <= 20;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(16.835, -0.424, -27.392));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(52.648, -2.545, -12.315));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(35.207, -2.389, -6.370));
	}
}

rule("SpawnPoints Array Remove Area power room")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(67.997, 0.330, 5.765), Closest Player To(Vector(36.058, -0.821, -13.345), Team 1)) > 20;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(16.835, -0.424, -27.392));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(52.648, -2.545, -12.315));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(35.207, -2.389, -6.370));
	}
}

rule("SpawnPoints Array Add stairs 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(34.406, -1.563, -137.345), Closest Player To(Vector(76.924, 4.197, -57.927), Team 1)) <= 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(74.491, 1.455, -63.060));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(63.086, -2.398, -47.470));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(70.782, 3.455, -46.136));
	}
}

rule("SpawnPoints Array Remove stairs 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(34.406, -1.563, -137.345), Closest Player To(Vector(76.924, 4.197, -57.927), Team 1)) > 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(74.491, 1.455, -63.060));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(63.086, -2.398, -47.470));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(70.782, 3.455, -46.136));
	}
}

rule("SpawnPoints Array Add stairs 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(34.406, -1.563, -137.345), Closest Player To(Vector(52.049, 2.711, -75.253), Team 1)) <= 12;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(53.157, -0.501, -81.396));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(47.787, 3.455, -69.607));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(39.786, -4.557, -58.394));
	}
}

rule("SpawnPoints Array Remove stairs 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(34.406, -1.563, -137.345), Closest Player To(Vector(52.049, 2.711, -75.253), Team 1)) > 12;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(53.157, -0.501, -81.396));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(47.787, 3.455, -69.607));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(39.786, -4.557, -58.394));
	}
}

rule("SpawnPoints Array Add purple cliffside")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(34.406, -1.563, -137.345), Closest Player To(Vector(65.474, -3.677, -135.486), Team 1)) <= 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(64.358, -5.520, -120.832));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(56.838, 1.455, -137.452));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(59.640, -5.376, -146.977));
	}
}

rule("SpawnPoints Array Remove cliffside")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(34.406, -1.563, -137.345), Closest Player To(Vector(65.474, -3.677, -135.486), Team 1)) > 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(64.358, -5.520, -120.832));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(56.838, 1.455, -137.452));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(59.640, -5.376, -146.977));
	}
}

rule("Setup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.T == 47;
	}

	actions
	{
		Global.roundnumber = 0;
		Global.numberofzombies = 666;
		Global.C = 0;
		Global.P = 0;
		Global.Q = Empty Array;
		Modify Global Variable(Q, Append To Array, Hero(D.Va));
		Modify Global Variable(Q, Append To Array, Hero(Orisa));
		Modify Global Variable(Q, Append To Array, Hero(Reinhardt));
		Modify Global Variable(Q, Append To Array, Hero(Roadhog));
		Modify Global Variable(Q, Append To Array, Hero(Sigma));
		Modify Global Variable(Q, Append To Array, Hero(Winston));
		Modify Global Variable(Q, Append To Array, Hero(Wrecking Ball));
		Modify Global Variable(Q, Append To Array, Hero(Zarya));
		Global.T = Empty Array;
		Global.Y = Empty Array;
		disabled Modify Global Variable(Y, Append To Array, Vector(-23.738, 22.631, -120.650));
		Create HUD Text(All Players(Team 1), String("Round {0}", Global.roundnumber), Null, Null, Top, 0, Color(Red), Color(Red), Color(
			Red), Visible To and String, Visible Always);
		Create HUD Text(All Players(Team 1), String("{0} {1}", Global.numberofzombies, String("Enemies")), Null, Null, Right, 0, Color(
			Red), Color(Red), Color(Red), Visible To and String, Visible Always);
		Global.O = False;
		Global.M[0] = Vector(500, 25, 500);
		Global.M[1] = Vector(500, 25, 500);
		Global.M[2] = Vector(500, 25, 500);
		Global.M[3] = Vector(500, 25, 500);
		Global.M[4] = Vector(500, 25, 500);
		Global.M[5] = Vector(500, 25, 500);
		Create Effect(All Players(Team 1), Orb, Color(White), Global.M[0], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Yellow), Global.M[1], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Green), Global.M[2], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Sky Blue), Global.M[3], 0.100, None);
		Create Effect(All Players(Team 1), Orb, Color(Red), Global.M[4], 1, Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Orange), Global.M[5], 1, Position and Radius);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[1] == 1), Custom String("Double Points!"), Null, Null,
			Top, 1, Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[2] == 1), Custom String("SLOW-MO"), Null, Null, Top, 1,
			Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[4] == 1), Custom String("Insta-Kill!"), Null, Null,
			Top, 1, Color(Red), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[0] == 1), Custom String("Ultimate MAYHEM"), Null, Null,
			Top, 1, Color(White), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[5] == 1), String("Healing"), Null, Null, Top, 1, Color(
			Orange), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[3] == 1), String("Freezing"), Null, Null, Top, 1,
			Color(Sky Blue), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Custom String("Website: workshop.codes/z-remastered"), Null, Null, Top, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("round change")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.numberofzombies < 1;
		disabled Global.O == False;
		disabled Global.gamestarted == 1;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Destroy All Dummy Bots;
		Global.roundnumber += 1;
		Global.Z = 1;
		Set Ultimate Charge(All Players(Team 1), 100);
		Big Message(All Players(All Teams), String("Round {0}", Global.roundnumber));
		Global.P = 0;
		All Dead Players(Team 1).Pack = 0;
		Clear Status(All Dead Players(Team 1), Burning);
		All Dead Players(Team 1).dmgmaniac = 100;
		Teleport(All Dead Players(Team 1), Nearest Walkable Position(Random Value In Array(All Living Players(Team 1)) + Vector(
			Random Integer(-5, 5), 0, Random Integer(-5, 5))));
		Start Forcing Player To Be Hero(All Dead Players(Team 1), Hero(Cassidy));
		Resurrect(All Dead Players(Team 1));
		Global.Died[0] = Vector(500, 0, 500);
		Global.Died[1] = Vector(500, 0, 500);
		Global.Died[2] = Vector(500, 0, 500);
		Global.Died[3] = Vector(500, 0, 500);
		All Players(Team 1).InfoCooldown = 0;
		All Players(Team 1).P = 0;
		All Players(Team 1).Q = 0;
		All Players(Team 1).HideHints = 0;
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(0, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(1, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(2, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(3, Team 2));
		disabled Wait(0.016, Ignore Condition);
		disabled Respawn(Players In Slot(4, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(5, Team 2));
		Set Status(All Living Players(Team 1), Null, Phased Out, 2);
		Skip If(Global.impulseDoorArray == False, 1);
		All Players(Team 1).points += 1500 + 350 * Global.roundnumber;
	}
}

rule("Defeat")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For All(All Players(Team 1), Is Dead(Current Array Element)) == True;
		Has Spawned(All Players(Team 1)) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Abort If Condition Is False;
		Declare Team Victory(Team 2);
		Wait(2, Ignore Condition);
		Restart Match;
	}
}

rule("Disable Bot Respawn")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
	}
}

rule("Spawn brigs wave 1- 5")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.numberofzombies >= 4;
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber >= 1;
		Global.roundnumber / 1 < Absolute Value(6);
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Skip If(Number Of Players(Team 1) > 3, 20);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Skip If(Global.impulseDoorArray == False, 99);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Skip If(Number Of Players(Team 1) > 1, 20);
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("respawn bots")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Living Players(Team 2) < Global.numberofzombies;
		Global.numberofzombies >= 1;
		Global.roundnumber > 1;
	}

	actions
	{
		Respawn(Random Value In Array(All Dead Players(Team 2)));
		Global.numberofzombies -= 1;
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Monkey Kill (Global Var B) (InstaUlt Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 0;
	}

	actions
	{
		Event Player.B = Random Integer(1, 50);
		Skip If(Event Player.B != 1, 1);
		Global.M[0] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		disabled Destroy Effect(Event Player.C);
		disabled Create Effect(All Players(All Teams), Orb, Color(White), Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0), 1,
			Visible To);
		disabled Event Player.C = Last Created Entity;
		Set Ultimate Charge(Event Player, 0);
		disabled Destroy Dummy Bot(Team 2, 0);
		Global.numberofzombies -= 1;
	}
}

rule("Monkey Kill (Global Var B) (doublePoints Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 1;
	}

	actions
	{
		Event Player.B = Random Integer(1, 40);
		Skip If(Event Player.B != 1, 1);
		Global.M[1] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		disabled Destroy Effect(Event Player.C);
		disabled Create Effect(All Players(All Teams), Orb, Color(Yellow), Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0), 1,
			Visible To);
		disabled Event Player.C = Last Created Entity;
		Set Ultimate Charge(Event Player, 0);
		Skip If(Global.numberofzombies < 6, 1);
		Global.numberofzombies -= 1;
	}
}

rule("Monkey Kill (Global Var B) (slowmotion Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 2;
	}

	actions
	{
		Event Player.B = Random Integer(1, 30);
		Skip If(Event Player.B != 1, 1);
		Global.M[2] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		disabled Destroy Effect(Event Player.C);
		disabled Create Effect(All Players(All Teams), Orb, Color(Green), Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0), 1,
			Visible To);
		disabled Event Player.C = Last Created Entity;
		Set Ultimate Charge(Event Player, 0);
		disabled Destroy Dummy Bot(Team 2, 2);
		Global.numberofzombies -= 1;
	}
}

rule("Monkey Kill (Global Var B) (nuke Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 3;
	}

	actions
	{
		Event Player.B = Random Integer(1, 40);
		Skip If(Event Player.B != 1, 1);
		Global.M[3] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
		Global.numberofzombies -= 1;
	}
}

rule("Monkey Kill (Global Var B) (instakill Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 4;
	}

	actions
	{
		Event Player.B = Random Integer(1, 40);
		Skip If(Event Player.B != 1, 1);
		Global.M[4] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
		Global.numberofzombies -= 1;
	}
}

rule("Monkey Kill (Global Var B) (max ammoPowerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 5;
	}

	actions
	{
		Event Player.B = Random Integer(1, 30);
		Skip If(Event Player.B != 1, 1);
		Global.M[5] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
		Global.numberofzombies -= 1;
	}
}

rule("Bot health")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Set Max Health(Event Player, 65 + 8 * Number Of Players(Team 1) + Global.roundnumber / (3.300 - Number Of Players(Team 1) / 8) * (
			Global.roundnumber / (3.300 - Number Of Players(Team 1) / 8)));
		Set Damage Received(Event Player, 110 - Global.roundnumber);
	}
}

rule("Bots Move Toward Players")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.O == False;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		disabled Wait(6, Ignore Condition);
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 1, 1, 1);
		disabled Wait(0.500, Ignore Condition);
		disabled Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		disabled Wait(0.500, Ignore Condition);
		disabled Stop Throttle In Direction(Event Player);
		disabled Loop;
	}
}

rule("Bots Face Nearest Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.O == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
			All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
			To World, Direction and Turn Rate);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(Eye Position(First Of(
			Sorted Array(Filtered Array(All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player,
			Current Array Element)))), Team 1))), To World);
		disabled Wait(30, Ignore Condition);
		disabled Loop;
	}
}

rule("Unstuck Bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Horizontal Speed Of(Event Player) < 0.900;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) != True;
		Has Status(Event Player, Frozen) != True;
		Has Status(Event Player, Asleep) != True;
		Has Status(Event Player, Stunned) != True;
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T < 2),
			Current Array Element))) > 1.500;
	}

	actions
	{
		disabled Wait(0.100, Ignore Condition);
		disabled Press Button(Event Player, Button(Jump));
		disabled Wait(1, Ignore Condition);
		disabled Wait(1, Abort When False);
		disabled Start Forcing Throttle(Event Player, 0, 0, 1, 1, 1, 1);
		disabled Wait(1, Ignore Condition);
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		disabled Wait(1, Ignore Condition);
		Wait(0.750, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
		disabled Event Player.points = 0;
	}
}

rule("Unstuck Bots under player force respawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Vertical Facing Angle Of(Event Player) < -70;
	}

	actions
	{
		Wait(1, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
	}
}

rule("Bots Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 1.800;
		Global.O == False;
		Hero Of(Event Player) != Hero(Moira);
	}

	actions
	{
		Wait(0.350, Abort When False);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("Bots Dont Attack if Not Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 1.800;
		Is Firing Primary(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
		Hero Of(Event Player) != Hero(Moira);
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Stop Holding Button(Event Player, Button(Primary Fire));
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Bots AutoUlt")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Bots Ult Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) != Hero(Genji);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bots Under Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Vertical Facing Angle Of(Event Player) < -10;
		Global.O == False;
		Speed Of(Event Player) < 0.950;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 1;
		Has Status(Event Player, Hacked) != True;
		Has Status(Event Player, Knocked Down) != True;
		Has Status(Event Player, Frozen) != True;
		Has Status(Event Player, Asleep) != True;
		Has Status(Event Player, Stunned) != True;
	}

	actions
	{
		Wait(0.330, Abort When False);
		Apply Impulse(Event Player, Up, 25, To World, Cancel Contrary Motion);
		Wait(1, Abort When False);
	}
}

disabled rule("Get out of Spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Nearest Walkable Position(Vector(17.893, 2, -134.387)));
	}
}

rule("SpawnPoints Array Add lime green")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(54.398, 12.309, 6.858), Closest Player To(Vector(54.398, 12.309, 6.858), Team 1)) <= 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(43.071, 9.503, 17.176));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(60.473, 9.861, -1.241));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(57.440, 1.504, -6.271));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(56.931, 8.810, 20.394));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(53.873, 2.296, 6.386));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(57.998, 0.991, 26.797));
	}
}

rule("SpawnPoints Array Remove lime green")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(54.398, 12.309, 6.858), Closest Player To(Vector(54.398, 12.309, 6.858), Team 1)) > 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(43.071, 9.503, 17.176));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(60.473, 9.861, -1.241));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(57.440, 1.504, -6.271));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(56.931, 8.810, 20.394));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(53.873, 2.296, 6.386));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(57.998, 0.991, 26.797));
	}
}

rule("SpawnPoints Array Add 2nd last defender spawn after the 2nd teleporter black")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(101.454, 4.887, -27.820), Closest Player To(Vector(101.454, 4.887, -27.820), Team 1)) <= 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(115.775, 0.455, 1.954));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(97.672, 3.455, -25.625));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(100.319, -1.387, -36.053));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(99.784, 3.240, -15.818));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(82.001, -2.744, -24.741));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(89.035, 1.856, -2.363));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(88.545, -2.540, -47.606));
	}
}

rule("SpawnPoints Array Remove 2nd last def spawn black")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(101.454, 4.887, -27.820), Closest Player To(Vector(101.454, 4.887, -27.820), Team 1)) > 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(115.775, 0.455, 1.954));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(97.672, 3.455, -25.625));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(100.319, -1.387, -36.053));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(99.784, 3.240, -15.818));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(82.001, -2.744, -24.741));
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(89.035, 1.856, -2.363));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(88.545, -2.540, -47.606));
	}
}

rule("zero escape add")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(104.187, 1.740, 63.810), Closest Player To(Vector(104.187, 1.740, 63.810), Team 1)) <= 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(104.399, 1.529, 55.394));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(100.999, -1.438, 62.895));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(81.463, 1.631, 65.741));
	}
}

rule("SpawnPoints Array Remove round zero escape")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(104.187, 1.740, 63.810), Closest Player To(Vector(104.187, 1.740, 63.810), Team 1)) > 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(104.399, 1.529, 55.394));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(100.999, -1.438, 62.895));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(81.463, 1.631, 65.741));
	}
}

rule("SpawnPoints Array Add Area power room")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(36.058, -0.821, -13.345), Closest Player To(Vector(36.058, -0.821, -13.345), Team 1)) <= 20;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(16.835, -0.424, -27.392));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(52.648, -2.545, -12.315));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(35.207, -2.389, -6.370));
	}
}

rule("SpawnPoints Array Remove Area power room")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(36.058, -0.821, -13.345), Closest Player To(Vector(36.058, -0.821, -13.345), Team 1)) > 20;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(16.835, -0.424, -27.392));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(52.648, -2.545, -12.315));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(35.207, -2.389, -6.370));
	}
}

rule("SpawnPoints Array Add just before last point")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(94.181, 5.663, 7.495), Closest Player To(Vector(94.181, 5.663, 7.495), Team 1)) <= 18;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(79.673, 10.951, 12.060));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(84.669, 6.455, 13.799));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(89.189, 1.856, -1.891));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(93.350, 1.642, 23.943));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(85.923, -2.271, 6.780));
	}
}

rule("SpawnPoints Array Remove before last")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(94.181, 5.663, 7.495), Closest Player To(Vector(94.181, 5.663, 7.495), Team 1)) > 18;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(79.673, 10.951, 12.060));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(84.669, 6.455, 13.799));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(89.189, 1.856, -1.891));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(93.350, 1.642, 23.943));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(85.923, -2.271, 6.780));
	}
}

rule("SpawnPoints Array Add stairs 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(76.924, 4.197, -57.927), Closest Player To(Vector(76.924, 4.197, -57.927), Team 1)) <= 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(74.491, 1.455, -63.060));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(63.086, -2.398, -47.470));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(70.782, 3.455, -46.136));
	}
}

rule("SpawnPoints Array Remove stairs 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(76.924, 4.197, -57.927), Closest Player To(Vector(76.924, 4.197, -57.927), Team 1)) > 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(74.491, 1.455, -63.060));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(63.086, -2.398, -47.470));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(70.782, 3.455, -46.136));
	}
}

rule("SpawnPoints Array Add stairs 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(52.049, 2.711, -75.253), Closest Player To(Vector(52.049, 2.711, -75.253), Team 1)) <= 12;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(53.157, -0.501, -81.396));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(47.787, 3.455, -69.607));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(39.786, -4.557, -58.394));
	}
}

rule("SpawnPoints Array Remove stairs 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(52.049, 2.711, -75.253), Closest Player To(Vector(52.049, 2.711, -75.253), Team 1)) > 12;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(53.157, -0.501, -81.396));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(47.787, 3.455, -69.607));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(39.786, -4.557, -58.394));
	}
}

rule("SpawnPoints Array Add purple cliffside")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(65.474, -3.677, -135.486), Closest Player To(Vector(65.474, -3.677, -135.486), Team 1)) <= 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(64.358, -5.520, -120.832));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(56.838, 1.455, -137.452));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(59.640, -5.376, -146.977));
	}
}

rule("SpawnPoints Array Remove cliffside")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(65.474, -3.677, -135.486), Closest Player To(Vector(65.474, -3.677, -135.486), Team 1)) > 14;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(64.358, -5.520, -120.832));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(56.838, 1.455, -137.452));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(59.640, -5.376, -146.977));
	}
}

rule("SpawnPoints Array Add first tele")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(6.428, 1.339, -85.958), Closest Player To(Vector(6.428, 1.339, -85.958), Team 1)) <= 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(29.917, 4.488, -87.947));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(20.652, 3.498, -64.296));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(3.542, -4.545, -73.947));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(-9.227, -0.545, -89.102));
		"5"
		Modify Global Variable(Y, Append To Array, Vector(7.435, -1.541, -114.801));
		"6"
		Modify Global Variable(Y, Append To Array, Vector(12.684, 3.455, -75.251));
		"7"
		Modify Global Variable(Y, Append To Array, Vector(24.054, -4.308, -85.999));
	}
}

rule("SpawnPoints Array Remove first tele")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(6.428, 1.339, -85.958), Closest Player To(Vector(6.428, 1.339, -85.958), Team 1)) > 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(29.917, 4.488, -87.947));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(20.652, 3.498, -64.296));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(3.542, -4.545, -73.947));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(-9.227, -0.545, -89.102));
		"5"
		Modify Global Variable(Y, Remove From Array By Value, Vector(7.435, -1.541, -114.801));
		"6"
		Modify Global Variable(Y, Remove From Array By Value, Vector(12.684, 3.455, -75.251));
		"7"
		Modify Global Variable(Y, Remove From Array By Value, Vector(24.054, -4.308, -85.999));
	}
}

rule("SpawnPoints Array Add first part big shipppp")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(43.380, 0.800, -50.511), Closest Player To(Vector(43.380, 0.800, -50.511), Team 1)) <= 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(49.334, 3.455, -67.696));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(48.993, 9.236, -50.404));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(30.281, 3.455, -49.440));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(55.032, -4.545, -67.526));
		"5"
		Modify Global Variable(Y, Append To Array, Vector(29.485, -0.545, -33.100));
		"6"
		Modify Global Variable(Y, Append To Array, Vector(42.695, -0.055, -48.912));
		"7"
		Modify Global Variable(Y, Append To Array, Vector(56.763, 3.455, -52.998));
	}
}

rule("SpawnPoints Array Remove first part big ship")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(43.380, 0.800, -50.511), Closest Player To(Vector(43.380, 0.800, -50.511), Team 1)) > 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(49.334, 3.455, -67.696));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(48.993, 9.236, -50.404));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(30.281, 3.455, -49.440));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(55.032, -4.545, -67.526));
		"5"
		Modify Global Variable(Y, Remove From Array By Value, Vector(29.485, -0.545, -33.100));
		"6"
		Modify Global Variable(Y, Remove From Array By Value, Vector(42.695, -0.055, -48.912));
		"7"
		Modify Global Variable(Y, Remove From Array By Value, Vector(56.763, 3.455, -52.998));
	}
}

rule("spawnpoint array add massive ship room 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(61.601, 1.021, -27.356), Closest Player To(Vector(61.601, 1.021, -27.356), Team 1)) <= 25;
		disabled Global.C > 3;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(65.759, 10.339, -35.067));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(62.627, 2.773, -23.267));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(73.236, -2.545, -41.200));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(74.081, -2.646, -25.102));
		"5"
		Modify Global Variable(Y, Append To Array, Vector(47.691, -2.849, -32.269));
		"6"
		Modify Global Variable(Y, Append To Array, Vector(81.415, 9.455, 18.870));
		"7"
		Modify Global Variable(Y, Append To Array, Vector(61.536, 10.477, -39.120));
	}
}

rule("SpawnPoints Array Remove massive ship room 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(61.601, 1.021, -27.356), Closest Player To(Vector(61.601, 1.021, -27.356), Team 1)) > 25;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(65.759, 10.339, -35.067));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(62.627, 2.773, -23.267));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(73.236, -2.545, -41.200));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(74.081, -2.646, -25.102));
		"5"
		Modify Global Variable(Y, Remove From Array By Value, Vector(47.691, -2.849, -32.269));
		"6"
		Modify Global Variable(Y, Remove From Array By Value, Vector(81.415, 9.455, 18.870));
		"7"
		Modify Global Variable(Y, Remove From Array By Value, Vector(61.536, 10.477, -39.120));
	}
}

rule("SpawnPoints Array Add last point")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(72.009, 11.983, 43.957), Closest Player To(Vector(72.009, 11.983, 43.957), Team 1)) <= 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Append To Array, Vector(81.726, 9.455, 18.039));
		"2"
		Modify Global Variable(Y, Append To Array, Vector(68.105, 4.952, 44.754));
		"3"
		Modify Global Variable(Y, Append To Array, Vector(73.882, -0.487, 59.149));
		"4"
		Modify Global Variable(Y, Append To Array, Vector(83.394, 2.973, 26.722));
		"5"
		Modify Global Variable(Y, Append To Array, Vector(81.726, 9.455, 18.039));
		"6"
		Modify Global Variable(Y, Append To Array, Vector(69.873, 9.460, 13.064));
		"7"
		Modify Global Variable(Y, Append To Array, Vector(58.676, 8.810, 20.626));
		"8"
		Modify Global Variable(Y, Append To Array, Vector(48.297, 1.872, 28.185));
	}
}

rule("SpawnPoints Array Remove last point")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(72.009, 11.983, 43.957), Closest Player To(Vector(72.009, 11.983, 43.957), Team 1)) > 34;
	}

	actions
	{
		"1"
		Modify Global Variable(Y, Remove From Array By Value, Vector(81.726, 9.455, 18.039));
		"2"
		Modify Global Variable(Y, Remove From Array By Value, Vector(68.105, 4.952, 44.754));
		"3"
		Modify Global Variable(Y, Remove From Array By Value, Vector(73.882, -0.487, 59.149));
		"4"
		Modify Global Variable(Y, Remove From Array By Value, Vector(83.394, 2.973, 26.722));
		"5"
		Modify Global Variable(Y, Remove From Array By Value, Vector(81.726, 9.455, 18.039));
		"6"
		Modify Global Variable(Y, Remove From Array By Value, Vector(69.873, 9.460, 13.064));
		"7"
		Modify Global Variable(Y, Remove From Array By Value, Vector(58.676, 8.810, 20.626));
		"8"
		Modify Global Variable(Y, Remove From Array By Value, Vector(48.297, 1.872, 28.185));
	}
}

rule("Door array list")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Vectordoorpositions[0] = Vector(43.199, -2.800, -139.704);
		Global.Vectordoorpositions[1] = Vector(41.610, -2.825, -149.923);
		Global.Vectordoorpositions[2] = Vector(45.672, -2.825, -151.109);
		Global.Vectordoorpositions[3] = Vector(38.568, 2.088, -147.437);
		Global.Vectordoorpositions[4] = Vector(51.734, 2.175, -142.692);
		Global.Vectordoorpositions[5] = Vector(46.312, 5.185, -131.972);
		Global.Vectordoorpositions[6] = Vector(36.646, 5.208, -122.174);
		Global.Vectordoorpositions[7] = Vector(28.658, 5.175, -107.692);
		Global.Vectordoorpositions[8] = Vector(36.610, -3.825, -88.342);
		Global.Vectordoorpositions[9] = Vector(30.230, -3.844, -81.521);
		Global.Vectordoorpositions[10] = Vector(37.064, -10.013, -100.803);
		Global.Vectordoorpositions[11] = Vector(24.867, 1.175, -104.331);
		Global.Vectordoorpositions[12] = Vector(35.804, -2.825, -122.663);
		Global.Vectordoorpositions[13] = Vector(34.469, 1.208, -113.023);
		Global.Vectordoorpositions[14] = Vector(11.062, -0.621, -96.084);
		Global.Vectordoorpositions[15] = Vector(5.220, -3.825, -81.613);
		Global.Vectordoorpositions[16] = Vector(10.798, 4.175, -70.316);
		Global.Vectordoorpositions[17] = Vector(39.721, -3.803, -75.623);
		Global.Vectordoorpositions[18] = Vector(23.588, -3.837, -57.788);
		Global.Vectordoorpositions[19] = Vector(49.356, -3.383, -69.860);
		Global.Vectordoorpositions[20] = Vector(46.023, 4.199, -72.151);
		Global.Vectordoorpositions[21] = Vector(39.938, 4.213, -74.971);
		Global.Vectordoorpositions[22] = Vector(22.569, 4.213, -58.327);
		Global.Vectordoorpositions[23] = Vector(32.428, 4.208, -46.344);
		Global.Vectordoorpositions[24] = Vector(33.298, 0.166, -39.859);
		Global.Vectordoorpositions[25] = Vector(69.809, 4.175, -47.894);
		Global.Vectordoorpositions[26] = Vector(44.389, 4.175, -33.988);
		Global.Vectordoorpositions[27] = Vector(67.358, -1.799, -50.859);
		Global.Vectordoorpositions[28] = Vector(82.610, -1.825, -35.370);
		Global.Vectordoorpositions[29] = Vector(83.528, -1.820, -35.991);
		Global.Vectordoorpositions[30] = Vector(92.800, -1.797, -40.006);
		Global.Vectordoorpositions[31] = Vector(66.881, -1.814, -14.850);
		Global.Vectordoorpositions[32] = Vector(82.853, 4.212, -32.079);
		Global.Vectordoorpositions[33] = Vector(62.420, 2.175, -1.343);
		Global.Vectordoorpositions[34] = Vector(37.064, -10.013, -100.803);
		Global.Vectordoorpositions[35] = Vector(24.867, 1.175, -104.331);
		Global.Vectordoorpositions[36] = Vector(58.675, 2.199, 3.210);
		Global.Vectordoorpositions[37] = Vector(45.954, 4.198, 1.596);
		Global.Vectordoorpositions[38] = Vector(43.465, 4.175, 15.410);
		Global.Vectordoorpositions[39] = Vector(51.186, 2.175, 13.365);
		Global.Vectordoorpositions[40] = Vector(60.213, 2.175, 29.971);
		Global.Vectordoorpositions[41] = Vector(62.133, 2.175, 38.239);
		Global.Vectordoorpositions[42] = Vector(73.174, 2.206, 16.585);
		Global.Vectordoorpositions[43] = Vector(94.456, 2.212, 20.829);
		Global.Vectordoorpositions[44] = Vector(62.724, 10.197, 32.680);
		Global.Vectordoorpositions[45] = Vector(92.800, -1.797, -40.006);
		Global.Vectordoorpositions[46] = Vector(94.248, -0.825, -5.395);
		Global.Vectordoorpositions[47] = Vector(105.328, -0.801, -17.012);
		Global.Vectordoorpositions[48] = Vector(81.292, -1.825, 2.031);
		Global.Vectordoorpositions[49] = Vector(78.752, -1.825, 4.896);
		Global.Vectordoorpositions[50] = Vector(43.199, -2.800, -139.704);
		Global.Vectordoorpositions[51] = Vector(58, -10, -113);
	}
}

rule("block spawn door effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(100.376, 2.492, 53.375), 2, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(80.921, 2.560, 63.437), 2, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(88.378, 2.615, 60.687), 2, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(93.975, 2.622, 50.437), 4, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(92.609, 0.117, 29.701), 2, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(60.486, 1.853, 50.473), 2, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(42.683, -4.334, -33.114), 2, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Bad Aura, Color(Red), Vector(65.275, -4.107, -56.335), 2, Visible To Position and Radius);
	}
}

rule("spawn door blockers 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(100.376, 2.492, 53.375), 2.500, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(104.474, 1.464, 56.311));
	}
}

disabled rule("teleport door 1a")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Random Value In Array(Global.Vectordoorpositions), 2, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(39.453, -3.643, -135.826));
	}
}

disabled rule("impulse door 51")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[51], 21, Team 1, Off) == True;
		Global.impulseDoorArray == 0;
	}

	actions
	{
		Apply Impulse(Event Player, Global.Vectordoorpositions[51], 70, To Player, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("move spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(112.898, -0.486, 72.217));
	}
}

disabled rule("BUY DOOR 0")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[0], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[0]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[0] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("door effects list area 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.optimizeddoors == 0;
	}

	actions
	{
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[0], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 0, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[1], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 1, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[2], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 2, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[3], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 3, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[4], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 4, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[5], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 5, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[6], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 6, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[7], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 7, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[8], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 8, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[9], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 9, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[10], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 10, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[11], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 11, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[12], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 12, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[13], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 13, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[14], 4, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 14, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[15], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 15, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[16], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 16, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[17], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 17, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[18], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 18, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[19], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 19, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[20], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 20, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Light Shaft, Color(White), Global.Vectordoorpositions[51], 21,
			Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 51, Append To Array, Last Created Entity);
	}
}

disabled rule("door effects list area 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.optimizeddoors == 1;
	}

	actions
	{
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[21], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 21, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[22], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 22, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[23], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 23, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[24], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 24, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[25], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 25, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[26], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 26, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[27], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 27, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[28], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 28, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[29], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 29, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[30], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 30, Append To Array, Last Created Entity);
	}
}

disabled rule("door effects list area 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.optimizeddoors == 1;
	}

	actions
	{
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[31], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 31, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[32], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 32, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[33], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 33, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[34], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 34, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[35], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 35, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[36], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 36, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[37], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 37, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[38], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 38, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[39], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 39, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[40], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 40, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[41], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 41, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[42], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 42, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[43], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 43, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[44], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 44, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[45], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 45, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[46], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 46, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[47], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 47, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[48], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 48, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[49], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 49, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Global.Vectordoorpositions[50], 2, Visible To Position and Radius);
		Modify Global Variable At Index(gamestarted, 50, Append To Array, Last Created Entity);
	}
}

disabled rule("BUY DOOR 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[1], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[1] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[1]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[1] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[2], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[2] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[2]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[2] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[3], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[3] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[3]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[3] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[4], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.impulseDoorArray[4] == 0;
		Event Player.points >= 1000;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[0]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[4] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[5], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[5] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[5]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[5] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 6")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[6], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[6] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[6]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[6] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 7")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[7], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[7] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[7]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[7] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 8")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[8], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[8] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[8]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[8] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 9")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[9], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[9] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[9]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[9] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 10")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[10], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[10] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[10]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[10] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 11")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[11], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[11] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[11]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[11] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 12")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[12], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[12] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[12]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[12] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 13")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[13], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[13] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[13]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[13] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 14")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[14], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[14] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[14]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[14] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[15], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[15] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[15]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[15] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 16")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[16], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[16] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[16]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[16] = 1;
		Global.optimizeddoors = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 17")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[17], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.impulseDoorArray[17] == 0;
		Event Player.points >= 1000;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[17]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[17] = 1;
		Global.optimizeddoors = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 18")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[18], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[18] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[18]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[18] = 1;
		Global.optimizeddoors = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 19")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[19], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.impulseDoorArray[19] == 0;
		Event Player.points >= 1000;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[19]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[19] = 1;
		Global.optimizeddoors = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[20], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[20] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[20]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[20] = 1;
		Global.optimizeddoors = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 21")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[21], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[21] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[21]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[21] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 22")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[22], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[22] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[22]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[22] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 23")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[23], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[23] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[23]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[23] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 24")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[24], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[24] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[24]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[24] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 25")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[25], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[25] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[25]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[25] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 26")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[26], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[26] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[26]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[26] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 27")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[27], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[27] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[27]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[27] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 28")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[28], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[28] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[28]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[28] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 29")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[29], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[29] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[29]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[29] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 30")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[30], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[30] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[30]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[30] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 31")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[31], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[31] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[31]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[31] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 32")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[32], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[32] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[32]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[32] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 33")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[33], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[33] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[33]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[33] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 34")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[34], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[34] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[34]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[34] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 35")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[35], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[35] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[35]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[35] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 36")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[36], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[36] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[36]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[36] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 37")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[37], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[37] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[37]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[37] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 38")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[38], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[38] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[38]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[38] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 39")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[39], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[39] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[39]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[39] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 40")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[40], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[40] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[40]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[40] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 41")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[41], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[41] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[41]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[41] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 42")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[42], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[42] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[42]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[42] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 43")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[43], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[43] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[43]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[43] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 44")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[44], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[44] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[44]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[44] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 45")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[45], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[45] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[45]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[45] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 46")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[46], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[46] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[46]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[46] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 47")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[47], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[47] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[47]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[47] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 48")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[48], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[48] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[48]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[48] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 49")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[49], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[49] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[49]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[49] = 1;
		Event Player.points -= 1000;
	}
}

disabled rule("BUY DOOR 50")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[50], 4, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[50] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[50]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[50] = 1;
		Event Player.points -= 1000;
	}
}

rule("button heald teleporter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Players Within Radius(Vector(25.226, -4.335, -73.786), 3, All Teams, Off) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Teleport(Event Player, Vector(82.148, 1.846, 39.475));
	}
}

rule("create teleporter effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(82.566, -0.025, 39.968), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(82.566, -0.025, 39.968), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(82.566, -0.025, 39.968), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(82.566, -0.025, 39.968), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sparkles, Color(Blue), Vector(82.566, -0.025, 39.968), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(82.566, -0.025, 39.968), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(82.566, -0.025, 39.968), 1, Visible To Position and Radius);
	}
}

rule("create teleporter effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(70.643, -2.308, -27.773), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(70.643, -2.308, -27.773), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(70.644, -2.308, -27.773), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(70.644, -2.308, -27.773), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sparkles, Color(Blue), Vector(70.644, -2.308, -27.773), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(70.644, -2.308, -27.773), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(70.644, -2.308, -27.773), 1, Visible To Position and Radius);
	}
}

rule("create teleporter effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(25.354, -4.335, -73.440), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(25.354, -4.335, -73.440), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(25.354, -4.335, -73.440), 1, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Good Aura, Color(Blue), Vector(25.354, -4.335, -73.440), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sparkles, Color(Blue), Vector(25.354, -4.335, -73.440), 3, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(25.354, -4.335, -73.440), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(25.354, -4.335, -73.440), 1, Visible To Position and Radius);
	}
}

rule("button heald 2 teleporter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Players Within Radius(Vector(70.674, -2.308, -27.755), 3, All Teams, Off) == True;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Blue), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Wait(0.250, Ignore Condition);
		Destroy Effect(Last Created Entity);
		Teleport(Event Player, Vector(82.148, 1.846, 39.475));
	}
}

disabled rule("Challenge wave effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Black), Event Player, 80, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Event Player, 5, Visible To Position and Radius);
		Wait(15, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("Fetch me their souls..."));
	}
}

rule("spawn moira")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Moira), Team 1, 4, Vector(97.557, 1.533, 63.156), Vector(76.502, -8.122, 45.167));
	}
}

rule("captions moira first cutscene")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.cutscene == 1;
	}

	actions
	{
		Wait(6, Ignore Condition);
		Create In-World Text(All Players(All Teams), Custom String(
			"greetings heros, i brought you all here for a very important message."), Players On Hero(Hero(Moira), Team 1), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Wait(4, Ignore Condition);
		disabled Destroy In-World Text(Last Text ID);
		disabled Create In-World Text(All Players(All Teams), Custom String("There has been a biological mishap in one of my laboratories"),
			Players On Hero(Hero(Moira), Team 1), 1, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		disabled Wait(4, Ignore Condition);
		disabled Destroy In-World Text(Last Text ID);
		disabled Create In-World Text(All Players(All Teams), Custom String(
			"We need you heros to fight off the evil clones and make the world safe again!"), Players On Hero(Hero(Moira), All Teams), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		disabled Wait(4, Ignore Condition);
		disabled Destroy In-World Text(Last Text ID);
		disabled Create In-World Text(All Players(All Teams), Custom String("... Though, to be honest I might have tested on several heros"),
			Players On Hero(Hero(Moira), Team 1), 1, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		disabled Wait(4, Ignore Condition);
		disabled Destroy In-World Text(Last Text ID);
		disabled Create In-World Text(All Players(All Teams), Custom String(
			"there are hero clones of Briggeta, torbjorn, rien, genji, winston... but hopefully you guys can figure out what to do."),
			Players On Hero(Hero(Moira), Team 1), 1, Clip Against Surfaces, Visible To Position and String, Color(White),
			Default Visibility);
		disabled Wait(4, Ignore Condition);
		disabled Destroy In-World Text(Last Text ID);
		disabled Create In-World Text(All Players(All Teams), Custom String("Good luck out there heros, you'll need it..."), Players On Hero(Hero(
			Moira), Team 1), 1, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		disabled Wait(4, Ignore Condition);
		Destroy In-World Text(Last Text ID);
		Small Message(All Players(All Teams), Custom String("Moira: oh no! looks like one of the zombies broke in"));
		disabled Wait(4, Ignore Condition);
		disabled Destroy In-World Text(Last Text ID);
		Stop Camera(All Players(All Teams));
		Destroy All Dummy Bots;
	}
}

rule("camera onto moira and clone")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.cutscene == 1;
	}

	actions
	{
		disabled Wait(0.500, Ignore Condition);
		disabled Start Camera(Event Player, Vector(101.937, 3.570, 67.455), Players On Hero(Hero(Moira), Team 1), 2);
		disabled Wait(28, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, 0, Vector(82.880, 2.485, 65.639), Vector(1000, 0, -900));
		disabled Start Camera(Event Player, Vector(82.159, 1.515, 64.615), Players On Hero(Hero(Brigitte), Team 2), 1);
		disabled Wait(2.300, Ignore Condition);
		disabled Start Forcing Throttle(Players On Hero(Hero(Brigitte), Team 2), 1, 1, 0, 1, 0, 1);
		disabled Wait(0.700, Ignore Condition);
		disabled Start Camera(Event Player, Vector(93.596, 4.656, 64.713), Players On Hero(Hero(Brigitte), Team 2), 0);
		disabled Wait(1.500, Ignore Condition);
		disabled Stop Forcing Throttle(Players On Hero(Hero(Brigitte), Team 2));
		Stop Camera(Event Player);
		Enable Hero HUD(Event Player);
		Global.roundnumber = 1;
	}
}

rule("set hud settings")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Music;
		Disable Hero HUD(Event Player);
	}
}

rule("effects cutscene")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(Team 1), Bad Aura, Color(Black), Vector(68.968, -5.209, 56.065), 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(78.442, 90, 41.546), 20, Visible To Position and Radius);
	}
}

rule("pregame camera")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Start Camera(Event Player, Vector(78.442, 100, 41.546), Players On Hero(Hero(Moira), Team 1), 40);
		Create In-World Text(All Players(Team 1), Custom String("Press F to start the game"), Vector(78.442, 95, 41.546), 3,
			Clip Against Surfaces, Visible To Position and String, Color(Aqua), Default Visibility);
	}
}

rule("start cutscene")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.cutscene == 0;
	}

	actions
	{
		Global.cutscene = 1;
	}
}

rule("Rule 8")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.cutscene == 2;
	}

	actions
	{
		Start Camera(Event Player, Vector(101.241, 56.478, 36.933), Event Player, 0);
		disabled Set Status(Event Player, Null, Knocked Down, 9999);
		Wait(0.250, Ignore Condition);
		Teleport(Host Player, Vector(92.703, 55, 50.696));
		Set Gravity(Event Player, 0);
		Wait(3, Ignore Condition);
		Create In-World Text(All Players(All Teams), Custom String("BLAST OFF!"), Event Player, 3.500, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Attach Players(Players On Hero(Hero(Winston), All Teams), Host Player, Vector(0, -4.500, 0));
		Attach Players(Players In Slot(1, Team 1), Host Player, Vector(1, 0, 0));
	}
}

rule("ride off into sunset on winston")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.cutscene == 2;
	}

	actions
	{
		Destroy All Dummy Bots;
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 1, 5, Vector(51.598, -3.720, -58.597), Vector(126.569, 56.457, 59.016));
		Set Gravity(Players On Hero(Hero(Winston), Team 1), 100);
		Start Scaling Player(Players On Hero(Hero(Winston), Team 1), 2.800, True);
		Wait(0.250, Ignore Condition);
		disabled Attach Players(Players On Hero(Hero(Winston), All Teams), Host Player, Vector(0, -4.500, 0));
		Start Forcing Dummy Bot Name(Players On Hero(Hero(Winston), Team 1), Custom String("pretend im a rocket"));
		Wait(5, Ignore Condition);
		Communicate(Players On Hero(Hero(Winston), Team 1), Going In);
		Wait(4, Ignore Condition);
		Declare Team Victory(Team 1);
	}
}

rule("rocket effect for winston")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	actions
	{
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Orange), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Bad Aura, Color(Red), Players On Hero(Hero(Winston), Team 1), 1,
			Visible To Position and Radius);
	}
}

rule("Purchase Lucio")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(14.580, 1, -9.850)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 10000 * 3;
		disabled Hero Of(Event Player) != Hero(Lúcio);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Lúcio));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 10000 * 3;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 50;
	}
}

rule("Purchase Hanzo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(35.487, 4.455, -119.109)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Hanzo);
		disabled Global.C >= 1;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Hanzo));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(23.743, -1.545, -126.543)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Zenyatta);
		disabled Global.C >= 1;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Zenyatta));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Soldier 76")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(22.282, -1.545, -144.081)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Soldier: 76);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Soldier: 76));
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

rule("Purchase Mercy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(35.743, -4.545, -80.708)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Mercy);
		disabled Global.C >= 2;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Pharah")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(3.226, -1.519, -93.389)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Pharah);
		disabled Global.C >= 2;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Pharah));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Junkrat")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(34.025, -1.545, -153.738)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Junkrat);
		disabled Global.C >= 3;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Junkrat));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

disabled rule("Purchase Symmetra")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(55.151, -0.545, -77.987)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Symmetra);
		Global.C >= 3;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Symmetra));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Doomfist")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(30.041, -0.545, -34.893)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 500 + 500;
		disabled Hero Of(Event Player) != Hero(Doomfist);
		disabled Global.C >= 4;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Doomfist));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 500 + 500;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Baptiste")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(80.858, 1.455, -62.009)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Baptiste);
		disabled Global.C >= 4;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Baptiste));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Bastion")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(89.795, -2.540, -45.131)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Bastion);
		disabled Global.C >= 4;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Bastion));
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

disabled rule("Purchase Reaper")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(90.791, -0.487, 48.802)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 * 5;
		disabled Hero Of(Event Player) != Hero(Reaper);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Reaper));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 * 5;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Genji")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(78.982, 1.455, 10.536)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Genji);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Genji));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Ashe")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(95.063, 3.455, -26.599)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Ashe);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Ashe));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Zarya")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(84.857, -2.545, 4.549)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(Zarya);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Zarya));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Roadhog")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(40.698, 3.455, 18.702)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(Roadhog);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Roadhog));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Dva")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(54.005, 1.455, -4.688)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(D.Va);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Brigitte")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(60.036, -4.545, -60.961)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(Brigitte);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Brigitte));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("Purchase Reinhardt")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(38.903, -4.695, -37.979)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Reinhardt);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Reinhardt));
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

disabled rule("Purchase Torbjorn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(56.725, 3.799, -41.531)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Torbjörn);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Torbjörn));
		Event Player.points -= 750 + 1000;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

rule("Purchase Sigma")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(100.763, -1.689, -30.269)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Sigma);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Sigma));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

rule("Purchase Orisa")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(91.440, 1.455, 14.523)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250 * 1;
		disabled Hero Of(Event Player) != Hero(Orisa);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Orisa));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250 * 1;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

rule("Purchase Moira")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(62.500, 1.455, 43.528)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Moira);
		disabled Global.C >= 2;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Moira));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

disabled rule("Purchase Mei2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(51.309, 3.455, 3.336)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Mei);
		Global.C >= 3;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Mei));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.ammo = 10;
	}
}

rule("buy hero effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.roundnumber == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(35.743, -4.545, -80.708), 2, Visible To Position and Radius);
		"mercy"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Mercy)),
			1000)), Vector(35.743, -4.545, -80.708), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(14.580, 1, -9.850), 2, Visible To Position and Radius);
		"lucio"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Lúcio)),
			10000 * 3)), Vector(14.580, 1, -9.850), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(22.282, -1.545, -144.081), 2, Visible To Position and Radius);
		"soldier 76"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(
			Soldier: 76)), 1000)), Vector(22.282, -1.545, -144.081), 1, Clip Against Surfaces, Visible To Position and String, Color(
			Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(35.487, 4.455, -119.109), 2, Visible To Position and Radius);
		"hanzo"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Hanzo)),
			1250)), Vector(35.487, 4.455, -119.109), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		"zenyatta"
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(23.743, -1.545, -126.543), 2, Visible To Position and Radius);
		"zenyatta"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Zenyatta)),
			1000)), Vector(23.743, -1.545, -126.543), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(3.226, -1.519, -93.389), 2, Visible To Position and Radius);
		"pharah"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Pharah)),
			1000)), Vector(3.226, -1.519, -93.389), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(34.025, -1.545, -153.738), 2, Visible To Position and Radius);
		"junkrat"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Junkrat)),
			1250)), Vector(34.025, -1.545, -153.738), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(30.041, -0.545, -34.893), 2, Visible To Position and Radius);
		"doomfist"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Doomfist)),
			500 + 500)), Vector(30.041, -0.545, -34.893), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(80.858, 1.455, -62.009), 2, Visible To Position and Radius);
		"baptiste"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Baptiste)),
			1250)), Vector(80.858, 1.455, -62.009), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(89.795, -2.540, -45.131), 2, Visible To Position and Radius);
		"bastion"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Bastion)),
			1000 + 750)), Vector(89.795, -2.540, -45.131), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(90.791, -0.487, 48.802), 2, Visible To Position and Radius);
		"reaper"
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Reaper)),
			1000 * 5)), Vector(90.791, -0.487, 48.802), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		"symmetra"
		disabled Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(55.151, -0.545, -77.987), 2, Visible To Position and Radius);
		"symmetra"
		disabled Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Symmetra)),
			1000 + 750)), Vector(55.151, -0.545, -77.987), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(84.857, -2.545, 4.549), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Zarya)),
			1750)), Vector(84.857, -2.545, 4.549), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(95.063, 3.455, -26.599), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Ashe)),
			1250)), Vector(95.063, 3.455, -26.599), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(78.982, 1.455, 10.536), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Genji)),
			1250)), Vector(78.982, 1.455, 10.536), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(40.698, 3.455, 18.702), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Roadhog)),
			1750)), Vector(40.698, 3.455, 18.702), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(54.005, 1.455, -4.688), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(D.Va)),
			1750)), Vector(54.005, 1.455, -4.688), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(60.036, -4.545, -60.961), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Brigitte)),
			1750)), Vector(60.036, -4.545, -60.961), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(38.903, -4.695, -37.979), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Reinhardt)),
			750 + 1000)), Vector(38.903, -4.695, -37.979), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		disabled Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(56.725, 3.799, -41.531), 2, Visible To Position and Radius);
		disabled Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Torbjörn)),
			1000 + 750)), Vector(56.725, 3.799, -41.531), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(100.763, -1.689, -30.269), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Sigma)),
			1000 + 750)), Vector(100.763, -1.689, -30.269), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(91.440, 1.455, 14.523), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Orisa)),
			1250 * 1)), Vector(91.440, 1.455, 14.523), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(51.309, 3.455, 3.336), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Mei)),
			1000 + 750)), Vector(51.309, 3.455, 3.336), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(62.500, 1.455, 43.528), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(Moira)),
			1250)), Vector(62.500, 1.455, 43.528), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(78.386, 9.455, 18.064), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", Hero Icon String(Hero(
			Widowmaker)), 1000)), Vector(78.386, 9.455, 18.064), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple),
			Default Visibility);
	}
}

rule("Purchase widowmaker")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(78.438, 10.550, 18.102)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Sigma);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Widowmaker));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

rule("mystery box")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Global.gamestarted[0]) <= 2;
		Event Player.points >= 950;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, First Of(Random Value In Array(Randomized Array(All Heroes))));
		Wait(0.100, Ignore Condition);
		disabled Kill(Event Player, Null);
		Wait(0.100, Ignore Condition);
		Resurrect(Event Player);
		Event Player.points -= 750;
		Loop If Condition Is True;
	}
}

rule("mystery box effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.gamestarted[0], 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), Custom String("Mystery box: 950 points")),
			Global.gamestarted[0], 1, Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.gamestarted[0], 2, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.gamestarted[0], 0.750, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.gamestarted[0], 0.750, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Global.gamestarted[0], 0.750, Visible To Position and Radius);
	}
}

rule("mystery box array positions")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.gamestarted[0] = Vector(39.917, -10.545, -91.448);
		Global.gamestarted[1] = Vector(52.023, -2.686, -30.393);
		Global.gamestarted[2] = Vector(113.688, 0.455, 0.604);
		Global.gamestarted[3] = Vector(81.437, 1.455, 24.274);
		Global.gamestarted[4] = Vector(57.060, 3.800, -41.634);
	}
}

disabled rule("spawn moira")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Moira), Team 1, 4, Vector(72.794, -9.521, 35.890), Vector(76.502, -8.122, 45.167));
	}
}

disabled rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 4;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String(
			"greetings heros, i brought you all here for a very important message."), Event Player, 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
	}
}

disabled rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Start Camera(Event Player, Vector(77.662, -8.487, 40.743), Players On Hero(Hero(Moira), Team 1), 0);
	}
}

disabled rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Music;
		Disable Hero HUD(Event Player);
	}
}

rule("Upgrade Effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.powerconnected == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Red), Vector(58.659, -2.545, -41.728), 1.500, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Cloud, Color(Orange), Vector(77.458, 98, 69.447), 20, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(47.896, 1.455, -142.491), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Juggernaut"), String("{0} {1}", 100, String(
			"{0}: {1}", String(""), 2500))), Vector(58.659, -2.545, -41.728), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Pack-a-Punch"), String("{0} {1}", 100, String(
			"{0}: {1}", String(""), 5000))), Vector(77.458, 100.277, 69.447), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Red), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("passive & healing dealt buff: 6000 points"), Vector(47.896, 1.455,
			-142.491), 1, Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Vector(4.680, -4.545, -73.896), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Headshot maniac"), String("{0} {1}", Custom String(
			"50% to 400%"), String("{0}: {1}", String(""), 4000))), Vector(4.680, -4.545, -73.896), 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(43.450, 3.455, 10.378), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Revive self: 10000 points"), Vector(43.450, 3.455, 10.378), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Double-mag"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Vector(9.229, -0.738, -110.548), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(9.229, -0.738, -110.548), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Sprint burst"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Vector(89.238, 1.455, 19.739), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(89.238, 1.455, 19.739), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Bucking brawler"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Vector(63.640, -5.696, -124.164), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(63.640, -5.696, -124.164), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Electric cherry"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2500))), Vector(25.670, -10.545, -112.179), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(25.670, -10.545, -112.179), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Carry sacrifice"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 10000))), Vector(105.358, -1.967, -23.181), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(105.358, -1.967, -23.181), 1.500, Visible To Position and Radius);
	}
}

rule("PERK Purchase pack a punch Upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(77.458, 100.277, 69.447)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 5000;
		Global.powerconnected == 1;
		Event Player.Pack == 0;
	}

	actions
	{
		Event Player.points -= 5000;
		Event Player.dmgmaniac = 200;
		Set Damage Dealt(Event Player, Event Player.dmgmaniac);
		Set Status(Event Player, Null, Burning, 9999);
		Event Player.Pack = 1;
		Wait(0.110, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Event Player.Maniac = 0;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK Purchase Health Upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(58.659, -2.545, -41.728)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2500;
		disabled Global.powerconnected == 1;
		Event Player.Jugg == 0;
	}

	actions
	{
		Event Player.points -= 2500;
		Wait(0.250, Ignore Condition);
		Set Max Health(Event Player, 200);
		Heal(Event Player, Null, 1000);
		Event Player.Jugg = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK Purchase Healing Upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(47.896, 1.455, -142.491)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 6000;
		Global.powerconnected == 1;
		Event Player.healvariable != 400;
	}

	actions
	{
		Event Player.points -= 6000;
		Event Player.healvariable = 400;
		Set Healing Dealt(Event Player, Event Player.healvariable);
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.500, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Purchase headshot maniac upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(4.680, -4.545, -73.896)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 4000;
		Global.powerconnected == 1;
	}

	actions
	{
		Event Player.Pack = 0;
		Event Player.points -= 4000;
		Clear Status(Event Player, Burning);
		Event Player.dmgmaniac = 200;
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Event Player.Maniac = 1;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("buy revive multiplayer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(43.450, 3.455, 10.378)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 10000;
		Global.powerconnected == 1;
		Event Player.revivebought == 0;
		Number Of Players(Team 1) > 1;
	}

	actions
	{
		Event Player.points -= 10000;
		Event Player.revived = 1;
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Event Player.revivebought = 1;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK buy double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(9.229, -0.738, -110.548)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2000;
		Global.powerconnected == 1;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.points -= 2000;
		Wait(0.250, Ignore Condition);
		Event Player.doublemag = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("Rule 12")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
	}
}

rule("PERK electric cherry")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.electriccherry == 1;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 1.500, Team 2, Off), Event Player, Frozen, 0.250);
		Wait(0.250, Ignore Condition);
		Kill(Players Within Radius(Event Player, 1.500, Team 2, Off), Event Player);
	}
}

rule("PERK carry sacrafice")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Living Players(Team 1) == 1;
		Number Of Players(Team 1) > 1;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.carrysacr == 1;
	}

	actions
	{
		Resurrect(All Dead Players(Team 1));
		Wait(0.250, Ignore Condition);
		Kill(Event Player, Null);
	}
}

rule("PERK hard hitter")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1000);
		"add the rest of the melee information here"
		Wait(0.500, Ignore Condition);
		"set damage to damage variable"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("FOLLOWERS mercy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		"copy info from other mercy sample"
		Create Dummy Bot(Hero(Ashe), Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Start Facing(Players In Slot(4, Team 1), Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(
			Filtered Array(All Living Players(Team 2), Current Array Element.T == 0), Distance Between(Event Player,
			Current Array Element))))), 400, To World, Direction and Turn Rate);
		Set Facing(Players In Slot(4, All Teams), Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(
			Eye Position(First Of(Sorted Array(Filtered Array(All Living Players(Team 2), Current Array Element.T == 0), Distance Between(
			Players In Slot(4, Team 1), Current Array Element)))), Team 2))), To World);
	}
}

disabled rule("TESTING create ana")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Ana), Team 2, -1, Eye Position(Event Player), Vector(0, 0, 0));
		Teleport(All Living Players(Team 2), Eye Position(Event Player));
	}
}

disabled rule("FOLLOWERS mini bastion helper")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Bastion), Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Wait(0.016, Ignore Condition);
		Press Button(Players In Slot(4, All Teams), Button(Ability 1));
		"needs slot fixed for all players"
		Attach Players(Players In Slot(4, All Teams), Event Player, Vector(0.250, 0.500, 0.250));
		Start Scaling Player(Players In Slot(4, Team 1), 0.010, True);
		Start Modifying Hero Voice Lines(Players In Slot(4, Team 1), 1.500, True);
		Set Damage Dealt(Players In Slot(4, Team 1), 20);
		Start Facing(Players In Slot(4, Team 1), Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(
			Filtered Array(All Living Players(Team 2), Current Array Element.T == 0), Distance Between(Event Player,
			Current Array Element))))), 400, To World, Direction and Turn Rate);
		Set Facing(Players In Slot(4, All Teams), Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(
			Eye Position(First Of(Sorted Array(Filtered Array(All Living Players(Team 2), Current Array Element.T == 0), Distance Between(
			Players In Slot(4, Team 1), Current Array Element)))), Team 2))), To World);
	}
}

disabled rule("bastion shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 4;
	}

	conditions
	{
		Players Within Radius(Players In Slot(4, Team 1), 10, Team 2, Surfaces And All Barriers) == True;
		Players Within Radius(Event Player, 10, All Teams, Off) == Is Alive(All Players(Team 2));
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

disabled rule("bastion shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 4;
	}

	conditions
	{
		Players Within Radius(Players In Slot(4, Team 1), 10, Team 2, Surfaces And All Barriers) == False;
		Players Within Radius(Event Player, 10, All Teams, Off) != Is Alive(All Players(Team 2));
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

disabled rule("bucking brawler")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Meleeing(Event Player) == True;
		disabled Event Player.brawler == 1;
	}

	actions
	{
		Apply Impulse(Victim, Vector Towards(Attacker, Victim), 20, To World, Cancel Contrary Motion);
		Set Status(Victim, Null, Knocked Down, 0.500);
		Disallow Button(Attacker, Button(Melee));
		Wait(2, Ignore Condition);
		Allow Button(Attacker, Button(Melee));
	}
}

disabled rule("ashe shoot")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 4;
	}

	conditions
	{
		Players Within Radius(Players In Slot(4, Team 1), 3, Team 2, Surfaces And All Barriers) == True;
		Players Within Radius(Event Player, 3, All Teams, Off) == Is Alive(All Players(Team 2));
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Communicate(Event Player, Incoming);
		Wait(8, Ignore Condition);
		Communicate(Event Player, Ready);
	}
}

disabled rule("xp system")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create Progress Bar HUD Text(Event Player, Event Player.ammo, Custom String("current level {0}", Event Player.experience), Top, 0,
			Color(Green), Color(Blue), Visible To Values and Color, Default Visibility);
	}
}

disabled rule("xp on body shot")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Was Critical Hit == False;
	}

	actions
	{
		Event Player.ammo += 5;
		Global.numberofzombies -= 1;
	}
}

disabled rule("gain level")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ammo >= 50;
	}

	actions
	{
		Event Player.experience += 1;
		Event Player.ammo = 0;
	}
}

disabled rule("xp on headshot")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Event Was Critical Hit == True;
	}

	actions
	{
		Event Player.ammo += 10;
	}
}

disabled rule("mccree attribute new starting points LEVEL 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.attributes == 1;
		Event Player.experience == 1;
	}

	actions
	{
		"set player variable points to 2000"
		Event Player.points = 3000;
	}
}

disabled rule("mccree attribute roll uses less ammo LEVEL 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.attributes == 2;
		Event Player.experience == 1;
	}

	actions
	{
		"set roll to use 200% less ammo "
		Event Player.P -= 0.250;
	}
}

disabled rule("mccree attribute flashbang damage LEVEL 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		disabled Event Player.attributes == 2;
	}

	actions
	{
		Set Damage Dealt(Event Player, 400);
		Wait(0.350, Ignore Condition);
		"set to variable for pack a punch or damage stat"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("mccree attribute enable ultimate LEVEL 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.attributes == 3;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("mccree attribute right click causes knockback LEVEL 10")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.attributes == 4;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Victim, Vector Towards(Attacker, Victim), 8, To World, Cancel Contrary Motion);
	}
}

disabled rule("mccree attribute roll deals 200 damage (AOE) level 10")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		disabled Event Player.attributes == 5;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.350, Ignore Condition);
		Damage(Players Within Radius(Event Player, 2.500, Team 2, Surfaces And All Barriers), Event Player, 195);
	}
}

disabled rule("mccree attribute flashbang deals knockback like a pharah attack LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		disabled Event Player.attributes == 6;
		Is Using Ability 2(Event Player) == True;
		Is In View Angle(Event Player, Vector(0, -10000, 0), 60) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 1000, 0), 10, To World, Cancel Contrary Motion);
	}
}

disabled rule("mccree attribute deadeye charges insanely fast LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.attributes == 7;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1000);
		Wait(6, Ignore Condition);
		"damage variable"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("mccree attribute gain ammo on ultimate LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.attributes == 8;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"add 3 to ammo"
		Event Player.points += 3;
		Set Status(Event Player, Null, Hacked, 0.100);
		Press Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("mccree attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.attributes == 9;
	}
}

disabled rule("level 1 hud")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.experience == 1;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String("Attribute 1: start with 2000 points"), Null, Left, 0, Color(Blue),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("Attribute 2: roll uses less ammo"), Null, Left, 0, Color(Blue), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Event Player.points, Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}

disabled rule("buy attribute 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		"needs to work for any level on any hero"
		Event Player.attributes = 1;
	}
}

disabled rule("buy attribute 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		"needs to work for any level on any hero"
		Event Player.attributes = 2;
	}
}

rule("teleport to pack-a-punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(76.484, 1.455, 54.826), 2, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(85.197, 101, 66.098));
		Wait(20, Ignore Condition);
		Teleport(Event Player, Vector(82.444, 1.600, 57.277));
	}
}

disabled rule("PERK Purchase bucking brawler")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(63.640, -5.696, -124.164)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 3000;
		Global.powerconnected == 1;
		Is On Ground(Event Player) == True;
		Event Player.brawler == 0;
	}

	actions
	{
		Event Player.points -= 3000;
		Communicate(Event Player, Emote Up);
		Event Player.brawler = 1;
	}
}

disabled rule("Perk purchase carry sacrafice")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(63.640, -5.696, -124.164)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 10000;
		Global.powerconnected == 1;
		Is On Ground(Event Player) == True;
		Event Player.carrysacr == 0;
	}

	actions
	{
		Event Player.carrysacr = 1;
		Event Player.points -= 10000;
		Communicate(Event Player, Emote Up);
	}
}

rule("connect power room")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(52.739, -2.521, -16.995), 2, All Teams, Off) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
		Start Facing(Event Player, Vector(-47.484, -0.900, 50), 10000, To World, Direction and Turn Rate);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Wait(1, Ignore Condition);
		Stop Forcing Throttle(Event Player);
		Enable Movement Collision With Environment(Event Player);
		Stop Facing(Event Player);
	}
}

rule("exit power room")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(36.180, 4.175, -22.781), 2, All Teams, Off) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
		Start Facing(Event Player, Vector(47.484, -0.900, -50), 10000, To World, Direction and Turn Rate);
		Start Forcing Throttle(Event Player, 1, 1, 0, 0, 0, 0);
		Wait(1, Ignore Condition);
		Stop Forcing Throttle(Event Player);
		Enable Movement Collision With Environment(Event Player);
		Stop Facing(Event Player);
	}
}

rule("connect power")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(41.890, -1.800, -5.629), 2, All Teams, Off) == True;
		disabled Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Moira), Team 1, 4, Vector(45.736, -1.449, -9.394), Vector(-50, 0, 50));
		Global.powerconnected = 1;
		Start Facing(Event Player, Players On Hero(Hero(Moira), Team 1), 150, To World, Direction and Turn Rate);
		Wait(0.600, Ignore Condition);
		Start Camera(Event Player, Eye Position(Event Player), Eye Position(Players On Hero(Hero(Moira), All Teams)), 50);
		Wait(0.500, Ignore Condition);
		Start Camera(Event Player, Vector(44.273, -1.500, -8.056), Eye Position(Players On Hero(Hero(Moira), Team 1)), 20);
	}
}

disabled rule("follower says hello back")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Hello) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), Hello);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says you're welcome")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Thanks) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), You are Welcome);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says no")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, You are Welcome) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), No);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says with you")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Help) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), With You);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says fall back")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Need Healing) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), Fall Back);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says attacking")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Press the Attack) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), Attacking);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says thanks")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Acknowledge) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), Thanks);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("follower says go")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Ultimate Status) == True;
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Wait(2.800, Ignore Condition);
		Communicate(Players In Slot(4, Team 1), Go);
		disabled Wait(2, Ignore Condition);
	}
}

disabled rule("mercy attribute LEVEL 5 GA hurts anyone you fly into")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		disabled Event Player.attributes == 2;
	}

	actions
	{
		Set Damage Dealt(Event Player, 400);
		Wait(0.350, Ignore Condition);
		"set to variable for pack a punch or damage stat"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("mercy attribute LEVEL 5 melee kilss with staff give .1 magazines")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.attributes == 3;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("mercy attribute LEVEL 10 enemies dont chase you during ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.attributes == 4;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Victim, Vector Towards(Attacker, Victim), 8, To World, Cancel Contrary Motion);
	}
}

disabled rule("mercy attribute level 10 reviving causes an explosion when using ability")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		disabled Event Player.attributes == 5;
		Is Using Ability 1(Event Player) == True;
	}
}

disabled rule("mercy attribute LEVEL 15 earning elimanations gives healing")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		disabled Event Player.attributes == 6;
		Is Using Ability 2(Event Player) == True;
		Is In View Angle(Event Player, Vector(0, -10000, 0), 60) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 1000, 0), 10, To World, Cancel Contrary Motion);
	}
}

disabled rule("mercy attribute LEVEL 15 overheal teammates")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.attributes == 7;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1000);
		Wait(6, Ignore Condition);
		"damage variable"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("mercy attribute LEVEL 20 become small and a follower")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.attributes == 8;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"add 3 to ammo"
		Event Player.points += 3;
		Set Status(Event Player, Null, Hacked, 0.100);
		Press Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("mercy attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.attributes == 9;
	}
}

disabled rule("lucio attribute LEVEL 5 boom box dropped when using amp it up (last 15 seconds or till the next amp it up)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		disabled Event Player.attributes == 2;
	}

	actions
	{
		Set Damage Dealt(Event Player, 400);
		Wait(0.350, Ignore Condition);
		"set to variable for pack a punch or damage stat"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("lucio attribute LEVEL 5 Reverse amp")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.attributes == 3;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("lucio attribute LEVEL 10 wallride enabled")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.attributes == 4;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Victim, Vector Towards(Attacker, Victim), 8, To World, Cancel Contrary Motion);
	}
}

disabled rule("lucio attribute level 10 earn sheilds on kill")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		disabled Event Player.attributes == 5;
		Is Using Ability 1(Event Player) == True;
	}
}

disabled rule("lucio attribute LEVEL 15 sound barrier")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		disabled Event Player.attributes == 6;
		Is Using Ability 2(Event Player) == True;
		Is In View Angle(Event Player, Vector(0, -10000, 0), 60) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 1000, 0), 10, To World, Cancel Contrary Motion);
	}
}

disabled rule("lucio attribute LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.attributes == 7;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1000);
		Wait(6, Ignore Condition);
		"damage variable"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("lucio attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.attributes == 8;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"add 3 to ammo"
		Event Player.points += 3;
		Set Status(Event Player, Null, Hacked, 0.100);
		Press Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("lucio attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.attributes == 9;
	}
}

disabled rule("reaper attribute LEVEL 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		disabled Event Player.attributes == 2;
	}

	actions
	{
		Set Damage Dealt(Event Player, 400);
		Wait(0.350, Ignore Condition);
		"set to variable for pack a punch or damage stat"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("reaper attribute LEVEL 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Player.attributes == 3;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("reaper attribute LEVEL 10")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Player.attributes == 4;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Victim, Vector Towards(Attacker, Victim), 8, To World, Cancel Contrary Motion);
	}
}

disabled rule("reaper attribute level 10")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		disabled Event Player.attributes == 5;
		Is Using Ability 1(Event Player) == True;
	}
}

disabled rule("reaper attribute LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		disabled Event Player.attributes == 6;
		Is Using Ability 2(Event Player) == True;
		Is In View Angle(Event Player, Vector(0, -10000, 0), 60) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(0, 1000, 0), 10, To World, Cancel Contrary Motion);
	}
}

disabled rule("reaper attribute LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Player.attributes == 7;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1000);
		Wait(6, Ignore Condition);
		"damage variable"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("reaper attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Player.attributes == 8;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"add 3 to ammo"
		Event Player.points += 3;
		Set Status(Event Player, Null, Hacked, 0.100);
		Press Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("reaper attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Event Player.attributes == 9;
	}
}

disabled rule("torbjorn attribute LEVEL 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		disabled Event Player.attributes == 2;
	}

	actions
	{
		Set Damage Dealt(Event Player, 400);
		Wait(0.350, Ignore Condition);
		"set to variable for pack a punch or damage stat"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("torbjorn attribute LEVEL 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.attributes == 3;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

disabled rule("torbjorn attribute LEVEL 10")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.attributes == 4;
		Is Firing Secondary(Event Player) == True;
	}
}

disabled rule("torbjorn attribute level 10")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		disabled Event Player.attributes == 5;
		Is Using Ability 1(Event Player) == True;
	}
}

disabled rule("torbjorn attribute LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		disabled Event Player.attributes == 6;
		Is Using Ability 2(Event Player) == True;
		Is In View Angle(Event Player, Vector(0, -10000, 0), 60) == True;
	}
}

disabled rule("torbjorn attribute LEVEL 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.attributes == 7;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 1000);
		Wait(6, Ignore Condition);
		"damage variable"
		Set Damage Dealt(Event Player, 100);
	}
}

disabled rule("torbjorn attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.attributes == 8;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		"add 3 to ammo"
		Event Player.points += 3;
		Set Status(Event Player, Null, Hacked, 0.100);
		Press Button(Event Player, Button(Secondary Fire));
	}
}

disabled rule("torbjorn attribute LEVEL 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.attributes == 9;
	}
}

disabled rule("Impulse DOOR 0")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[0] == 0;
		Players Within Radius(Global.Vectordoorpositions[0], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[0], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[0], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[1] == 0;
		Players Within Radius(Global.Vectordoorpositions[1], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[1], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[1], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[2] == 0;
		Players Within Radius(Global.Vectordoorpositions[2], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[2], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[2], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[3] == 0;
		Players Within Radius(Global.Vectordoorpositions[3], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[1], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[1], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[4] == 0;
		Players Within Radius(Global.Vectordoorpositions[4], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[4], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[4], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[5] == 0;
		Players Within Radius(Global.Vectordoorpositions[5], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[5], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[5], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 6")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[6] == 0;
		Players Within Radius(Global.Vectordoorpositions[6], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[6], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[6], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 7")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[7] == 0;
		Players Within Radius(Global.Vectordoorpositions[7], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[7], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[7], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 8")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[8] == 0;
		Players Within Radius(Global.Vectordoorpositions[8], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[8], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[8], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 9")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[9] == 0;
		Players Within Radius(Global.Vectordoorpositions[9], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[9], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[9], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 10")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[10] == 0;
		Players Within Radius(Global.impulseDoorArray[10], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[10], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[10], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 11")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[11] == 0;
		Players Within Radius(Global.impulseDoorArray[11], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[11], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[11], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 12")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[12] == 0;
		Players Within Radius(Global.Vectordoorpositions[12], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[12], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[12], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 13")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[13] == 0;
		Players Within Radius(Global.Vectordoorpositions[13], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[13], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[13], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 14")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[14] == 0;
		Players Within Radius(Global.Vectordoorpositions[14], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[14], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[14], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 15")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[15] == 0;
		Players Within Radius(Global.Vectordoorpositions[15], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[15], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[15], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 16")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[16] == 0;
		Players Within Radius(Global.Vectordoorpositions[16], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[16], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[16], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 17")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[17] == 0;
		Players Within Radius(Global.Vectordoorpositions[17], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[17], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[17], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 18")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[18] == 0;
		Players Within Radius(Global.Vectordoorpositions[18], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[18], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[18], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 19")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[19] == 0;
		Players Within Radius(Global.Vectordoorpositions[19], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[19], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[19], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 20")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[20] == 0;
		Players Within Radius(Global.Vectordoorpositions[20], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[20], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[20], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 21")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[21] == 0;
		Players Within Radius(Global.Vectordoorpositions[21], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[21], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[21], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 22")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[22] == 0;
		Players Within Radius(Global.Vectordoorpositions[22], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[22], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[22], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 23")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[23] == 0;
		Players Within Radius(Global.Vectordoorpositions[23], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[23], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[23], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 24")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[24] == 0;
		Players Within Radius(Global.Vectordoorpositions[24], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[24], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[24], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 25")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[25] == 0;
		Players Within Radius(Global.Vectordoorpositions[25], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[25], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[25], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 26")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[26] == 0;
		Players Within Radius(Global.Vectordoorpositions[26], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[26], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[26], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 27")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[27] == 0;
		Players Within Radius(Global.Vectordoorpositions[27], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[27], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[27], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 28")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[28] == 0;
		Players Within Radius(Global.Vectordoorpositions[28], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[28], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[28], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 29")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[29] == 0;
		Players Within Radius(Global.Vectordoorpositions[29], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[29], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[29], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 30")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[30] == 0;
		Players Within Radius(Global.Vectordoorpositions[30], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[30], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[30], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 31")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[31] == 0;
		Players Within Radius(Global.Vectordoorpositions[31], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[31], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[31], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 32")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[32] == 0;
		Players Within Radius(Global.Vectordoorpositions[32], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[32], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[32], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 33")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[33] == 0;
		Players Within Radius(Global.Vectordoorpositions[33], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[33], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[33], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 34")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[34] == 0;
		Players Within Radius(Global.Vectordoorpositions[34], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[34], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[34], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 35")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[35] == 0;
		Players Within Radius(Global.Vectordoorpositions[35], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[35], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[35], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 36")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[36] == 0;
		Players Within Radius(Global.Vectordoorpositions[36], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[36], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[36], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 37")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[37] == 0;
		Players Within Radius(Global.Vectordoorpositions[37], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[37], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[37], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 38")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[38] == 0;
		Players Within Radius(Global.Vectordoorpositions[38], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[38], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[38], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 39")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[39] == 0;
		Players Within Radius(Global.Vectordoorpositions[39], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[39], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[39], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 40")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[40] == 0;
		Players Within Radius(Global.Vectordoorpositions[40], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[40], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[40], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 41")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[41] == 0;
		Players Within Radius(Global.Vectordoorpositions[41], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[41], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[41], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 42")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[42] == 0;
		Players Within Radius(Global.Vectordoorpositions[42], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[42], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[42], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 43")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[43] == 0;
		Players Within Radius(Global.Vectordoorpositions[43], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[43], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[43], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 44")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[44] == 0;
		Players Within Radius(Global.Vectordoorpositions[44], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[44], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[44], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 45")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[45] == 0;
		Players Within Radius(Global.Vectordoorpositions[45], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[45], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[45], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 46")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[46] == 0;
		Players Within Radius(Global.Vectordoorpositions[46], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[46], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[46], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 47")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[47] == 0;
		Players Within Radius(Global.Vectordoorpositions[47], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[47], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[47], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 48")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[48] == 0;
		Players Within Radius(Global.Vectordoorpositions[48], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[48], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[48], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 49")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[49] == 0;
		Players Within Radius(Global.Vectordoorpositions[49], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[49], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[49], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Impulse DOOR 50")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.impulseDoorArray[50] == 0;
		Players Within Radius(Global.Vectordoorpositions[50], 3, Team 1, Off) == True;
	}

	actions
	{
		Apply Impulse(Players Within Radius(Global.Vectordoorpositions[50], 3, Team 1, Off), Direction Towards(
			Global.Vectordoorpositions[50], Event Player), 100, To World, Cancel Contrary Motion);
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("BUY DOOR 51")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.Vectordoorpositions[51], 25, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Global.impulseDoorArray[51] == 0;
	}

	actions
	{
		Destroy Effect(Global.gamestarted[51]);
		Wait(0.250, Ignore Condition);
		Global.impulseDoorArray[51] = 1;
		Event Player.points -= 1000;
	}
}

rule("Initiate Health, Damage, and Healing Variables")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.healthmax == 0;
	}

	actions
	{
		Event Player.healthmax = 50;
		Event Player.dmgmaniac = 100;
		Event Player.healvariable = 100;
	}
}

rule("Health, Damage, and Healing HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.powerconnected == 1;
	}

	actions
	{
		Create HUD Text(Event Player, String("{0} : {1} : {2}", String("{0} {1}", Custom String("Lives"), Event Player.revived), String(
			"{0} {1}", String("Damage"), Event Player.dmgmaniac), String("{0} {1}", String("Heal"), Event Player.healvariable)), Null,
			Null, Right, -1, Color(Blue), Color(Lime Green), Color(Lime Green), Visible To and String, Default Visibility);
	}
}

rule("Zombie kill")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == False;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Event Player.points += 50 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 50, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Global.R += 100 * Event Player.H;
	}
}

rule("Zombie kill headshot")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == True;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 200, String("Points"))));
		Global.R += 250 * Event Player.H;
	}
}

rule("Zombie points per hit")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Event Player.points += 10 * Event Player.H;
		Skip If(Event Player.H == 1, 1);
		Global.R += 20 * Event Player.H;
	}
}

rule("Player HUD Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))),
			Players In Slot(0, Team 1)), Players In Slot(0, Team 1).points), Health(Players In Slot(0, Team 1)), Null, Left, 0, Color(
			Purple), Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))),
			Players In Slot(1, Team 1)), Players In Slot(1, Team 1).points), Health(Players In Slot(1, Team 1)), Null, Left, 1, Color(
			Green), Color(Green), Color(Green), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))),
			Players In Slot(2, Team 1)), Players In Slot(2, Team 1).points), Health(Players In Slot(2, Team 1)), Null, Left, 2, Color(
			Orange), Color(Orange), Color(Orange), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))),
			Players In Slot(3, Team 1)), Players In Slot(3, Team 1).points), Health(Players In Slot(3, Team 1)), Null, Left, 3, Color(
			Turquoise), Color(Turquoise), Color(Turquoise), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(4, Team 1))),
			Players In Slot(4, Team 1)), Players In Slot(4, Team 1).points), Null, Null, Left, 4, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(5, Team 1))),
			Players In Slot(5, Team 1)), Players In Slot(5, Team 1).points), Null, Null, Left, 5, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Global.Died[0] = Vector(500, 0, 500);
		Global.Died[1] = Vector(500, 0, 500);
		Global.Died[2] = Vector(500, 0, 500);
		Global.Died[3] = Vector(500, 0, 500);
		Global.Died[4] = Vector(500, 0, 500);
		Global.Died[5] = Vector(500, 0, 500);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))),
			Players In Slot(0, Team 1), Players In Slot(0, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 60 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 20 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Purple), Default Visibility);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))),
			Players In Slot(1, Team 1), Players In Slot(1, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 60 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 17 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Green), Default Visibility);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))),
			Players In Slot(2, Team 1), Players In Slot(2, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 60 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 14 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))),
			Players In Slot(3, Team 1), Players In Slot(3, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 60 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 11 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Turquoise), Default Visibility);
	}
}

disabled rule("Rule 334")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.points = 100000000;
	}
}

disabled rule("Display server performance characteristics")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), String("{0}: {1}", String("Server Load"), String("{0}%", Server Load)), Null, Null, Left,
			0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), String("{0}: {1}", String("Server Load Average"), String("{0}%", Server Load Average)),
			Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), String("{0}: {1}", String("Server Load Peak"), String("{0}%", Server Load Peak)), Null,
			Null, Left, 2, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Disable Inspector Recording;
	}
}

rule("out of ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ammo <= 0;
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Brigitte);
		Hero Of(Event Player) != Hero(Torbjörn);
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("max ammo amount")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.ammo = Workshop Setting Integer(Custom String("Starting ammo"), Custom String("Ammo"), 5, 0, 100, 0);
	}
}

rule("enable guns when they have ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ammo > 0;
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("Ammo hud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Event Player.ammo, Null, Custom String("magazines left"), Left, 4, Color(White), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Create In-World Text(Event Player, Custom String("Magazines: {0}", Event Player.ammo), Update Every Frame(Eye Position(
			Local Player) + Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(
			Local Player)), Facing Direction Of(Local Player))) * 26.500 + Normalize(Cross Product(Up, Facing Direction Of(Local Player)))
			* -46), 2.400, Do Not Clip, Visible To Position and String, Color(Aqua), Default Visibility);
	}
}

rule("moira ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.ammo -= 0.050;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("out of ammo moira")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.ammo <= 0;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("mccree lose ammo on roll")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.ammo -= 0.500;
	}
}

rule("mercy disable gun if no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Weapon(Event Player) == 2;
		Event Player.ammo <= 0;
	}

	actions
	{
		Set Weapon(Event Player, 1);
	}
}

rule("torb disable gun if no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Weapon(Event Player) == 1;
		Event Player.ammo <= 0;
	}

	actions
	{
		Set Weapon(Event Player, 2);
	}
}

rule("reloading with doublemag")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.ammo -= 0.500;
	}
}

rule("genji ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 300);
		Set Damage Received(Event Player, 50);
		Wait(6, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("ashe ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 300);
		Wait(10, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("widowmaker ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(All Players(Team 1), 300);
		Wait(12.500, Ignore Condition);
		Set Damage Dealt(All Players(Team 1), 100);
	}
}

rule("Purchase widowmaker")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(4.527, 6.481, -39.352)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Widowmaker));
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		Event Player.ammo = 10;
	}
}

rule("reaper lose ammo on wraith")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.ammo -= 0.500;
	}
}

rule("symmetra ultimate resistance")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(All Living Players(Team 1), Shields, 600, True, True);
		Wait(12.500, Ignore Condition);
		Remove Health Pool From Player(Last Created Health Pool);
	}
}

rule("disable ashe reload for a more logical reload")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	actions
	{
		Disallow Button(Event Player, Button(Reload));
	}
}

rule("remove less than zero issue on ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.ammo < 0;
	}

	actions
	{
		Event Player.ammo = 0;
	}
}

rule("fix reload disabled (maybe)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Ashe);
	}

	actions
	{
		Allow Button(Event Player, Button(Reload));
	}
}

rule("buy double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-63.866, 0.809, -49.014)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2000;
		Global.powerconnected == 1;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.points -= 2000;
		Wait(0.250, Ignore Condition);
		Event Player.doublemag = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("ammo message")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.ammo == 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("NO MAGAZINES -- BUY ANY HERO FOR MORE"));
		Small Message(Event Player, Custom String("Buying the same hero again gives you more ammo"));
		Wait(5, Ignore Condition);
	}
}

rule("reloading")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.ammo -= 1;
	}
}

rule("Rule 344")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Create In-World Text(Event Player, Custom String("interact (F) to buy doors"), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * -26.500 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -46), 2.400,
			Do Not Clip, Visible To Position and String, Color(Aqua), Default Visibility);
	}
}

rule("Zombie kill")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == False;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Event Player.points += 50 * Event Player.H;
		disabled Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 50, String("Points"))));
		disabled Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		disabled Global.R += 100 * Event Player.H;
	}
}

rule("Zombie kill headshot")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == True;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 200, String("Points"))));
		Global.R += 250 * Event Player.H;
	}
}

rule("Zombie points per hit")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Event Player.points += 10 * Event Player.H;
		disabled Skip If(Event Player.H == 1, 1);
		disabled Global.R += 20 * Event Player.H;
	}
}

rule("spawn brigs and torbs 6-10")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(6);
		Global.roundnumber / 1 <= Absolute Value(10);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("Spawn torbs  wave11-15")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(11);
		Global.roundnumber / 1 < Absolute Value(16);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and genji 21-25")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(21);
		Global.roundnumber / 1 < Absolute Value(26);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
	}
}

rule("brigg wave 31>")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Global.roundnumber / 1 >= Absolute Value(26);
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Set Move Speed(Event Player, 120);
	}
}

rule("flaming rien idea")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Global.roundnumber / 1 >= Absolute Value(26);
	}

	actions
	{
		Set Status(Event Player, Null, Burning, 9999);
		Set Move Speed(Event Player, 125);
	}
}

rule("Spawn Bots wave 16 - 20 rien torbs")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Global.numberofzombies > 4;
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(16);
		Global.roundnumber / 1 < Absolute Value(21);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 11, 16);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and winston 26 - 30")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(26);
		Global.roundnumber / 1 < Absolute Value(31);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
	}
}

rule("spawn GENJI and TORB 31 - 35")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(31);
		Global.roundnumber / 1 < Absolute Value(36);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and winston 36 - 40")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(36);
		Global.roundnumber / 1 < Absolute Value(41);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and winston 41 - 45")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(41);
		Global.roundnumber / 1 < Absolute Value(46);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and winston 46 - 50")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(46);
		Global.roundnumber / 1 < Absolute Value(51);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and winston 51 - 55")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(51);
		Global.roundnumber / 1 < Absolute Value(56);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Winston), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn RIEN and winston 56 - 60")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(56);
		Global.roundnumber / 1 < Absolute Value(61);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
	}
}

rule("spawn 1 zen torb moira 61 - 65")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(61);
		Global.roundnumber / 1 < Absolute Value(66);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Zenyatta), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Moira), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn 1 zen rien genji 65 - 70+")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(65);
		disabled Global.roundnumber / 1 < Absolute Value(71);
		Global.numberofzombies > 4;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(3, Ignore Condition);
		Create Dummy Bot(Hero(Zenyatta), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 11, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(2, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 10, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 9, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 8, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 7, 16);
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(-14.251, 0.455, -0.078), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 6, 16);
		Create Dummy Bot(Hero(Genji), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Skip If(Number Of Players(Team 1) > 5, 16);
	}
}

rule("GAMELOGIC Single player lives mechanic")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) == 1;
		Event Player.Pack < 3;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Resurrect(Event Player);
		Wait(0.250, Ignore Condition);
		Set Status(Event Player, Null, Knocked Down, 2);
		Set Status(Event Player, Null, Phased Out, 10);
		Event Player.Pack = Event Player.Pack + 1;
		Event Player.hasjugg = 0;
	}
}

rule("solo play mode effect")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) < 2;
	}

	actions
	{
		Wait(15, Ignore Condition);
		Abort If Condition Is False;
		Big Message(All Players(All Teams), Custom String("SOLO MODE: YOU NOW HAVE 3 LIVES TOTAL"));
	}
}

rule("show single player lives effect")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) < 2;
	}

	actions
	{
		Wait(5, Ignore Condition);
		Abort If Condition Is False;
		Create HUD Text(Event Player, String("{0} - {1}", Custom String("Lives used:"), Event Player.Pack), Null, Null, Right, 2, Color(
			Green), Color(Green), Color(Green), Visible To and String, Default Visibility);
	}
}

rule("genji use ult")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("winston give ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Start Scaling Player(Event Player, 0.650, True);
	}
}

rule("zen slow movement crouch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Crouch));
	}
}

rule("genji dash damage")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Genji;
	}

	conditions
	{
		Global.roundnumber / 5 == Round To Integer(Global.roundnumber / 5, Down);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("Bot Attack if Near moira")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 2;
		Global.O == False;
	}

	actions
	{
		Wait(0.300, Abort When False);
		Press Button(Event Player, Button(Melee));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bot Attack if Near zen")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 2;
		Global.O == False;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Press Button(Event Player, Button(Melee));
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("heal over time effect with heal over time bonus")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		All Living Players(Team 1) == True;
		Event Player.healvariable >= 300;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Start Heal Over Time(Event Player, Event Player, 3, Event Player.healvariable / 4 + 8);
		Wait(3, Ignore Condition);
	}
}

rule("winston use ult")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("winston jump challenge waves")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Global.roundnumber / 5 == Round To Integer(Global.roundnumber / 5, Down);
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 12;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(4, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("moira fade at range")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		disabled Global.roundnumber / 5 == Round To Integer(Global.roundnumber / 5, Down);
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 8;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(8, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Rule 185")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Zenyatta;
	}

	conditions
	{
		Health(Event Player) < Max Health(Event Player) * 0.500;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Wait(7, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("spawn door blockers 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(80.921, 2.560, 63.437), 2.500, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(85.921, 1.515, 67.026));
	}
}

rule("spawn door blockers 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(88.378, 2.615, 60.687), 2.500, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(87.469, 1.515, 65.597));
	}
}

rule("spawn door blockers 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(93.975, 2.622, 50.437), 4, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(86.637, 1.653, 53.945));
	}
}

rule("spawn door blockers 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(100.376, 2.492, 53.375), 2.500, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(104.474, 1.464, 56.311));
	}
}

rule("spawn door blockers 6")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(100.376, 2.492, 53.375), 2.500, Team 1, Off) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(104.474, 1.464, 56.311));
	}
}

rule("Rule 380 escape first room effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Wait(30, Ignore Condition);
		Create Effect(All Players(All Teams), Bad Aura, Color(Green), Vector(113.040, 0.193, 73.861), 3, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Escape! (interact) press F"), Vector(113, 0, 74), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Global.rnd0 = 1;
	}
}

rule("Rule 381 exit first room")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.rnd0 == 1;
		Is Button Held(Event Player, Button(Interact)) == True;
		Players Within Radius(Vector(112.920, -0.335, 74.233), 3, All Teams, Off) == True;
	}

	actions
	{
		Teleport(All Living Players(Team 1), Vector(15.823, -0.689, -135.905));
		Global.numberofzombies = 6;
	}
}

disabled rule("player hit speed boost")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
	}

	actions
	{
		Set Move Speed(Event Player, 160);
		Wait(1, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("heal over time effect")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		All Living Players(Team 1) == True;
		Event Player.healvariable < 300;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Start Heal Over Time(Event Player, Event Player, 3, Event Player.healvariable / 4 + 8);
		Wait(5, Ignore Condition);
	}
}

rule("Rule 384")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.numberofzombies <= 0;
	}

	actions
	{
		Global.roundnumber += 1;
	}
}

rule("Set Round Kills")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Z == 1;
		Global.O == False;
		Global.roundnumber <= 12;
	}

	actions
	{
		Global.numberofzombies = 6 + Global.roundnumber * 2;
		Wait(1, Ignore Condition);
		Global.Z = 0;
	}
}

rule("Set Round Kills Past wave 12")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Z == 1;
		Global.O == False;
		Global.roundnumber >= 13;
	}

	actions
	{
		Global.numberofzombies = 32;
		Wait(1, Ignore Condition);
		Global.Z = 0;
	}
}

rule("Challenge waves")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundnumber / 5 == Round To Integer(Global.roundnumber / 5, Down);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		disabled Big Message(All Players(All Teams), Custom String("Challenge wave!"));
	}
}

rule("ring around player 2 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Green), Event Player, 1, Visible To Position and Radius);
	}
}

rule("ring around the player 3 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 2;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Orange), Event Player, 1, Visible To Position and Radius);
	}
}

rule("ring around the player 4 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 3;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Turquoise), Event Player, 1, Visible To Position and Radius);
	}
}

rule("ring around the player 1 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Event Player, 1, Visible To Position and Radius);
	}
}

rule("Rule 392 the end effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(Team 1), Ring, Color(Blue), Vector(110.904, 0.538, -3.182), 6, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("THE END : 50000"), Vector(110.904, 1, -3.182), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Green), Default Visibility);
	}
}

rule("disable melee by default")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("Melee does more damage mccree")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Hero Of(Event Player) == Hero(Cassidy);
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Set Damage Dealt(Event Player, 1500);
		Allow Button(Event Player, Button(Melee));
		Press Button(Event Player, Button(Melee));
		Wait(0.500, Ignore Condition);
		Set Damage Dealt(Event Player, Event Player.dmgmaniac);
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("player joined invincible")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 30);
	}
}

rule("sky effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Red), Vector(0, 0, 0), 200, Visible To Position and Radius);
	}
}

rule("Monkey Kill (Global Var B) ALL SLOTS")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		Event Player.B = Random Integer(1, 50);
		Skip If(Event Player.B != 1, 1);
		Global.M[0] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
		Wait(0.200, Ignore Condition);
		Global.numberofzombies -= 1;
		Skip If(Global.numberofzombies < Number Of Living Players(Team 2), 1);
		Respawn(Event Player);
	}
}

rule("lucio explosive rounds")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Damage != Is Meleeing(Event Player);
		Event Damage != Is Firing Secondary(Event Player);
	}

	actions
	{
		Damage(Players Within Radius(Victim, 1, Team 2, Off), Null, 500);
		Damage(Players Within Radius(Victim, 2, Team 2, Off), Null, 500);
		Play Effect(All Players(Team 1), Good Explosion, Color(Green), Victim, 2);
	}
}

rule("cassidy pack a punch ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.Pack == 1;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Event Player.ammo = 50;
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("bots too far away")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T < 2),
			Current Array Element))) > 25;
	}

	actions
	{
		disabled Wait(0.100, Ignore Condition);
		disabled Press Button(Event Player, Button(Jump));
		disabled Wait(1, Ignore Condition);
		disabled Wait(1, Abort When False);
		disabled Start Forcing Throttle(Event Player, 0, 0, 1, 1, 1, 1);
		disabled Wait(1, Ignore Condition);
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		disabled Wait(1, Ignore Condition);
		Wait(0.500, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
		disabled Event Player.points = 0;
	}
}

rule("Rule 401 workshop settings")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Workshop Setting Integer(Custom String("wave"), Custom String("wave"), 0, 0, 100, 0) == Global.roundnumber;
	}
}

rule("Rule 402 winston ending cutscene")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Vector(111, 1, 3), 6, All Teams, Off) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 50000;
	}

	actions
	{
		Global.cutscene = 2;
		Event Player.points -= 50000;
	}
}