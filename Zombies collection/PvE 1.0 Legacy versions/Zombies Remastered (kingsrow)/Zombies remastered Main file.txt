settings
{
	main
	{
		Description: "winstons, brigs, riens, torbs, new call of duty feel, 7 perks, wonder weapons, and a heck of a lot of points to collect!"
		Mode Name: "Zombies Remastered"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Max Spectators: 12
		Max Team 1 Players: 4
		Max Team 2 Players: 0
		Return To Lobby: Never
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				King's Row Winter 972777519512063901
			}
		}

		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Health Pack Respawn Time Scalar: 50%
			Hero Limit: Off
			Kill Cam: Off
			Kill Feed: Off
			Respawn As Random Hero: On
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		Team 1
		{
			Spawn With Ultimate Ready: On

			Bastion
			{
				Damage Dealt: 90%
				Health: 34%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 50%
				Damage Dealt: 70%
				Healing Dealt: 40%
				Health: 50%
				Movement Speed: 75%
				Repair Pack Cooldown Time: 50%
				Shield Bash Cooldown Time: 50%
				Shield Bash Knockback Scalar: 300%
				Whip Shot Cooldown Time: 50%
				Whip Shot Knockback Scalar: 300%
			}

			Doomfist
			{
				Damage Dealt: 102%
				Health: 40%
				No Ammunition Requirement: On
				Power Block Cooldown Time: 50%
				Rocket Punch Cooldown Time: 50%
				Seismic Slam Cooldown Time: 50%
			}

			Echo
			{
				Damage Dealt: 200%
				Flight Cooldown Time: 500%
				Focusing Beam Cooldown Time: 50%
				Glide: Off
			}

			Genji
			{
				Damage Dealt: 220%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 50%
				Concussion Mine Knockback Scalar: 25%
				Damage Dealt: 210%
				Frag Launcher Knockback Scalar: 25%
				Steel Trap Cooldown Time: 25%
				Ultimate Duration: 25%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 500%
				Health: 40%
				Secondary Fire: Off
				Weapon Freeze Duration Scalar: 20%
				Weapon Freeze Minimum: 0%
				Weapon Freeze Rate Scalar: 0%
			}

			Moira
			{
				Biotic Orb Cooldown Time: 25%
				Damage Dealt: 500%
				Fade Cooldown Time: 200%
				Healing Dealt: 150%
			}

			Reinhardt
			{
				Barrier Field Recharge Rate: 500%
				Charge Cooldown Time: 50%
				Damage Dealt: 350%
				Fire Strike Cooldown Time: 10%
				Healing Received: 250%
				Health: 30%
			}

			Sombra
			{
				Ammunition Clip Size Scalar: 150%
				Damage Dealt: 250%
				Hack Cooldown Time: 25%
				Translocator Cooldown Time: 75%
				Virus Cooldown Time: 300%
			}

			Symmetra
			{
				Damage Dealt: 340%
				Sentry Turret Cooldown Time: 200%
			}

			Torbjörn
			{
				Damage Dealt: 260%
				Deploy Turret Cooldown Time: 25%
			}

			Winston
			{
				Barrier Projector Cooldown Time: 20%
				Damage Dealt: 500%
				Health: 30%
				Jump Pack: Off
				Jump Pack Knockback Scalar: 400%
				Jump Vertical Speed: 80%
				Primal Rage Melee Knockback Scalar: 300%
				Ultimate Ability Primal Rage: Off
			}
		}

		Team 2
		{
			Jump Vertical Speed: 200%

			Bastion
			{
				Ammunition Clip Size Scalar: 35%
				Damage Dealt: 90%
				Health: 34%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 50%
				Damage Dealt: 70%
				Healing Dealt: 40%
				Health: 25%
				Movement Speed: 75%
				Repair Pack Cooldown Time: 50%
				Shield Bash Knockback Scalar: 300%
				Ultimate Generation - Combat Rally: 500%
				Ultimate Generation Rally: 500%
				Whip Shot Knockback Scalar: 300%
			}

			Doomfist
			{
				Damage Dealt: 102%
				No Ammunition Requirement: On
				Power Block Cooldown Time: 50%
				Rocket Punch Cooldown Time: 50%
				Seismic Slam Cooldown Time: 50%
			}

			Echo
			{
				Flight Cooldown Time: 500%
				Focusing Beam Cooldown Time: 50%
			}

			Genji
			{
				Damage Dealt: 50%
				Health: 500%
				Infinite Ultimate Duration: On
				Movement Speed: 79%
				Spawn With Ultimate Ready: On
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 50%
				Concussion Mine Knockback Scalar: 25%
				Damage Dealt: 250%
				Frag Launcher Knockback Scalar: 25%
				Steel Trap Cooldown Time: 25%
				Ultimate Duration: 25%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 250%
				Health: 40%
				Secondary Fire: Off
				Weapon Freeze Duration Scalar: 20%
				Weapon Freeze Minimum: 0%
				Weapon Freeze Rate Scalar: 0%
			}

			Moira
			{
				Biotic Orb: Off
				Damage Dealt: 200%
				Fade Cooldown Time: 0%
				Healing Dealt: 150%
				Health: 500%
				Movement Speed: 110%
				Primary Fire: Off
				Secondary Fire: Off
				Ultimate Ability Coalescence: Off
			}

			Reinhardt
			{
				Barrier Field Recharge Rate: 300%
				Charge Knockback Scalar: 300%
				Damage Dealt: 65%
				Fire Strike Cooldown Time: 10%
				Health: 125%
				Rocket Hammer Knockback Scalar: 200%
				Ultimate Generation - Combat Earthshatter: 500%
				Ultimate Generation Earthshatter: 165%
			}

			Sombra
			{
				Ammunition Clip Size Scalar: 150%
				Damage Dealt: 200%
				Hack Cooldown Time: 25%
				Translocator Cooldown Time: 75%
				Virus Cooldown Time: 300%
			}

			Symmetra
			{
				Damage Dealt: 70%
				Sentry Turret Cooldown Time: 200%
			}

			Torbjörn
			{
				Damage Dealt: 89%
				Deploy Turret: Off
				Movement Gravity: 80%
				Movement Speed: 85%
				Overload Cooldown Time: 40%
				Overload Duration Scalar: 500%
				Ultimate Generation - Combat Molten Core: 500%
				Ultimate Generation Molten Core: 220%
				Weapons Enabled: Forge Hammer Only
			}

			Winston
			{
				Ammunition Clip Size Scalar: 25%
				Barrier Projector: Off
				Damage Dealt: 150%
				Infinite Ultimate Duration: On
				Jump Pack: Off
				Jump Pack Knockback Scalar: 400%
				Movement Speed: 79%
				Primal Rage Melee Knockback Scalar: 25%
				Spawn With Ultimate Ready: On
				Ultimate Duration: 500%
			}
		}

		General
		{
			Health: 50%
			Movement Speed: 110%
			Ultimate Generation: 10%
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			Ana
			{
				Biotic Grenade Cooldown Time: 50%
				Damage Dealt: 300%
				Healing Dealt: 150%
				Sleep Dart Cooldown Time: 0%
			}

			Ashe
			{
				Coach Gun Cooldown Time: 35%
				Damage Dealt: 125%
				Dynamite Cooldown Time: 50%
			}

			Baptiste
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 163%
				Healing Dealt: 150%
				Regenerative Burst Cooldown Time: 25%
			}

			Cassidy
			{
				Ammunition Clip Size Scalar: 116%
				Combat Roll Cooldown Time: 35%
				Damage Dealt: 30%
				Flashbang Cooldown Time: 15%
				Health: 45%
				Ultimate Ability Deadeye: Off
			}

			D.Va
			{
				Boosters Cooldown Time: 200%
				Damage Dealt: 155%
				Healing Received: 50%
				Health: 25%
			}

			Hanzo
			{
				Damage Dealt: 300%
				Lunge Cooldown Time: 50%
				Lunge Distance Scalar: 200%
				Sonic Arrow Cooldown Time: 50%
				Storm Arrows Cooldown Time: 50%
				Storm Arrows Quantity: 6
			}

			Lúcio
			{
				Ammunition Clip Size Scalar: 300%
				Amp It Up Cooldown Time: 25%
				Damage Dealt: 500%
				Healing Dealt: 250%
				Movement Speed: 110%
				Soundwave Cooldown Time: 200%
			}

			Mercy
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 250%
				Healing Dealt: 150%
				Resurrect Cooldown Time: 0%
				Ultimate Generation - Combat Valkyrie: 0%
				Ultimate Generation - Passive Valkyrie: 0%
				Ultimate Generation Valkyrie: 10%
			}

			Orisa
			{
				Damage Dealt: 170%
				Energy Javelin Cooldown Time: 50%
				Fortify Cooldown Time: 75%
				Healing Received: 50%
				Health: 34%
				Javelin Spin Cooldown Time: 25%
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 200%
				Concussive Blast Cooldown Time: 50%
				Damage Dealt: 250%
				Hover Jets Recharge Rate: 5%
				Jump Jet Cooldown Time: 300%
			}

			Reaper
			{
				Ammunition Clip Size Scalar: 250%
				Damage Dealt: 107%
				Shadow Step Cooldown Time: 20%
				Wraith Form Cooldown Time: 50%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 0%
				Damage Dealt: 105%
				Healing Received: 33%
				Health: 25%
			}

			Sigma
			{
				Accretion Cooldown Time: 25%
				Accretion Knockback Scalar: 300%
				Damage Dealt: 420%
				Experimental Barrier Cooldown Time: 0%
				Experimental Barrier Recharge Rate: 300%
				Healing Received: 50%
				Health: 38%
				Kinetic Grasp Cooldown Time: 0%
			}

			Soldier: 76
			{
				Ammunition Clip Size Scalar: 82%
			}

			Tracer
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 160%
				Health: 67%
			}

			Widowmaker
			{
				Damage Dealt: 280%
				Grappling Hook Cooldown Time: 35%
				Health: 58%
				Venom Mine Cooldown Time: 0%
			}

			Wrecking Ball
			{
				Damage Dealt: 200%
				Grappling Claw Cooldown Time: 250%
				Healing Received: 50%
				Health: 25%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 200%
				Damage Dealt: 420%
				Healing Received: 50%
				Health: 38%
				Particle Barrier Cooldown Time: 40%
				Projected Barrier Cooldown Time: 40%
			}

			Zenyatta
			{
				Damage Dealt: 154%
				Healing Dealt: 150%
			}

			enabled heroes
			{
				Brigitte
				Reinhardt
				Torbjörn
				Winston
			}
		}
	}

	workshop
	{
		difficulty: 3
		Hero start as: Cassidy
	}

	extensions
	{
		Beam Effects
		Beam Sounds
		Buff Status Effects
		Debuff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
		Projectiles
	}
}

variables
{
	global:
		0: roundnumber
		1: numberofzombies
		13: powerconnected
		18: Died
		26: gamestarted
		31: dispencerposition
		38: dispencerplaced

	player:
		0: points
		3: magazines
		4: doublemag
		9: sprintburstperk
		10: healthmax
		11: damagevariable
		13: InfoUI
		14: InfoCooldown
		17: HideHints
		20: strongimpulse
		26: Jugg
		27: singlelives
		28: Packapunch
		29: HEADSH
		30: Maniac
		31: revived
		32: revivebought
		33: UI
		34: strongarmperk
		46: dispencereffect
		63: currentmagazines
}

rule("Setup")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.roundnumber = 0;
		Global.numberofzombies = 0;
		Global.C = 0;
		Global.P = 0;
		Global.Q = Empty Array;
		Modify Global Variable(Q, Append To Array, Hero(D.Va));
		Modify Global Variable(Q, Append To Array, Hero(Orisa));
		Modify Global Variable(Q, Append To Array, Hero(Reinhardt));
		Modify Global Variable(Q, Append To Array, Hero(Roadhog));
		Modify Global Variable(Q, Append To Array, Hero(Sigma));
		Modify Global Variable(Q, Append To Array, Hero(Winston));
		Modify Global Variable(Q, Append To Array, Hero(Wrecking Ball));
		Modify Global Variable(Q, Append To Array, Hero(Zarya));
		Global.T = Empty Array;
		Global.Y = Empty Array;
		disabled Modify Global Variable(Y, Append To Array, Vector(-23.738, 22.631, -120.650));
		Create HUD Text(All Players(Team 1), String("Round {0}", Global.roundnumber), Null, Null, Top, 0, Color(Red), Color(Red), Color(
			Red), Visible To and String, Visible Always);
		Create HUD Text(All Players(Team 1), String("{0} {1}", Global.numberofzombies, String("Enemies")), Null, Null, Right, 0, Color(
			Red), Color(Red), Color(Red), Visible To and String, Visible Always);
		Global.O = False;
		Global.M[0] = Vector(500, 25, 500);
		Global.M[1] = Vector(500, 25, 500);
		Global.M[2] = Vector(500, 25, 500);
		Global.M[3] = Vector(500, 25, 500);
		Global.M[4] = Vector(500, 25, 500);
		Global.M[5] = Vector(500, 25, 500);
		Create Effect(All Players(Team 1), Orb, Color(White), Global.M[0], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Yellow), Global.M[1], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Green), Global.M[2], 1, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Sky Blue), Global.M[3], 0.100, None);
		Create Effect(All Players(Team 1), Orb, Color(Red), Global.M[4], 1, Position and Radius);
		Create Effect(All Players(Team 1), Orb, Color(Orange), Global.M[5], 1, Position and Radius);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[1] == 1), Custom String("Double Points!"), Null, Null,
			Top, 1, Color(Yellow), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[2] == 1), Custom String("SLOW-MO"), Null, Null, Top, 1,
			Color(Green), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[4] == 1), Custom String("Insta-Kill!"), Null, Null,
			Top, 1, Color(Red), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[0] == 1), Custom String("Ultimate MAYHEM"), Null, Null,
			Top, 1, Color(White), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[5] == 1), String("Healing"), Null, Null, Top, 1, Color(
			Orange), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(Filtered Array(All Players(Team 1), Current Array Element.S[3] == 1), String("Freezing"), Null, Null, Top, 1,
			Color(Sky Blue), Color(White), Color(White), Visible To and String, Visible Never);
		Create HUD Text(All Players(All Teams), Custom String("Website: workshop.codes/z-remastered"), Null, Null, Top, 0, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("round change")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.numberofzombies <= 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Destroy All Dummy Bots;
		Wait(0.250, Ignore Condition);
		Global.roundnumber += 1;
		Global.Z = 1;
		Set Ultimate Charge(All Players(Team 1), 100);
		Big Message(All Players(All Teams), String("Round {0}", Global.roundnumber));
		Global.P = 0;
		All Dead Players(Team 1).Packapunch = 0;
		Clear Status(All Dead Players(Team 1), Burning);
		All Dead Players(Team 1).damagevariable = 100;
		Teleport(All Dead Players(Team 1), Nearest Walkable Position(Random Value In Array(All Living Players(Team 1)) + Vector(
			Random Integer(-5, 5), 0, Random Integer(-5, 5))));
		Start Forcing Player To Be Hero(All Dead Players(Team 1), Hero(Cassidy));
		Resurrect(All Dead Players(Team 1));
		Global.Died[0] = Vector(500, 0, 500);
		Global.Died[1] = Vector(500, 0, 500);
		Global.Died[2] = Vector(500, 0, 500);
		Global.Died[3] = Vector(500, 0, 500);
		All Players(Team 1).InfoCooldown = 0;
		All Players(Team 1).P = 0;
		All Players(Team 1).Q = 0;
		All Players(Team 1).HideHints = 0;
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(0, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(1, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(2, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(3, Team 2));
		disabled Wait(0.016, Ignore Condition);
		disabled Respawn(Players In Slot(4, Team 2));
		disabled Wait(0.100, Ignore Condition);
		disabled Respawn(Players In Slot(5, Team 2));
		Set Status(All Living Players(Team 1), Null, Phased Out, 2);
	}
}

rule("Set Round Kills")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Z == 1;
		Global.O == False;
		Global.roundnumber <= 12;
	}

	actions
	{
		Global.numberofzombies = 6 + Global.roundnumber * 2;
		Wait(1, Ignore Condition);
		Global.Z = 0;
	}
}

rule("Set Round Kills Past wave 12")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.Z == 1;
		Global.O == False;
		Global.roundnumber >= 13;
	}

	actions
	{
		Global.numberofzombies = 32;
		Wait(1, Ignore Condition);
		Global.Z = 0;
	}
}

rule("Challenge waves")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundnumber / 5 == Round To Integer(Global.roundnumber / 5, Down);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		disabled Big Message(All Players(All Teams), Custom String("Challenge wave!"));
	}
}

rule("Unlimited Time")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time < 3000;
		Global.O == False;
	}

	actions
	{
		Set Match Time(3599);
		Disable Built-In Game Mode Announcer;
	}
}

rule("Defeat")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For All(All Players(Team 1), Is Dead(Current Array Element)) == True;
		Has Spawned(All Players(Team 1)) == True;
	}

	actions
	{
		Wait(1.500, Ignore Condition);
		Abort If Condition Is False;
		Declare Team Victory(Team 2);
		Wait(2, Ignore Condition);
		Restart Match;
	}
}

rule("Disable Bot Respawn")
{
	event
	{
		Player Joined Match;
		Team 2;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
	}
}

rule("Spawn brigs wave 1- 5")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.numberofzombies >= 4;
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber >= 1;
		Global.roundnumber / 1 < Absolute Value(6);
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Ignore Condition);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 20);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.800, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Skip If(Number Of Players(Team 1) > 2, 20);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Skip If(Number Of Players(Team 1) > 1, 20);
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.800, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("respawn bots")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Living Players(Team 2) < Global.numberofzombies;
		Global.numberofzombies >= 1;
		disabled Global.roundnumber > 1;
	}

	actions
	{
		Respawn(Random Value In Array(All Dead Players(Team 2)));
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Monkey Kill (Global Var B) (InstaUlt Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 0;
	}

	actions
	{
		Event Player.B = Random Integer(1, 50);
		Skip If(Event Player.B != 1, 1);
		Global.M[0] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		disabled Destroy Effect(Event Player.C);
		disabled Create Effect(All Players(All Teams), Orb, Color(White), Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0), 1,
			Visible To);
		disabled Event Player.C = Last Created Entity;
		Set Ultimate Charge(Event Player, 0);
		disabled Destroy Dummy Bot(Team 2, 0);
	}
}

rule("Monkey Kill (Global Var B) (doublePoints Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 1;
	}

	actions
	{
		Event Player.B = Random Integer(1, 40);
		Skip If(Event Player.B != 1, 1);
		Global.M[1] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		disabled Destroy Effect(Event Player.C);
		disabled Create Effect(All Players(All Teams), Orb, Color(Yellow), Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0), 1,
			Visible To);
		disabled Event Player.C = Last Created Entity;
		Set Ultimate Charge(Event Player, 0);
		Skip If(Global.numberofzombies < 6, 1);
	}
}

rule("Monkey Kill (Global Var B) (slowmotion Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 2;
	}

	actions
	{
		Event Player.B = Random Integer(1, 30);
		Skip If(Event Player.B != 1, 1);
		Global.M[2] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		disabled Destroy Effect(Event Player.C);
		disabled Create Effect(All Players(All Teams), Orb, Color(Green), Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0), 1,
			Visible To);
		disabled Event Player.C = Last Created Entity;
		Set Ultimate Charge(Event Player, 0);
		disabled Destroy Dummy Bot(Team 2, 2);
	}
}

rule("Monkey Kill (Global Var B) (nuke Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 3;
	}

	actions
	{
		Event Player.B = Random Integer(1, 40);
		Skip If(Event Player.B != 1, 1);
		Global.M[3] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("Monkey Kill (Global Var B) (instakill Powerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 4;
	}

	actions
	{
		Event Player.B = Random Integer(1, 40);
		Skip If(Event Player.B != 1, 1);
		Global.M[4] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("Monkey Kill (Global Var B) (max ammoPowerup)")
{
	event
	{
		Player Died;
		Team 2;
		Slot 5;
	}

	actions
	{
		Event Player.B = Random Integer(1, 30);
		Skip If(Event Player.B != 1, 1);
		Global.M[5] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("Bot health")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	actions
	{
		Set Max Health(Event Player, 65 + 8 * Number Of Players(Team 1) + Global.roundnumber / (3.300 - Number Of Players(Team 1) / 8) * (
			Global.roundnumber / (3.300 - Number Of Players(Team 1) / 8)));
		Set Damage Received(Event Player, 110 - Global.roundnumber);
	}
}

rule("Bots Move Toward Players")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.O == False;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		disabled Wait(6, Ignore Condition);
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 1, 1, 1);
		disabled Wait(0.500, Ignore Condition);
		disabled Start Throttle In Direction(Event Player, Left, 1, To Player, Replace existing throttle, Direction and Magnitude);
		disabled Wait(0.500, Ignore Condition);
		disabled Stop Throttle In Direction(Event Player);
		disabled Loop;
	}
}

rule("Bots Face Nearest Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.O == False;
	}

	actions
	{
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
			All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
			To World, Direction and Turn Rate);
		Set Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(Eye Position(First Of(
			Sorted Array(Filtered Array(All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player,
			Current Array Element)))), Team 1))), To World);
		disabled Wait(30, Ignore Condition);
		disabled Loop;
	}
}

rule("Unstuck Bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Horizontal Speed Of(Event Player) < 0.850;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) != True;
		Has Status(Event Player, Frozen) != True;
		Has Status(Event Player, Asleep) != True;
		Has Status(Event Player, Stunned) != True;
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T < 2),
			Current Array Element))) > 1.500;
	}

	actions
	{
		disabled Wait(0.100, Ignore Condition);
		disabled Press Button(Event Player, Button(Jump));
		disabled Wait(1, Ignore Condition);
		disabled Wait(1, Abort When False);
		disabled Start Forcing Throttle(Event Player, 0, 0, 1, 1, 1, 1);
		disabled Wait(1, Ignore Condition);
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		disabled Wait(1, Ignore Condition);
		Wait(1.500, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
		disabled Event Player.points = 0;
	}
}

disabled rule("Unstuck Bots point measuring")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Speed Of(Event Player) < 0.800;
		disabled Is Button Held(Event Player, Button(Jump)) == True;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 2;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Event Player.points += 1;
		Wait(2, Abort When False);
		disabled Event Player.points = 0;
	}
}

rule("Unstuck Bots under player force respawn")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Vertical Facing Angle Of(Event Player) < -70;
	}

	actions
	{
		Wait(1, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
	}
}

disabled rule("Unstuck Bots reset points")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Distance Between(Event Player, Closest Player To(Event Player, Team 1)) <= 2;
		disabled Speed Of(Event Player) > 0.800;
	}

	actions
	{
		Event Player.points = 0;
	}
}

disabled rule("Unstuck Bots 5")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Eye Position(Event Player), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 100, Null, Event Player, False)) < 1;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(3.500, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Hello);
	}
}

disabled rule("move back zombies")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Speed Of(Event Player) < 0.800;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 1;
	}

	actions
	{
		Wait(1, Abort When False);
		Start Forcing Throttle(Event Player, 0, 0, 1, 1, 1, 1);
		Wait(1, Ignore Condition);
		Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
	}
}

disabled rule("Jump If Far Away From Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 18;
		Global.O == False;
	}

	actions
	{
		Press Button(Event Player, Button(Jump));
		Wait(10, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Bots Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 1.800;
		Global.O == False;
		Hero Of(Event Player) != Hero(Moira);
	}

	actions
	{
		Wait(0.350, Abort When False);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("Bots Dont Attack if Not Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 1.800;
		Is Firing Primary(Event Player) == True;
		Is Using Ultimate(Event Player) == False;
		Hero Of(Event Player) != Hero(Moira);
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("Bots AutoUlt")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Ultimate Charge Percent(Event Player) == 100;
	}

	actions
	{
		Press Button(Event Player, Button(Ultimate));
		Wait(5, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Bots Ult Attack")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Hero Of(Event Player) != Hero(Genji);
	}

	actions
	{
		Start Holding Button(Event Player, Button(Primary Fire));
		Wait(2, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bots Under Player")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Vertical Facing Angle Of(Event Player) < -10;
		Global.O == False;
		Speed Of(Event Player) < 0.950;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 1;
		Has Status(Event Player, Hacked) != True;
		Has Status(Event Player, Knocked Down) != True;
		Has Status(Event Player, Frozen) != True;
		Has Status(Event Player, Asleep) != True;
		Has Status(Event Player, Stunned) != True;
	}

	actions
	{
		Wait(0.330, Abort When False);
		Apply Impulse(Event Player, Up, 25, To World, Cancel Contrary Motion);
	}
}

disabled rule("Bots Jump Out of Crater")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(135.664, -6.485, -41.649)) < 40;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("Get out of Spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Vector(-26.688, 2.661, -6.357));
		Wait(5, Abort When False);
		Loop;
	}
}

rule("Get out of Spawn Bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is In Spawn Room(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Random Value In Array(Global.Y));
	}
}

rule("SpawnPoints Array Add Area 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-6.230, -0.110, 7.150), Closest Player To(Vector(-6.230, -0.110, 7.150), Team 1)) <= 28;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(10.650, 6.468, 0.768));
		Modify Global Variable(Y, Append To Array, Vector(18.271, 6.455, 17.526));
		Modify Global Variable(Y, Append To Array, Vector(-33.812, 0.344, 17.955));
		Modify Global Variable(Y, Append To Array, Vector(-28.138, 6.455, 0.838));
	}
}

rule("SpawnPoints Array Remove Area 1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-6.230, -0.110, 7.150), Closest Player To(Vector(-6.230, -0.110, 7.150), Team 1)) > 28;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(10.650, 6.468, 0.768));
		Modify Global Variable(Y, Remove From Array By Value, Vector(18.271, 6.455, 17.526));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-33.812, 0.344, 17.955));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-28.138, 6.455, 0.838));
	}
}

rule("SpawnPoints Array Add Area 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(2.440, 0.060, -31.420), Closest Player To(Vector(2.440, 0.060, -31.420), Team 1)) <= 20.500;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(7.059, 6.690, -28.235));
		Modify Global Variable(Y, Append To Array, Vector(-15.281, 1.455, -52.249));
		Modify Global Variable(Y, Append To Array, Vector(8.981, 6.528, -15.899));
		Modify Global Variable(Y, Append To Array, Vector(-14.988, 6.455, -45.021));
	}
}

rule("SpawnPoints Array Remove Area 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(2.440, 0.060, -31.420), Closest Player To(Vector(2.440, 0.060, -31.420), Team 1)) > 20.500;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(7.059, 6.690, -28.235));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-15.281, 1.455, -52.249));
		Modify Global Variable(Y, Remove From Array By Value, Vector(8.981, 6.528, -15.899));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-14.988, 6.455, -45.021));
	}
}

rule("SpawnPoints Array Add Area 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-30.610, 0.060, -32.360), Closest Player To(Vector(-30.610, 0.060, -32.360), Team 1)) <= 23.500;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(-26.980, 10, -17.954));
		Modify Global Variable(Y, Append To Array, Vector(-16.791, 0.605, -25.427));
		Modify Global Variable(Y, Append To Array, Vector(-29.713, 9.455, -14.434));
		Modify Global Variable(Y, Append To Array, Vector(-33.844, 9.455, -34.489));
		Modify Global Variable(Y, Append To Array, Vector(-36.068, 3.619, -54.972));
		Modify Global Variable(Y, Append To Array, Vector(-36.282, 10.184, -35.014));
	}
}

rule("SpawnPoints Array Remove Area 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-30.610, 0.060, -32.360), Closest Player To(Vector(-30.610, 0.060, -32.360), Team 1)) > 23.500;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(-26.980, 10, -17.954));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-16.791, 0.605, -25.427));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-29.713, 9.455, -14.434));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-33.844, 9.455, -34.489));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-36.068, 3.619, -54.972));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-36.282, 10.184, -35.014));
	}
}

rule("SpawnPoints Array Add Area 4a")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-71.900, 0, -30.450), Closest Player To(Vector(-71.900, 0, -30.450), Team 1)) <= 24.500;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(-56.677, 0.438, -29.706));
		Modify Global Variable(Y, Append To Array, Vector(-49.369, 2.561, -51.655));
		Modify Global Variable(Y, Append To Array, Vector(-65.743, 0.655, -34.102));
		Modify Global Variable(Y, Append To Array, Vector(-93.234, 7.607, -5.554));
		Modify Global Variable(Y, Append To Array, Vector(-81.476, 5.202, -43.811));
		Modify Global Variable(Y, Append To Array, Vector(-80.345, 6.784, -14.622));
		Modify Global Variable(Y, Append To Array, Vector(-72.214, 5, -34.558));
	}
}

rule("SpawnPoints Array Remove Area 4a")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-71.900, 0, -30.450), Closest Player To(Vector(-71.900, 0, -30.450), Team 1)) > 24.500;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(-56.677, 0.438, -29.706));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-49.369, 2.561, -51.655));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-65.743, 0.655, -34.102));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-93.234, 7.607, -5.554));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-81.476, 5.202, -43.811));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-80.345, 6.784, -14.622));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-72.214, 5, -34.558));
	}
}

rule("SpawnPoints Array Add Area 5")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-83.940, 0.720, 2.320), Closest Player To(Vector(-83.940, 0.720, 2.320), Team 1)) <= 16;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(-97.646, 7.422, -6.207));
		Modify Global Variable(Y, Append To Array, Vector(-78.929, 0.561, 7.588));
		Modify Global Variable(Y, Append To Array, Vector(-69.604, 0.450, 1.936));
	}
}

rule("SpawnPoints Array Remove Area 5")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-83.940, 0.720, 2.320), Closest Player To(Vector(-83.940, 0.720, 2.320), Team 1)) > 16;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(-97.646, 7.422, -6.207));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-78.929, 0.561, 7.588));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-69.604, 0.450, 1.936));
	}
}

rule("SpawnPoints Array Add Area 6")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-131.420, -1.500, 12.970), Closest Player To(Vector(-131.420, -1.500, 12.970), Team 1)) <= 34;
		Global.C > 3;
	}

	actions
	{
		Modify Global Variable(Y, Append To Array, Vector(-115.865, 1.526, -18.571));
		Modify Global Variable(Y, Append To Array, Vector(-130.990, -1.380, 28.040));
		Modify Global Variable(Y, Append To Array, Vector(-134.240, 6.940, 29.830));
		Modify Global Variable(Y, Append To Array, Vector(-153.330, -3.200, 32.440));
		Modify Global Variable(Y, Append To Array, Vector(-161.210, 0.070, 4.730));
		Modify Global Variable(Y, Append To Array, Vector(-133.588, -0.474, 11.947));
		Modify Global Variable(Y, Append To Array, Vector(-123.522, 1.526, -11.854));
	}
}

rule("SpawnPoints Array Remove Area 6")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Distance Between(Vector(-131.420, -1.500, 12.970), Closest Player To(Vector(-131.420, -1.500, 12.970), Team 1)) > 34;
	}

	actions
	{
		Modify Global Variable(Y, Remove From Array By Value, Vector(-115.865, 1.526, -18.571));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-130.990, -1.380, 28.040));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-134.240, 6.940, 29.830));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-153.330, -3.200, 32.440));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-161.210, 0.070, 4.730));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-133.588, -0.474, 11.947));
		Modify Global Variable(Y, Remove From Array By Value, Vector(-123.522, 1.526, -11.854));
	}
}

rule("Blocked Area Effects Array")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Global.W = Empty Array;
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(-3.570, 0.090, -27.560), 20.500, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(-30.610, 0.060, -32.360), 23.500, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(-70.070, 0, -35.610), 26, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(-85.530, -0.010, 1.660), 15, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(-85.530, -0.010, 1.660), 15, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(82.433, 7.991, -40.006), 10, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(-123.230, -1.220, -4.690), 20, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
		Create Effect(All Players(Team 1), Ring, Color(Red), Vector(31.809, 6, -43.663), 10, Visible To Position and Radius);
		Modify Global Variable(W, Append To Array, Last Created Entity);
	}
}

rule("Blocked Area Array")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Global.V = Empty Array;
		Modify Global Variable(V, Append To Array, Vector(-3.570, 0.090, -27.560));
		Modify Global Variable(V, Append To Array, Vector(-30.610, 0.060, -32.360));
		Modify Global Variable(V, Append To Array, Vector(-10.804, 7.451, -90.715));
		Modify Global Variable(V, Append To Array, Vector(-0.336, 11.146, -110.706));
		Modify Global Variable(V, Append To Array, Vector(-30.610, 0.060, -32.360));
		Modify Global Variable(V, Append To Array, Vector(-70.070, 0, -35.610));
		Modify Global Variable(V, Append To Array, Vector(75.765, 15.285, -84.208));
		Modify Global Variable(V, Append To Array, Vector(-85.530, -0.010, 1.660));
		Modify Global Variable(V, Append To Array, Vector(78.369, 10.194, -42.405));
		Modify Global Variable(V, Append To Array, Vector(-123.230, -1.220, -4.690));
		Modify Global Variable(V, Append To Array, Vector(34.147, 9.760, -48.401));
	}
}

rule("Area 2 Locked Door1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[0]) < 20.500;
		Global.C == 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[0], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 2 Locked Door2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[1]) < 20.500;
		Global.C == 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[1], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 2 Locked Door3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[2]) < 20.500;
		Global.C == 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[2], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 2 Locked Door4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[3]) < 20.500;
		Global.C == 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[3], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 3a Locked")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[4]) < 22;
		Global.C == 1;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[4], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 4a Locked")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[5]) < 26;
		Global.C == 2;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[5], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 4b Locked")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[6]) < 15;
		Global.C == 2;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[6], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 5 Locked Door1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[7]) < 15;
		Global.D == 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[7], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 5 Locked Door2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[8]) < 5;
		Global.D == 0;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[8], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 6 Locked Door1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[9]) < 20;
		Global.C == 3;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[9], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Area 6 Locked Door2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.V[10]) < 5;
		Global.C == 3;
		Global.O == False;
		Global.gamestarted == 1;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.V[10], Event Player), 1, To World, Cancel Contrary Motion);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Unlock Room 2 (Global Var C)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Vector(8.180, 1, -8.020), Event Player) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.C == 0;
		Event Player.points >= 500;
	}

	actions
	{
		Global.C = 1;
		Destroy Effect(Global.W[0]);
		Destroy Effect(Global.T[0]);
		Destroy In-World Text(Global.T[1]);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Next"), String("Location"), String("{0}!", String("Unlocked"))));
		Event Player.points -= 500;
	}
}

rule("Unlock Room 3 (Global Var C)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Vector(-5, 0.500, -36), Event Player) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.C == 1;
		Event Player.points >= 750;
	}

	actions
	{
		Global.C = 2;
		Destroy Effect(Global.W[1]);
		Destroy Effect(Global.T[2]);
		Destroy In-World Text(Global.T[3]);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Next"), String("Location"), String("{0}!", String("Unlocked"))));
		Event Player.points -= 750;
	}
}

rule("Unlock Room 4 (Global Var C)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Vector(-40.270, 0.050, -35.610), Event Player) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.C == 2;
		Event Player.points >= 1250;
	}

	actions
	{
		Global.C = 3;
		Global.D = 0;
		Destroy Effect(Global.W[2]);
		Destroy Effect(Global.W[3]);
		Destroy Effect(Global.T[4]);
		Destroy In-World Text(Global.T[5]);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Next"), String("Location"), String("{0}!", String("Unlocked"))));
		Event Player.points -= 1250;
	}
}

rule("Unlock Room 5 (Global Var D)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Vector(-68.710, -0.010, -9.310), Event Player) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		disabled Global.D == 0;
		Event Player.points >= 1250;
	}

	actions
	{
		Global.D = 1;
		Destroy Effect(Global.W[4]);
		Destroy Effect(Global.W[5]);
		Destroy Effect(Global.T[6]);
		Destroy In-World Text(Global.T[7]);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Next"), String("Location"), String("{0}!", String("Unlocked"))));
		Event Player.points -= 1250;
	}
}

rule("Unlock Room 6 (Global Var C)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Vector(-96.530, 1.390, -15.744), Event Player) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		disabled Global.C == 3;
		Event Player.points >= 1250;
	}

	actions
	{
		Global.C = 4;
		Destroy Effect(Global.W[6]);
		Destroy Effect(Global.W[7]);
		Destroy Effect(Global.T[8]);
		Destroy In-World Text(Global.T[9]);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(White), Event Player, 100);
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Next"), String("Location"), String("{0}!", String("Unlocked"))));
		Event Player.points -= 1250;
	}
}

rule("DoorBuy Effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Green), Vector(8.180, 1, -8.020), 2, Visible To Position and Radius);
		Modify Global Variable(T, Append To Array, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", String("{0} {1}", String("Next"),
			String("Location")), 500)), Vector(8.180, 1, -8.020), 1, Clip Against Surfaces, Visible To Position and String, Color(Green),
			Default Visibility);
		Modify Global Variable(T, Append To Array, Last Text ID);
		Create Effect(All Players(All Teams), Ring, Color(Green), Vector(-5, 0.500, -36), 2, Visible To Position and Radius);
		Modify Global Variable(T, Append To Array, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", String("{0} {1}", String("Next"),
			String("Location")), 750)), Vector(-5, 0.500, -36), 1, Clip Against Surfaces, Visible To Position and String, Color(Green),
			Default Visibility);
		Modify Global Variable(T, Append To Array, Last Text ID);
		Create Effect(All Players(All Teams), Ring, Color(Green), Vector(-40.270, 0.050, -35.610), 2, Visible To Position and Radius);
		Modify Global Variable(T, Append To Array, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", String("{0} {1}", String("Next"),
			String("Location")), 1250)), Vector(-40.270, 0.050, -35.610), 1, Clip Against Surfaces, Visible To Position and String, Color(
			Green), Default Visibility);
		Modify Global Variable(T, Append To Array, Last Text ID);
		Create Effect(All Players(All Teams), Ring, Color(Green), Vector(-68.710, -0.010, -9.310), 2, Visible To Position and Radius);
		Modify Global Variable(T, Append To Array, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", String("{0} {1}", String("Next"),
			String("Location")), 1250)), Vector(-68.710, -0.010, -9.310), 1, Clip Against Surfaces, Visible To Position and String, Color(
			Green), Default Visibility);
		Modify Global Variable(T, Append To Array, Last Text ID);
		Create Effect(All Players(All Teams), Ring, Color(Green), Vector(-96.530, 1.390, -15.744), 2, Visible To Position and Radius);
		Modify Global Variable(T, Append To Array, Last Created Entity);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), String("{0}: {1}", String("{0} {1}", String("Next"),
			String("Location")), 1250)), Vector(-96.530, 1.390, -15.744), 1, Clip Against Surfaces, Visible To Position and String, Color(
			Green), Default Visibility);
		Modify Global Variable(T, Append To Array, Last Text ID);
	}
}

rule("buy hero effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-31.710, 0.090, -15.250), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Mercy)), 1000)), Vector(-31.710, 0.090, -15.250), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(14.580, 1, -9.850), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Lúcio)), 10000 * 3)), Vector(14.580, 1, -9.850), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-14.074, 0.719, 6.985), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Soldier: 76)), 1000)), Vector(-14.074, 0.719, 6.985), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-25.600, 6, -48.480), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Hanzo)), 1250)), Vector(-25.600, 6, -48.480), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(16.880, 0.070, -16.030), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Zenyatta)), 1000)), Vector(16.880, 0.070, -16.030), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-30.510, 9, -13.950), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Pharah)), 1000)), Vector(-30.510, 9, -13.950), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-53.530, -0.060, -26.080), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Junkrat)), 1250)), Vector(-53.530, -0.060, -26.080), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-131.040, 0.070, -11.880), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Doomfist)), 500 + 500)), Vector(-131.040, 0.070, -11.880), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-110.120, 1.070, 1.150), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Baptiste)), 1250)), Vector(-110.120, 1.070, 1.150), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-150.800, 0.070, 3.380), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Bastion)), 1000 + 750)), Vector(-150.800, 0.070, 3.380), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-159.419, -2.474, 25.387), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Reaper)), 1000 * 5)), Vector(-159.419, -2.474, 25.387), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-83.870, 6, -7.430), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Symmetra)), 1000 + 750)), Vector(-83.870, 6, -7.430), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-10.200, 1, -52.230), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Zarya)), 1750)), Vector(-10.200, 1, -52.230), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-19.220, 0.070, 22.870), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Ashe)), 1250)), Vector(-19.220, 0.070, 22.870), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-9.560, 0.060, -14.450), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Genji)), 1250)), Vector(-9.560, 0.060, -14.450), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-35.950, 2, -49.260), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Roadhog)), 1750)), Vector(-35.950, 2, -49.260), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-72.240, 6.020, -14.140), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(D.Va)), 1750)), Vector(-72.240, 6.020, -14.140), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-72.660, 1.500, -28.580), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Brigitte)), 1750)), Vector(-72.660, 1.500, -28.580), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-92.200, 1.130, 8.730), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Reinhardt)), 750 + 1000)), Vector(-92.200, 1.130, 8.730), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-139.240, -0.930, 10.950), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Torbjörn)), 1000 + 750)), Vector(-139.240, -0.930, 10.950), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-130.010, 0.070, 43.090), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Sigma)), 1000 + 750)), Vector(-130.010, 0.070, 43.090), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-90.784, 1.263, -36.468), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Orisa)), 1250 * 1)), Vector(-90.784, 1.263, -36.468), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-75.940, 0.030, -0.240), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Mei)), 1000 + 750)), Vector(-75.940, 0.030, -0.240), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-19.590, 0.090, -38.370), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Moira)), 1250)), Vector(-19.590, 0.090, -38.370), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(4.813, 7.524, -38.806), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", Custom String("Press F {interact}"), String("{0}: {1}",
			Hero Icon String(Hero(Widowmaker)), 1000)), Vector(4.813, 7.524, -38.806), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Purple), Default Visibility);
	}
}

rule("Purchase Lucio")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(14.580, 1, -9.850)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 10000 * 3;
		disabled Hero Of(Event Player) != Hero(Lúcio);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Lúcio));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 10000 * 3;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 50;
	}
}

rule("Purchase Hanzo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-25.600, 6, -48.480)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Hanzo);
		Global.C >= 1;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Hanzo));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Zenyatta")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(16.880, 0.070, -16.030)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Zenyatta);
		Global.C >= 1;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Zenyatta));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Soldier 76")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-14.074, 0.719, 6.985)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Soldier: 76);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Soldier: 76));
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("Purchase Mercy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-31.710, 0.090, -15.250)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Mercy);
		Global.C >= 2;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Pharah")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-30.510, 9, -13.950)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		disabled Hero Of(Event Player) != Hero(Pharah);
		Global.C >= 2;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Pharah));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Junkrat")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-53.530, -0.060, -26.080)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Junkrat);
		Global.C >= 3;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Junkrat));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Symmetra")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-83.870, 6, -7.430)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Symmetra);
		Global.C >= 3;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Symmetra));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Doomfist")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-131.040, 0.070, -11.880)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 500 + 500;
		disabled Hero Of(Event Player) != Hero(Doomfist);
		Global.C >= 4;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Doomfist));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 500 + 500;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Baptiste")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-110.120, 1.070, 1.150)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Baptiste);
		Global.C >= 4;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Baptiste));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Bastion")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-150.800, 0.070, 3.380)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Bastion);
		Global.C >= 4;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Bastion));
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Reaper")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-159.419, -2.474, 25.387)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 * 5;
		disabled Hero Of(Event Player) != Hero(Reaper);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Reaper));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 * 5;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Disable Respawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disable Built-In Game Mode Respawning(Event Player);
		Event Player.F = False;
		Event Player.H = 1;
	}
}

rule("Initiate Health, Damage, and Healing Variables")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.healthmax == 0;
	}

	actions
	{
		Event Player.healthmax = 50;
		Event Player.damagevariable = 100;
		Event Player.M = 100;
	}
}

rule("Health, Damage, and Healing HUD")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.powerconnected == 1;
	}

	actions
	{
		Create HUD Text(Event Player, String("{0} : {1} : {2}", String("{0} {1}", Custom String("Lives"), Event Player.revived), String(
			"{0} {1}", String("Damage"), Event Player.damagevariable), String("{0} {1}", String("Heal"), Event Player.M)), Null, Null,
			Right, -1, Color(Blue), Color(Lime Green), Color(Lime Green), Visible To and String, Default Visibility);
	}
}

rule("Zombie kill")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == False;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Event Player.points += 50 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 50, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Global.R += 100 * Event Player.H;
	}
}

rule("Zombie kill headshot")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == True;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 200, String("Points"))));
		Global.R += 250 * Event Player.H;
	}
}

rule("Zombie points per hit")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Event Player.points += 10 * Event Player.H;
		Skip If(Event Player.H == 1, 1);
		Global.R += 20 * Event Player.H;
	}
}

rule("Player HUD Text")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))),
			Players In Slot(0, Team 1)), Players In Slot(0, Team 1).points), Health(Players In Slot(0, Team 1)), Null, Left, 0, Color(
			Purple), Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))),
			Players In Slot(1, Team 1)), Players In Slot(1, Team 1).points), Health(Players In Slot(1, Team 1)), Null, Left, 1, Color(
			Green), Color(Green), Color(Green), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))),
			Players In Slot(2, Team 1)), Players In Slot(2, Team 1).points), Health(Players In Slot(2, Team 1)), Null, Left, 2, Color(
			Orange), Color(Orange), Color(Orange), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))),
			Players In Slot(3, Team 1)), Players In Slot(3, Team 1).points), Health(Players In Slot(3, Team 1)), Null, Left, 3, Color(
			Turquoise), Color(Turquoise), Color(Turquoise), Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(4, Team 1))),
			Players In Slot(4, Team 1)), Players In Slot(4, Team 1).points), Null, Null, Left, 4, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), String("{0}: {1}", String("{0} {1}", Hero Icon String(Hero Of(Players In Slot(5, Team 1))),
			Players In Slot(5, Team 1)), Players In Slot(5, Team 1).points), Null, Null, Left, 5, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Global.Died[0] = Vector(500, 0, 500);
		Global.Died[1] = Vector(500, 0, 500);
		Global.Died[2] = Vector(500, 0, 500);
		Global.Died[3] = Vector(500, 0, 500);
		Global.Died[4] = Vector(500, 0, 500);
		Global.Died[5] = Vector(500, 0, 500);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(0, Team 1))),
			Players In Slot(0, Team 1), Players In Slot(0, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 20 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Purple), Default Visibility);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(1, Team 1))),
			Players In Slot(1, Team 1), Players In Slot(1, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 17 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Green), Default Visibility);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(2, Team 1))),
			Players In Slot(2, Team 1), Players In Slot(2, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 14 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
		Create In-World Text(All Players(Team 1), Custom String("{0} {1}: {2}", Hero Icon String(Hero Of(Players In Slot(3, Team 1))),
			Players In Slot(3, Team 1), Players In Slot(3, Team 1).points), Update Every Frame(Eye Position(Local Player)
			+ Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(Local Player)),
			Facing Direction Of(Local Player))) * 11 + Normalize(Cross Product(Up, Facing Direction Of(Local Player))) * -45), 2.400,
			Do Not Clip, Visible To Position and String, Color(Turquoise), Default Visibility);
	}
}

rule("Revive Player 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[0]) <= 4;
		Event Player != Players In Slot(0, Team 1);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.C = Players In Slot(0, Team 1);
		Chase Player Variable Over Time(Players In Slot(0, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(0, Team 1), Event Player);
		Resurrect(Players In Slot(0, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Yellow), Global.Died[0], 4);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(White), Players In Slot(0, Team 1), 100);
		Global.Died[0] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 300, String("Points"))));
		All Players(Team 1).InfoCooldown = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(0, Team 1), Null, Phased Out, 5);
		Set Max Health(Players In Slot(0, Team 1), 100);
	}
}

rule("Cancel Revive Player 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[0]) > 4;
		Event Player != Players In Slot(0, Team 1);
	}

	actions
	{
		Players In Slot(0, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(0, Team 1), C);
	}
}

rule("Revive Player 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[1]) <= 4;
		Event Player != Players In Slot(1, Team 1);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.C = Players In Slot(1, Team 1);
		Chase Player Variable Over Time(Players In Slot(1, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(1, Team 1), Event Player);
		Resurrect(Players In Slot(1, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.Died[1], 4);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Players In Slot(1, Team 1), 100);
		Global.Died[1] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 300, String("Points"))));
		All Players(Team 1).P = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(1, Team 1), Null, Phased Out, 5);
		Set Max Health(Players In Slot(1, Team 1), 100);
	}
}

rule("Cancel Revive Player 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[1]) > 4;
		Event Player != Players In Slot(1, Team 1);
	}

	actions
	{
		Players In Slot(1, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(1, Team 1), C);
	}
}

rule("Revive Player 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[2]) <= 4;
		Event Player != Players In Slot(2, Team 1);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.C = Players In Slot(2, Team 1);
		Chase Player Variable Over Time(Players In Slot(2, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(2, Team 1), Event Player);
		Resurrect(Players In Slot(2, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.Died[2], 4);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Players In Slot(2, Team 1), 100);
		Global.Died[2] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 300, String("Points"))));
		All Players(Team 1).Q = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(2, Team 1), Null, Phased Out, 5);
		Set Max Health(Players In Slot(2, Team 1), 100);
	}
}

rule("Cancel Revive Player 3")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[2]) > 4;
		Event Player != Players In Slot(2, Team 1);
	}

	actions
	{
		Players In Slot(2, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(2, Team 1), C);
	}
}

rule("Revive Player 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[3]) <= 4;
		Event Player != Players In Slot(3, Team 1);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.C = Players In Slot(3, Team 1);
		Chase Player Variable Over Time(Players In Slot(3, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(3, Team 1), Event Player);
		Resurrect(Players In Slot(3, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.Died[3], 4);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Players In Slot(3, Team 1), 100);
		Global.Died[3] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 300, String("Points"))));
		All Players(Team 1).HideHints = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(3, Team 1), Null, Invincible, 5);
		Set Max Health(Players In Slot(3, Team 1), 100);
	}
}

rule("Cancel Revive Player 4")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[3]) > 4;
		Event Player != Players In Slot(3, Team 1);
	}

	actions
	{
		Players In Slot(3, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(3, Team 1), C);
	}
}

rule("Revive Effects")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Global.Died[0], 4, Visible To Position and Radius);
		disabled Create In-World Text(Filtered Array(All Players(Team 1), Current Array Element.InfoCooldown == 1), String("{0} {1}", String(
			"Resurrect"), Hero Icon String(Hero Of(Players In Slot(0, Team 1)))), Global.Died[0], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[0], Players In Slot(0, Team 1).C,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Green), Global.Died[1], 4, Visible To Position and Radius);
		disabled Create In-World Text(Filtered Array(All Players(Team 1), Current Array Element.P == 1), String("{0} {1}", String("Resurrect"),
			Hero Icon String(Hero Of(Players In Slot(1, Team 1)))), Global.Died[1], 1, Do Not Clip, Visible To Position and String, Color(
			White), Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[1], Players In Slot(1, Team 1).C,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Global.Died[2], 4, Visible To Position and Radius);
		disabled Create In-World Text(Filtered Array(All Players(Team 1), Current Array Element.Q == 1), String("{0} {1}", String("Resurrect"),
			Hero Icon String(Hero Of(Players In Slot(2, Team 1)))), Global.Died[2], 1, Do Not Clip, Visible To Position and String, Color(
			White), Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[2], Players In Slot(2, Team 1).C,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Turquoise), Global.Died[3], 4, Visible To Position and Radius);
		disabled Create In-World Text(Filtered Array(All Players(Team 1), Current Array Element.HideHints == 1), String("{0} {1}", String(
			"Resurrect"), Hero Icon String(Hero Of(Players In Slot(3, Team 1)))), Global.Died[3], 1, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.Died[3], Players In Slot(3, Team 1).C,
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("ReKt LAL"), Global.Died[0], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("OOf"), Global.Died[1], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("2 GUD 4 ME"), Global.Died[2], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("HEP MEH"), Global.Died[3], 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("Player Respawn, Move Revive Effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Global.Died[Slot Of(Event Player)] = Vector(500, 0, 500);
	}
}

rule("Pickup double Points")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[1]) <= 1.500;
		All Players(Team 1).G[1] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[1] = Vector(500, 25, 500);
		All Players(Team 1).G[1] = True;
		All Players(Team 1).S[1] = 1;
		Big Message(All Players(All Teams), Custom String("Double points!"));
		All Players(Team 1).H = 2;
		disabled Create HUD Text(All Players(All Teams), String("Points"), Null, Null, Top, 1, Color(Yellow), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled All Players(Team 1).I[1] = Last Text ID;
		Wait(60, Ignore Condition);
		All Players(Team 1).H = 1;
		All Players(Team 1).G[1] = False;
		disabled Destroy HUD Text(All Players(Team 1).I[1]);
		All Players(Team 1).S[1] = 0;
	}
}

rule("Pickup slowmotion")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[2]) <= 1.500;
		All Players(Team 1).G[2] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[2] = Vector(500, 25, 500);
		All Players(Team 1).G[2] = True;
		All Players(Team 1).S[2] = 1;
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Slower"), String("Time"), String("-> {0}", String("{0} sec",
			10))));
		Set Slow Motion(50);
		disabled Create HUD Text(All Players(All Teams), String("Speed"), Null, Null, Top, 1, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled All Players(Team 1).I[2] = Last Text ID;
		Wait(5, Ignore Condition);
		Set Slow Motion(100);
		All Players(Team 1).G[2] = False;
		disabled Destroy HUD Text(All Players(Team 1).I[2]);
		All Players(Team 1).S[2] = 0;
	}
}

rule("Pickup insta kill")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[4]) <= 1.500;
		All Players(Team 1).G[4] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[4] = Vector(500, 25, 500);
		All Players(Team 1).G[4] = True;
		All Players(Team 1).S[4] = 1;
		Big Message(All Players(All Teams), Custom String("Insta-Kill!"));
		Set Damage Dealt(All Players(Team 1), 999999);
		Set Damage Received(All Players(Team 2), 1000);
		disabled Create HUD Text(All Players(All Teams), String("Damage"), Null, Null, Top, 1, Color(Red), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled All Players(Team 1).I[4] = Last Text ID;
		Wait(30, Ignore Condition);
		Set Damage Dealt(Players In Slot(0, Team 1), Players In Slot(0, Team 1).damagevariable);
		Set Damage Dealt(Players In Slot(1, Team 1), Players In Slot(1, Team 1).damagevariable);
		Set Damage Dealt(Players In Slot(2, Team 1), Players In Slot(2, Team 1).damagevariable);
		Set Damage Dealt(Players In Slot(3, Team 1), Players In Slot(3, Team 1).damagevariable);
		Set Damage Received(All Players(Team 2), 100);
		All Players(Team 1).G[4] = False;
		disabled Destroy HUD Text(All Players(Team 1).I[4]);
		All Players(Team 1).S[4] = 0;
	}
}

rule("Pickup InstaUlt")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[0]) <= 1.500;
		All Players(Team 1).G[0] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[0] = Vector(500, 25, 500);
		All Players(Team 1).G[0] = True;
		All Players(Team 1).S[0] = 1;
		Big Message(All Players(All Teams), String("{0} {1} {2}", String("Unlimited"), String("Ultimate Ability"), String("-> {0}", String(
			"{0} sec", 15))));
		disabled Create HUD Text(All Players(All Teams), String("Ultimate Ability"), Null, Null, Top, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled All Players(Team 1).I[0] = Last Text ID;
		Wait(15, Ignore Condition);
		All Players(Team 1).G[0] = False;
		disabled Destroy HUD Text(All Players(Team 1).I[0]);
		All Players(Team 1).S[0] = 0;
	}
}

rule("InstaUlt Active")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.G[0] == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Wait(2, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Power Effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamestarted == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Turquoise), Vector(-89.630, 6.930, -5.200), 2, Visible To Position and Radius);
		Global.powerconnected[0] = Last Created Entity;
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Connect"), String("Power")), Vector(-89.630, 6.930, -5.200),
			2.500, Do Not Clip, Visible To Position and String, Color(Turquoise), Default Visibility);
		Global.powerconnected[1] = Last Text ID;
	}
}

rule("Activate Power")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-89.630, 6.930, -5.200)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.K == 0;
		disabled Global.D == 1;
	}

	actions
	{
		Destroy Effect(Global.powerconnected[0]);
		Destroy In-World Text(Global.powerconnected[1]);
		Global.powerconnected = 1;
		Global.K = 1;
		Big Message(All Players(All Teams), String("{0} {1}", String("Power"), String("On")));
		Set Ultimate Charge(All Players(Team 2), 100);
	}
}

rule("Upgrade Effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerconnected == 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Red), Vector(-3.804, 0.542, -26.678), 0.750, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Red), Vector(-3.804, 1.250, -26.678), 0.750, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Red), Vector(-3.804, 0.542, -26.678), 1.500, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Vector(-87.357, 2.140, -8.729), 1.500, Visible To Position and Radius);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(-138.201, -0.394, 34.089), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Juggernaut"), String("{0} {1}", 100, String(
			"{0}: {1}", String(""), 2500))), Vector(-3.804, 0.542, -26.678), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Pack-a-Punch"), String("{0} {1}", 100, String(
			"{0}: {1}", String(""), 5000))), Vector(-87.357, 2.140, -8.729), 1, Clip Against Surfaces, Visible To Position and String,
			Color(Red), Default Visibility);
		Create In-World Text(All Players(All Teams), Custom String("passive & healing dealt buff: 6000 points"), Vector(-138.201, -0.394,
			34.089), 1, Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Orange), Vector(-38.370, 0.523, -34.687), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Headshot maniac"), String("{0} {1}", Custom String(
			"50% to 400%"), String("{0}: {1}", String(""), 4000))), Vector(-38.370, 0.523, -34.687), 1, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(4.434, 0.522, 14.392), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("Revive self: 10000 points"), Vector(4.434, 0.522, 14.392), 1,
			Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Double-mag"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Vector(-63.866, 0.809, -49.014), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(-63.866, 0.809, -49.014), 1.500, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} + {1}", Custom String("Sprint burst"), String("{0} {1}", Null, String(
			"{0}: {1}", String(""), 2000))), Vector(-21.612, 1.455, -55.083), 1, Clip Against Surfaces, Visible To Position and String,
			Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Ring, Color(Blue), Vector(-21.612, 1.455, -55.083), 1.500, Visible To Position and Radius);
	}
}

rule("PERK Purchase pack a punch Upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-87.357, 2.140, -8.729)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 5000;
		Global.powerconnected == 1;
		Event Player.Packapunch == 0;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.magazines += 20;
		Communicate(Event Player, Emote Up);
		Event Player.points -= 5000;
		Event Player.damagevariable = 200;
		Set Damage Dealt(Event Player, Event Player.damagevariable);
		Create Effect(All Players(All Teams), Echo Cloning Effect, Color(White), Event Player, 1, Visible To Position and Radius);
		Event Player.Packapunch = 1;
		Wait(0.110, Ignore Condition);
		Event Player.Maniac = 0;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK Purchase Health Upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-3.804, 0.542, -26.678)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2500;
		Global.powerconnected == 1;
		Event Player.Jugg == 0;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Communicate(Event Player, Emote Up);
		Event Player.points -= 2500;
		Wait(0.250, Ignore Condition);
		Set Max Health(Event Player, 200);
		Heal(Event Player, Null, 1000);
		Event Player.Jugg = 1;
		Wait(0.250, Ignore Condition);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK Purchase Healing Upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-138.201, -0.394, 34.089)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 6000;
		Global.powerconnected == 1;
		Event Player.M != 400;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Communicate(Event Player, Emote Up);
		Wait(0.100, Ignore Condition);
		Event Player.points -= 6000;
		Event Player.M = 400;
		Set Healing Dealt(Event Player, Event Player.M);
		Wait(0.500, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Empty Global Var UVW")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.C == 4;
		Global.D == 1;
	}

	actions
	{
		Global.W = Empty Array;
		disabled Global.X = Empty Array;
		Global.V = Empty Array;
		Global.U = Empty Array;
	}
}

rule("Purchase Genji")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-9.560, 0.060, -14.450)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Genji);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Genji));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Ashe")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-19.220, 0.070, 22.870)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Ashe);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Ashe));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Zarya")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-10.200, 1, -52.230)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(Zarya);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Zarya));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Roadhog")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-35.950, 2, -49.260)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(Roadhog);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Roadhog));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Dva")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-72.240, 6.020, -14.140)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(D.Va);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(D.Va));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Brigitte")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-72.660, 1.500, -28.580)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1750;
		disabled Hero Of(Event Player) != Hero(Brigitte);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Brigitte));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("Purchase Reinhardt")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-92.200, 1.130, 8.730)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Reinhardt);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Reinhardt));
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("Purchase Torbjorn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-139.240, -0.930, 10.950)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Torbjörn);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Torbjörn));
		Event Player.points -= 750 + 1000;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("Purchase Sigma")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-130.010, 0.070, 43.090)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Sigma);
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Sigma));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("Purchase Orisa")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-90.784, 1.263, -36.468)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250 * 1;
		disabled Hero Of(Event Player) != Hero(Orisa);
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Orisa));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250 * 1;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("Spawn Blockers")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Create Effect(All Players(Team 1), Sphere, Color(Red), Vector(-98.375, 2.299, -31.485), 6, Visible To Position and Radius);
		Create Effect(All Players(Team 1), Sphere, Color(Red), Vector(-71.235, 1.450, -52.386), 5, Visible To Position and Radius);
	}
}

rule("Spawn Blocker Effect A")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-98.375, 2.299, -31.485)) <= 6.500;
	}

	actions
	{
		Teleport(Event Player, Vector(-83.967, 1.347, -24.774));
	}
}

rule("Spawn Blocker Effect B")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-71.235, 1.450, -52.386)) <= 5;
	}

	actions
	{
		Teleport(Event Player, Vector(-61.903, 0.856, -48.146));
	}
}

rule("Spawn Blocker Effect C")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-162.793, 1.729, 12.898)) <= 2;
	}

	actions
	{
		Teleport(Event Player, Vector(-159.210, 1.080, 12.338));
	}
}

rule("Spawn Blocker Effect D")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-164.359, 1.430, 5.378)) <= 2;
	}

	actions
	{
		Teleport(Event Player, Vector(-159.675, 1.080, 6.641));
	}
}

rule("Spawn Blocker Effect E")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-156.662, 1.078, 48.117)) <= 2;
	}

	actions
	{
		Teleport(Event Player, Vector(-152.042, 0.840, 47.075));
	}
}

rule("Purchase Moira")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-19.590, 0.090, -38.370)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1250;
		disabled Hero Of(Event Player) != Hero(Moira);
		Global.C >= 2;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Moira));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1250;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("Purchase Mei2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-75.940, 0.030, -0.240)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000 + 750;
		disabled Hero Of(Event Player) != Hero(Mei);
		Global.C >= 3;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Mei));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000 + 750;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
		Event Player.magazines = 10;
	}
}

rule("PBFF Sphere")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.roundnumber == 1;
	}

	actions
	{
		Create Effect(All Players(Team 2), Sphere, Color(White), Vector(-137.480, -12, 7.160), 11, Visible To Position and Radius);
	}
}

rule("PBFF Sphere Teleport")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-137.480, -12, 7.160)) < 11;
	}

	actions
	{
		Teleport(Event Player, Vector(-143.150, -3.200, 28.950));
	}
}

disabled rule("Purchase Winston")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(4.813, 7.524, -38.806)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Hero Of(Event Player) != Hero(Widowmaker);
		Global.C >= 1;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Widowmaker));
		disabled Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Event Player, 10);
		disabled Play Effect(All Players(All Teams), Buff Impact Sound, Color(Purple), Event Player, 50);
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		disabled Heal(Event Player, Null, 99999);
	}
}

rule("spawned in points")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		disabled Global.gamestarted == 1;
	}

	actions
	{
		Wait(3, Ignore Condition);
		Event Player.points += Workshop Setting Integer(Custom String("Points"), Custom String("Points all players"), 300, 0, 9999999, 0)
			* Global.roundnumber + Workshop Setting Integer(Custom String("points"), Custom String("more points"), 0, 0, 9999999, 0);
		Global.D = Workshop Setting Integer(Custom String("difficulty"), Custom String("difficulty"), 1, 1, 3, 0);
	}
}

rule("heal over time effect")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		All Living Players(Team 1) == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Start Heal Over Time(Event Player, Event Player, 3, Event Player.M / 4 + 8);
		Wait(5, Ignore Condition);
	}
}

rule("rien use ability")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.roundnumber / 1 >= Absolute Value(21);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("torb use ability")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.roundnumber / 1 >= Absolute Value(15);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(5, Ignore Condition);
		Loop;
	}
}

rule("is hacked")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 0);
		Set Primary Fire Enabled(Event Player, False);
		Set Status(Event Player, Null, Burning, 4);
		Start Damage Over Time(Event Player, Null, 10, 60);
		Disallow Button(Event Player, Button(Jump));
	}
}

rule("rien use ability 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.roundnumber / 1 >= Absolute Value(26);
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("is not hacked")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("spawn brigs and torbs 6 - 10")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(6);
		Global.roundnumber / 1 <= Absolute Value(10);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 1, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(0.500, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.500, Ignore Condition);
		disabled Create Dummy Bot(Hero(Torbjörn), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(0.500, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, -1, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("Spawn torbs 11 - 15")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(11);
		Global.roundnumber / 1 < Absolute Value(16);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 8, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 9, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 10, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 11, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 1, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 12, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 13, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Torbjörn), Team 2, 14, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Torbjörn), Team 2, 15, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("spawn torb rien brig 16 - 20")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(16);
		Global.roundnumber / 1 < Absolute Value(21);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 8, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 9, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Torbjörn), Team 2, 10, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 11, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 1, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Brigitte), Team 2, 12, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 13, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Brigitte), Team 2, 14, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Reinhardt), Team 2, 15, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Reinhardt), Team 2, 16, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Torbjörn), Team 2, 17, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("brigg wave 16")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Global.roundnumber / 1 >= Absolute Value(16);
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Set Move Speed(Event Player, 120);
	}
}

rule("flaming rien idea")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Global.roundnumber / 1 >= Absolute Value(21);
	}

	actions
	{
		Set Status(Event Player, Null, Burning, 9999);
		Set Move Speed(Event Player, 120);
	}
}

rule("brig use whip shot")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Brigitte;
	}

	conditions
	{
		Global.roundnumber / 1 >= Absolute Value(16);
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 3;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(6, Ignore Condition);
		Loop;
	}
}

rule("hammond stop grapple")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Wait(4, Ignore Condition);
		Abort If Condition Is False;
		Set Status(Event Player, Null, Hacked, 6);
	}
}

rule("GAMELOGIC mystery box")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Distance Between(Event Player, Vector(-149.794, -2.401, 24.952)) <= 2;
		Event Player.points >= 950;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, First Of(Random Value In Array(Randomized Array(All Heroes))));
		Wait(0.100, Ignore Condition);
		Resurrect(Event Player);
		Event Player.points -= 950;
		disabled Loop If Condition Is True;
		Event Player.magazines = 10;
	}
}

rule("EFFECT mystery box effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Vector(-149.794, -2.401, 24.952), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), String("{0} {1}", String("Buy"), Custom String("Mystery box: 950 points")), Vector(
			-149.794, -2.401, 24.952), 1, Clip Against Surfaces, Visible To Position and String, Color(Purple), Default Visibility);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Vector(-149.794, -2.401, 24.952), 2,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Vector(-149.794, -2.401, 24.952), 0.750,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Vector(-149.794, -2.401, 24.202), 0.750,
			Visible To Position and Radius);
		Create Effect(All Players(All Teams), Sphere, Color(Purple), Vector(-149.794, -2.401, 25.702), 0.750,
			Visible To Position and Radius);
	}
}

rule("GAMELOGIC start as mccree")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Workshop Setting Hero(Custom String("Starting hero"), Custom String("Hero start as"),
			Cassidy, 0));
		Abort If(Has Status(Event Player, Invincible));
	}
}

rule("GAMELOGIC points loss for high roller")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.points >= 3000;
	}

	actions
	{
		Event Player.points -= Event Player.points * 0.200;
	}
}

rule("GAMELOGIC death points loss")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.points >= 1000;
	}

	actions
	{
		Event Player.points -= 200 * Event Player.H;
	}
}

rule("EFFECT instructions")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("Find the start button and stand on it together."), Vector(-26.136,
			3.500, 0.544), 2, Clip Against Surfaces, Visible To Position and String, Color(Blue), Default Visibility);
	}
}

rule("GAMELOGIC Single player lives mechanic")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) == 1;
		Event Player.singlelives < 3;
	}

	actions
	{
		Resurrect(Event Player);
		Wait(0.050, Ignore Condition);
		Set Status(Event Player, Null, Knocked Down, 2);
		Set Status(Event Player, Null, Phased Out, 10);
		Event Player.singlelives = Event Player.singlelives + 1;
	}
}

rule("DAMAGE Melee does more damage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Hero Of(Event Player) != Hero(Cassidy);
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Set Damage Dealt(Event Player, 350);
		Allow Button(Event Player, Button(Melee));
		Press Button(Event Player, Button(Melee));
		Wait(0.500, Ignore Condition);
		Set Damage Dealt(Event Player, Event Player.damagevariable);
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("POINTS Zombie Kill Melee")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Event Player.points += 130 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 130, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		disabled Small Message(Attacker, String("{0} + {1}", String(""), String("{0} {1}", 260, String("Points"))));
		Global.R += 260 * Event Player.H;
	}
}

rule("Bot taunt LOLOLOLOOLOLOLOL")
{
	event
	{
		Player Earned Elimination;
		Team 2;
		All;
	}

	actions
	{
		Set Move Speed(Event Player, 0);
		Wait(0.016, Ignore Condition);
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Primary Fire));
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Thanks);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Wait(0.250, Ignore Condition);
		Set Move Speed(Event Player, 100);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Jump));
	}
}

rule("disable melee by default")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("Melee does more damage mccree")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Hero Of(Event Player) == Hero(Cassidy);
	}

	actions
	{
		Wait(0.050, Ignore Condition);
		Set Damage Dealt(Event Player, 1500);
		Allow Button(Event Player, Button(Melee));
		Press Button(Event Player, Button(Melee));
		Wait(0.500, Ignore Condition);
		Set Damage Dealt(Event Player, Event Player.damagevariable);
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("ring around player 2 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 1;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Green), Event Player, 1, Visible To Position and Radius);
	}
}

rule("ring around the player 3 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 2;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Orange), Event Player, 1, Visible To Position and Radius);
	}
}

rule("ring around the player 4 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 3;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Turquoise), Event Player, 1, Visible To Position and Radius);
	}
}

rule("ring around the player 1 effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Slot 0;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(Purple), Event Player, 1, Visible To Position and Radius);
	}
}

rule("say Hi if stuck Bots")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Speed Of(Event Player) < 0.750;
		Has Status(Event Player, Hacked) == False;
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) > 2;
	}

	actions
	{
		Communicate(Event Player, Hello);
		Wait(15, Ignore Condition);
	}
}

rule("server 24/7 rule to restart if everyone left")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) == 0;
		Number Of Players(Team 2) > 0;
	}

	actions
	{
		Declare Team Victory(Team 2);
		Wait(2, Ignore Condition);
		Restart Match;
	}
}

rule("wave >1 warning")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Hero Being Played(Hero(Cassidy), Team 1) == Hero Of(Event Player);
		Global.roundnumber > 1;
	}

	actions
	{
		Abort If(Hero Of(Event Player) != Hero(Cassidy));
		Wait(0.250, Ignore Condition);
		Big Message(Event Player, Custom String("WARNING: SWITCH OFF MCCREE - LOW DAMAGE CAPABILITY"));
		Wait(30, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("solo play mode effect")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) < 2;
	}

	actions
	{
		Wait(15, Ignore Condition);
		Abort If Condition Is False;
		Big Message(All Players(All Teams), Custom String("SOLO MODE: YOU NOW HAVE 3 LIVES TOTAL"));
	}
}

rule("player joined invincible")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 30);
	}
}

disabled rule("lllllllllll")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Healer != Event Player;
	}

	actions
	{
		Abort If Condition Is False;
		Healer.points += 10 * Healer.H;
		Wait(0.200, Ignore Condition);
	}
}

rule("sky effect")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Effect(All Players(All Teams), Sphere, Color(Red), Vector(0, 0, 0), 200, Visible To Position and Radius);
	}
}

rule("round won sound effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Z <= 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion Sound, Color(White), Event Player, 80);
	}
}

rule("show single player lives effect")
{
	event
	{
		Player Joined Match;
		Team 1;
		All;
	}

	conditions
	{
		Number Of Players(Team 1) < 2;
	}

	actions
	{
		Wait(5, Ignore Condition);
		Abort If Condition Is False;
		Create HUD Text(All Players(All Teams), Event Player.singlelives, Null, Null, Right, 2, Color(Green), Color(Green), Color(Green),
			Visible To and String, Default Visibility);
	}
}

rule("MCCREE pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Cassidy);
		Attacker.Packapunch == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Damage(Players Within Radius(Victim, 3, Team 2, Off), Attacker, 420);
		Play Effect(All Players(All Teams), Good Explosion, Color(White), Victim, 3);
		Wait(0.450, Ignore Condition);
	}
}

rule("mei flamethrower idea")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		Attacker.Packapunch == 0;
	}

	actions
	{
		Set Status(Victim, Null, Burning, 8);
		Start Damage Over Time(Victim, Null, 8, Max Health(Victim) * 0.050);
		Wait(0.250, Ignore Condition);
		Attacker.points += 10 * Event Player.H;
	}
}

rule("mei points")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
	}

	actions
	{
		Attacker.points += 50 * Event Player.H;
	}
}

rule("mei flamethrower idea With PAP")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mei);
		Attacker.Packapunch == 1;
	}

	actions
	{
		Set Status(Victim, Null, Burning, 10);
		Start Damage Over Time(Victim, Null, 10, Max Health(Victim) * 0.100);
		Wait(0.250, Ignore Condition);
		Attacker.points += 10 * Event Player.H;
	}
}

rule("Headshot maniac Perk add damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Maniac == 1;
		Event Was Critical Hit == True;
		Event Player.damagevariable < 391;
	}

	actions
	{
		Event Player.damagevariable += 10;
		Set Damage Dealt(Event Player, Event Player.damagevariable);
	}
}

rule("headshot maniac Perk remove damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Was Critical Hit == False;
		Event Player.damagevariable >= 55;
		Event Player.Maniac == 1;
	}

	actions
	{
		Event Player.damagevariable -= 2.500;
		Set Damage Dealt(Event Player, Event Player.damagevariable);
	}
}

rule("soldier 76 explosive rounds")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == Hero(Soldier: 76);
	}

	actions
	{
		Wait(0.220, Ignore Condition);
		Damage(Players Within Radius(Victim, 5, Team 2, Off), Attacker, 20);
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
	}
}

rule("Rule 198")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Event Player.HEADSH = 1;
	}
}

rule("Purchase headshot maniac upgrade")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-38.370, 0.523, -34.687)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 4000;
		Global.powerconnected == 1;
	}

	actions
	{
		Event Player.Packapunch = 0;
		Event Player.points -= 4000;
		Clear Status(Event Player, Burning);
		Event Player.damagevariable = 200;
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Event Player.Maniac = 1;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("multiplayer extra life Perk")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.revived == 1;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 2);
		Resurrect(Event Player);
		Set Status(Event Player, Null, Invincible, 10);
		Event Player.revived = 0;
	}
}

rule("buy revive multiplayer")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(4.434, 0.522, 14.392)) < 4;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 10000;
		Global.powerconnected == 1;
		Event Player.revivebought == 0;
		Number Of Players(Team 1) > 1;
	}

	actions
	{
		Event Player.points -= 10000;
		Event Player.revived = 1;
		Wait(0.100, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Event Player.revivebought = 1;
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("player died with maniac")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Maniac == 1;
	}

	actions
	{
		Global.Died[Slot Of(Event Player)] = Nearest Walkable Position(Event Player);
		Big Message(All Players(All Teams), String("{0} {1}", Event Player, String("{0}!", String("Down"))));
		Global.E[Slot Of(Event Player)] = True;
		Set Max Health(Event Player, 100);
		Wait(0.016, Ignore Condition);
		Event Player.Jugg = 0;
		Wait(0.016, Ignore Condition);
		Event Player.healthmax = 50;
		Event Player.Maniac = 0;
		Wait(0.016, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
		Event Player.damagevariable = 100;
		Wait(0.016, Ignore Condition);
		Event Player.M = 100;
		Set Healing Dealt(Event Player, 100);
		Event Player.doublemag = 0;
		Wait(0.100, Ignore Condition);
		Event Player.sprintburstperk = 0;
	}
}

rule("player died without maniac")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Maniac == 0;
	}

	actions
	{
		Global.Died[Slot Of(Event Player)] = Nearest Walkable Position(Event Player);
		Big Message(All Players(All Teams), String("{0} {1}", Event Player, String("{0}!", String("Down"))));
		Set Max Health(Event Player, 100);
		Global.E[Slot Of(Event Player)] = True;
		Wait(0.100, Ignore Condition);
		Event Player.Jugg = 0;
		Wait(0.100, Ignore Condition);
		Event Player.healthmax = 50;
		Wait(0.100, Ignore Condition);
		Event Player.M = 100;
		Wait(0.100, Ignore Condition);
		Set Healing Dealt(Event Player, 100);
		Event Player.doublemag = 0;
		Wait(0.100, Ignore Condition);
		Event Player.sprintburstperk = 0;
	}
}

rule("Bots crouch")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.O == False;
	}

	actions
	{
		Wait(10, Ignore Condition);
		Start Holding Button(Event Player, Button(Crouch));
		Wait(0.400, Ignore Condition);
		Stop Holding Button(Event Player, Button(Crouch));
		Loop;
	}
}

rule("Died Low points Bonus")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.points < 1500;
		Global.roundnumber > 5;
	}

	actions
	{
		Event Player.points = 1500;
	}
}

rule("lucio knockback")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Hero Of(Attacker) == Hero(Lúcio);
		Event Player.Packapunch == 1;
	}

	actions
	{
		Set Status(Victim, Null, Knocked Down, 4);
	}
}

rule("power challenge effects")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.powerconnected == 1;
		Global.roundnumber < 15;
	}

	actions
	{
		Set Ultimate Charge(Players On Hero(Hero(Brigitte), Team 2), 100);
	}
}

rule("torb use ability")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	conditions
	{
		Is Moving(Event Player) == True;
		Global.powerconnected == 1;
		Global.roundnumber < 15;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
		Wait(5, Ignore Condition);
		Loop;
	}
}

rule("l")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Global.gamestarted == 1;
	}

	actions
	{
		Skip If(Count Of(Event Player.InfoUI) == 0, 6);
		Destroy HUD Text(Event Player.InfoUI[Count Of(Event Player.InfoUI) - 1]);
		Modify Player Variable(Event Player, InfoUI, Remove From Array By Index, Count Of(Event Player.InfoUI) - 1);
		Wait(0, Ignore Condition);
		Loop If(Count Of(Event Player.InfoUI) != 0);
		Event Player.InfoCooldown = Total Time Elapsed + 5;
		disabled Event Player.UI = 0;
		Abort;
	}
}

rule("Info UI")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UI == 0;
		Global.gamestarted == 0;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Null, Null, Custom String("."), Left, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		disabled Wait(0.016, Ignore Condition);
		disabled Create HUD Text(Event Player, Null, Null, Custom String("."), Left, 1, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		disabled Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("You will only get your ultimate once per wave, use it wisely!"), Null, Left, 15,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("You can find the latest version on Workshop.codes made by mightydog"), Null,
			Left, 102, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("Zombies remastered workshop code:JPSXJ - 11/29/2021"), Null, Left, 101, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} Workshop Information:", Icon String(Heart)), Left, 100, Color(White),
			Color(White), Color(Red), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("You have limited ammo, Reloading throws away your old magazine"), Null, Left,
			33, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("if you die, you will lose points"), Null, Left, 32, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			"Score will be in the bottom right and prices for everything will be displayed in game just press F to buy"), Null, Left, 31,
			Color(White), Color(Green), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0}How points work:", Icon String(Diamond)), Left, 30, Color(White),
			Color(White), Color(Red), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String("Connecting the power allows you to buy perks (7 total) and see your stats"),
			Null, Left, 22, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			"When you find and connect the power make sure no zombies are around as they will ultimate"), Null, Left, 21, Color(White),
			Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0}Connect the power", Icon String(Bolt)), Left, 20, Color(White), Color(
			White), Color(Red), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			" in the map there is a mystery box, 7 perks, but you lose them if you die, excluding Pack a punch"), Null, Left, 13, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			"Try to progress and survive by switching heros, mccree does less damage, and melee does 500% damage"), Null, Left, 12, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(" there will be 7 kinds of zombies: every 5 waves they use their ultimates"),
			Null, Left, 11, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} How This mode works:", Icon String(Checkmark)), Left, 10, Color(
			White), Color(White), Color(Red), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		Create HUD Text(Event Player, Null, Custom String(
			"In solo play, you get 3 lives, however in multiplayer you can buy only 1 extra life."), Null, Left, 14, Color(White), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Wait(0.016, Ignore Condition);
		disabled Create HUD Text(Event Player, Null, Null, Custom String("."), Left, 2, Color(White), Color(White), Color(Orange),
			Visible To and String, Default Visibility);
		disabled Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Custom String(
			"                                                    |   Start the mode to hide the instructions   |"), Null, Left, 900, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, InfoUI, Append To Array, Last Text ID);
		Event Player.InfoCooldown = Total Time Elapsed + 0.160;
		Event Player.HideHints = True;
		Event Player.UI = 1;
	}
}

rule("reloading")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 1;
	}
}

rule("set frozen from winston")
{
	event
	{
		Player Dealt Damage;
		All;
		Winston;
	}

	conditions
	{
		Event Player.Packapunch == 1;
	}

	actions
	{
		Set Status(Victim, Null, Frozen, 2);
	}
}

rule("freeze nearby people")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Status(Players Within Radius(Event Player, 6, Team 2, Off), Null, Frozen, 2);
	}
}

rule("winston only has 1 shot")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.Packapunch == 1;
	}

	actions
	{
		Press Button(Event Player, Button(Reload));
		Disallow Button(Event Player, Button(Melee));
	}
}

rule("instant kill winston")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Wait(0.500, Ignore Condition);
		Kill(Event Player, Players On Hero(Hero(Winston), Team 1));
	}
}

disabled rule("Winston points")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		Winston;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Winston);
		Event Player.Packapunch == 1;
	}

	actions
	{
		Attacker.points += 50 * Event Player.H;
	}
}

rule("start button effect")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.gamestarted == 0;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("START (all players must stand on)"), Vector(-27.186, 0.466, 0.843), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Create Effect(All Players(All Teams), Cloud, Color(White), Vector(-27.186, 0.466, 0.843), 1, Visible To Position and Radius);
	}
}

rule("start button control")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamestarted == 0;
		All Players(Team 1) == Players Within Radius(Vector(-27.186, 0.466, 0.843), 2, Team 1, Off);
	}

	actions
	{
		Global.gamestarted = 1;
		Wait(2, Ignore Condition);
		Global.roundnumber = Workshop Setting Integer(Custom String("Set Wave number"), Custom String("Set starting wave"), 1, 1, 100, 0);
	}
}

rule("start boundry 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamestarted == 0;
		Players Within Radius(Vector(-21.598, 0.335, -4.825), 3, All Teams, Off) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(-27.149, 0.437, -4.648), 50, To World, Cancel Contrary Motion);
	}
}

rule("start boundry 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamestarted == 0;
		Players Within Radius(Vector(-26.097, 0.319, 11.031), 3, All Teams, Off) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(-24.981, 2.097, -8.495), 50, To World, Cancel Contrary Motion);
	}
}

rule("start boundry 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.gamestarted == 0;
		Players Within Radius(Vector(-23.134, 0.719, 4.636), 3, All Teams, Off) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Vector(-28.844, 0.523, 5.113), 50, To World, Cancel Contrary Motion);
	}
}

rule("Rule 210")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Disable Built-In Game Mode Music;
		Disable Kill Feed(Event Player);
		Disable Built-In Game Mode Announcer;
		disabled Disable Scoreboard(Event Player);
		Disable Nameplates(All Living Players(Team 2), Event Player);
		Stop Forcing Player Outlines(All Players(Team 2), Event Player);
	}
}

disabled rule("server info")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Null, Custom String("Server Load: {0}\nServer Load Average: {1}\nServer Load Peak: {2}",
			Server Load, Server Load Average, Server Load Peak), Null, Right, 0, Null, Color(White), Null, Visible To and String,
			Default Visibility);
	}
}

rule("out of ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.magazines <= 0;
		Hero Of(Event Player) != Hero(Moira);
		Hero Of(Event Player) != Hero(Mercy);
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Brigitte);
		Hero Of(Event Player) != Hero(Torbjörn);
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("max ammo amount")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.magazines = Workshop Setting Integer(Custom String("Starting ammo"), Custom String("Ammo"), 5, 0, 100, 0);
	}
}

rule("enable guns when they have ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.magazines > 0;
		Hero Of(Event Player) != Hero(Mei);
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
	}
}

rule("Ammo hud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		disabled Create HUD Text(Event Player, Event Player.magazines, Null, Custom String("magazines left"), Left, 4, Color(White), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Create In-World Text(Event Player, Custom String("Magazines: {0}", Event Player.magazines), Update Every Frame(Eye Position(
			Local Player) + Facing Direction Of(Local Player) * 65 + Normalize(Cross Product(Cross Product(Up, Facing Direction Of(
			Local Player)), Facing Direction Of(Local Player))) * 26.500 + Normalize(Cross Product(Up, Facing Direction Of(Local Player)))
			* -46), 2.400, Do Not Clip, Visible To Position and String, Color(Aqua), Default Visibility);
	}
}

rule("moira ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 0.050;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("out of ammo moira")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Event Player.magazines <= 0;
	}

	actions
	{
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("mccree lose ammo on roll")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.magazines -= 0.500;
	}
}

rule("mercy disable gun if no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Weapon(Event Player) == 2;
		Event Player.magazines <= 0;
	}

	actions
	{
		Set Weapon(Event Player, 1);
	}
}

rule("torb disable gun if no ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Weapon(Event Player) == 1;
		Event Player.magazines <= 0;
	}

	actions
	{
		Set Weapon(Event Player, 2);
	}
}

rule("reloading with doublemag")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.magazines -= 0.500;
	}
}

rule("genji ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 300);
		Set Damage Received(Event Player, 50);
		Wait(6, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
		Set Damage Received(Event Player, 100);
	}
}

rule("ashe ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 300);
		Wait(10, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("widowmaker ultimate")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(All Players(Team 1), 300);
		Wait(12.500, Ignore Condition);
		Set Damage Dealt(All Players(Team 1), 100);
	}
}

rule("Purchase widowmaker")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(4.527, 6.481, -39.352)) <= 2;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 1000;
		Event Player.F == False;
	}

	actions
	{
		Start Forcing Player To Be Hero(Event Player, Hero(Widowmaker));
		Event Player.points -= 1000;
		Wait(0.250, Ignore Condition);
		Event Player.magazines = 10;
	}
}

rule("reaper lose ammo on wraith")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.magazines -= 0.500;
	}
}

rule("symmetra ultimate resistance")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(All Living Players(Team 1), Shields, 600, True, True);
		Wait(12.500, Ignore Condition);
		Remove Health Pool From Player(Last Created Health Pool);
	}
}

rule("disable ashe reload for a more logical reload")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	actions
	{
		Disallow Button(Event Player, Button(Reload));
	}
}

rule("remove less than zero issue on ammo")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.magazines < 0;
	}

	actions
	{
		Event Player.magazines = 0;
	}
}

rule("fix reload disabled (maybe)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Ashe);
	}

	actions
	{
		Allow Button(Event Player, Button(Reload));
	}
}

rule("buy double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-63.866, 0.809, -49.014)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2000;
		Global.powerconnected == 1;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.points -= 2000;
		Wait(0.250, Ignore Condition);
		Event Player.doublemag = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK sprint burst BUY")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-21.612, 1.455, -55.083)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2000;
		Global.powerconnected == 1;
		Event Player.sprintburstperk == 0;
	}

	actions
	{
		Event Player.points -= 2000;
		Wait(0.250, Ignore Condition);
		Event Player.sprintburstperk = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("strong-arm perk")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-3.804, 0.542, -26.678)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 3000;
		Global.powerconnected == 1;
		Event Player.strongarmperk == 0;
	}

	actions
	{
		Event Player.points -= 3000;
		Wait(0.250, Ignore Condition);
		Event Player.strongarmperk = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("l")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-3.804, 0.542, -26.678)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 3000;
		Global.powerconnected == 1;
		Event Player.strongimpulse == 0;
	}

	actions
	{
		Event Player.points -= 3000;
		Wait(0.250, Ignore Condition);
		Event Player.strongimpulse = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK buy double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Vector(-63.866, 0.809, -49.014)) < 1.500;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points >= 2000;
		Global.powerconnected == 1;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.points -= 2000;
		Wait(0.250, Ignore Condition);
		Event Player.doublemag = 1;
		Wait(0.250, Ignore Condition);
		Communicate(Event Player, Emote Up);
		Wait(0.050, Ignore Condition);
		Set Move Speed(Event Player, 0);
		Wait(2, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("PERK moira ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 0.025;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PERK dva ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.magazines -= 0.025;
		Wait(0.125, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PERK hanzo ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.magazines -= 0.125;
	}
}

rule("PERK doomfist ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.magazines -= 0.125;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("PERK player hit speed boost sprint burst")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Event Player.sprintburstperk == 1;
	}

	actions
	{
		Set Move Speed(Event Player, 180);
		Wait(1, Ignore Condition);
		Set Move Speed(Event Player, 105);
	}
}

rule("player hit speed boost default")
{
	event
	{
		Player Took Damage;
		Team 1;
		All;
	}

	conditions
	{
		Event Damage == True;
		Event Player.sprintburstperk == 0;
	}

	actions
	{
		Set Move Speed(Event Player, 150);
		Wait(1, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("enable mei left click")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		Event Player.magazines > 0;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("doomfist ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 0.250;
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("hanzo ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 0.250;
	}
}

rule("disable ashe reload for a more logical reload")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		Is Reloading(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Interact));
		Wait(4, Ignore Condition);
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Interact));
	}
}

rule("Revive Player 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[4]) <= 4;
		Event Player != Players In Slot(4, Team 1);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.C = Players In Slot(2, Team 1);
		Chase Player Variable Over Time(Players In Slot(4, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(4, Team 1), Event Player);
		Resurrect(Players In Slot(4, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.Died[2], 4);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Players In Slot(4, Team 1), 100);
		Global.Died[2] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 300, String("Points"))));
		All Players(Team 1).Q = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(4, Team 1), Null, Phased Out, 5);
	}
}

rule("Cancel Revive Player 5")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[2]) > 4;
		Event Player != Players In Slot(4, Team 1);
	}

	actions
	{
		Players In Slot(4, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(4, Team 1), C);
	}
}

rule("Revive Player 6")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[5]) <= 4;
		Event Player != Players In Slot(5, Team 1);
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.C = Players In Slot(5, Team 1);
		Chase Player Variable Over Time(Players In Slot(5, Team 1), C, 4, 2 + Global.P * 2, Destination and Duration);
		Wait(2 + Global.P * 2, Abort When False);
		Teleport(Players In Slot(5, Team 1), Event Player);
		Resurrect(Players In Slot(5, Team 1));
		Global.P += 1;
		disabled Wait(0.250, Ignore Condition);
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.Died[3], 4);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(White), Players In Slot(5, Team 1), 100);
		Global.Died[3] = Vector(500, 0, 500);
		Event Player.points += 100 * Event Player.H;
		Skip If(Event Player.H != 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 100, String("Points"))));
		Skip If(Event Player.H == 1, 1);
		Small Message(Event Player, String("{0} + {1}", String(""), String("{0} {1}", 300, String("Points"))));
		All Players(Team 1).HideHints = 0;
		Global.R += 100 * Event Player.H;
		Set Status(Players In Slot(5, Team 1), Null, Phased Out, 5);
	}
}

rule("Cancel Revive Player 6")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.Died[3]) > 4;
		Event Player != Players In Slot(3, Team 1);
	}

	actions
	{
		Players In Slot(3, Team 1).C = 0;
		Stop Chasing Player Variable(Players In Slot(3, Team 1), C);
	}
}

rule("ZOMBIE set winston features zombie")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	actions
	{
		Start Scaling Player(Event Player, 0.500, True);
		Start Modifying Hero Voice Lines(Event Player, 1.500, True);
	}
}

rule("ZOMBIE set winston always has ult")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Winston;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("winston pack a punch ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Player.Packapunch == 1;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Event Player.magazines = 50;
		Set Ability 1 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("ammo message")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.magazines == 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("NO AMMO"));
		Wait(5, Ignore Condition);
		Small Message(Event Player, Custom String("MELEE BONUS DAMAGE"));
	}
}

rule("junkrat ultimate fix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Damage Received(Event Player, 0);
		Wait(3, Ignore Condition);
		Set Damage Received(Event Player, 100);
	}
}

rule("disable unimportant features")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	actions
	{
		Disable Game Mode HUD(Event Player);
		Disable Game Mode In-World UI(Event Player);
		disabled Disable Hero HUD(Event Player);
		Disable Nameplates(Event Player, All Players(All Teams));
		disabled Disable Inspector Recording;
		Disable Messages(Event Player);
	}
}

rule("Monkey Kill (Global Var B) ALL SLOTS")
{
	event
	{
		Player Died;
		Team 2;
		All;
	}

	actions
	{
		Event Player.B = Random Integer(1, 50);
		Skip If(Event Player.B != 1, 1);
		Global.M[0] = Nearest Walkable Position(Event Player) + Vector(0, 0.500, 0);
		Set Ultimate Charge(Event Player, 0);
		Wait(0.200, Ignore Condition);
		Global.numberofzombies -= 1;
		Skip If(Global.numberofzombies < Number Of Living Players(Team 2), 1);
		Respawn(Event Player);
	}
}

rule("ZOMBIE spawn little winston rien 21 - 25")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(21);
		Global.roundnumber / 1 < Absolute Value(26);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("Spawn rien genji 26 - 30")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(26);
		Global.roundnumber / 1 < Absolute Value(30);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Reinhardt), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 1, 30);
	}
}

rule("spawn winston genji 31- 35")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(31);
		Global.roundnumber / 1 < Absolute Value(35);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 8, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 9, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 10, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 11, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 1, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Winston), Team 2, 12, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 13, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Winston), Team 2, 14, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Genji), Team 2, 15, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("Spawn moira genji 35 - infinite (for now)")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Has Spawned(All Players(Team 1)) == True;
		Global.roundnumber / 1 >= Absolute Value(35);
		disabled Global.roundnumber / 1 < Absolute Value(35);
		Global.numberofzombies >= 4;
	}

	actions
	{
		Wait(9, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Countdown);
		Wait(3, Abort When False);
		Communicate(Random Value In Array(All Living Players(Team 1)), Incoming);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 0, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 1, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 2, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 3, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 4, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 5, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 6, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 7, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 3, 30);
		Wait(0.500, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 8, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 9, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 2, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 10, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 11, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Skip If(Number Of Players(Team 1) > 1, 30);
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Genji), Team 2, 12, Random Value In Array(Global.Y), Vector(0, 0, 0));
		Wait(1, Ignore Condition);
		Create Dummy Bot(Hero(Moira), Team 2, 13, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Genji), Team 2, 14, Random Value In Array(Global.Y), Vector(0, 0, 0));
		disabled Wait(1, Ignore Condition);
		disabled Create Dummy Bot(Hero(Moira), Team 2, 15, Random Value In Array(Global.Y), Vector(0, 0, 0));
	}
}

rule("Zombie set genji always has ult")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("set zen ult to phase out")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 6);
	}
}

disabled rule("Pickup max ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Distance Between(Event Player, Global.M[5]) <= 1.500;
		All Players(Team 1).G[5] == False;
		Global.roundnumber >= 1;
	}

	actions
	{
		Global.M[5] = Vector(500, 25, 500);
		All Players(Team 1).G[5] = True;
		All Players(Team 1).S[5] = 1;
		Big Message(All Players(All Teams), Custom String("Max ammo!"));
		Event Player.magazines = 10;
		disabled Create HUD Text(All Players(All Teams), String("Points"), Null, Null, Top, 1, Color(Yellow), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled All Players(Team 1).I[1] = Last Text ID;
		Wait(3, Ignore Condition);
		All Players(Team 1).G[1] = False;
		disabled Destroy HUD Text(All Players(Team 1).I[1]);
		All Players(Team 1).S[1] = 0;
	}
}

rule("Remove bots when player joins mid round 2")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) == 2;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, 17);
		Destroy Dummy Bot(Team 2, 16);
		Destroy Dummy Bot(Team 2, 15);
		Destroy Dummy Bot(Team 2, 14);
	}
}

rule("Remove bots when player joins mid round 3")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) == 3;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, 17);
		Destroy Dummy Bot(Team 2, 16);
		Destroy Dummy Bot(Team 2, 15);
		Destroy Dummy Bot(Team 2, 14);
		Destroy Dummy Bot(Team 2, 13);
		Destroy Dummy Bot(Team 2, 12);
		Destroy Dummy Bot(Team 2, 11);
		Destroy Dummy Bot(Team 2, 10);
	}
}

rule("Remove bots when player joins mid round 4")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Number Of Players(Team 1) == 4;
	}

	actions
	{
		Destroy Dummy Bot(Team 2, 17);
		Destroy Dummy Bot(Team 2, 16);
		Destroy Dummy Bot(Team 2, 15);
		Destroy Dummy Bot(Team 2, 14);
		Destroy Dummy Bot(Team 2, 13);
		Destroy Dummy Bot(Team 2, 12);
		Destroy Dummy Bot(Team 2, 11);
		Destroy Dummy Bot(Team 2, 10);
		Destroy Dummy Bot(Team 2, 9);
		Destroy Dummy Bot(Team 2, 8);
	}
}

rule("set Torb zombie features zombie")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Torbjörn;
	}

	actions
	{
		Start Scaling Player(Event Player, 1.500, True);
		Start Modifying Hero Voice Lines(Event Player, 0.500, True);
	}
}

rule("lucio explosive rounds")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Damage != Is Meleeing(Event Player);
		Event Damage != Is Firing Secondary(Event Player);
	}

	actions
	{
		Damage(Players Within Radius(Victim, 1, Team 2, Off), Null, 500);
		Damage(Players Within Radius(Victim, 2, Team 2, Off), Null, 500);
		Play Effect(All Players(Team 1), Good Explosion, Color(Green), Victim, 2);
	}
}

rule("orisa movement speed fix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Reloading(Event Player) == False;
		Event Player.magazines != 0;
	}

	actions
	{
		Set Move Speed(Event Player, 144);
	}
}

rule("orisa movement speed fix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("healing dealt points")
{
	event
	{
		Player Received Healing;
		Team 1;
		All;
	}

	conditions
	{
		Health(Healee) != Max Health(Healee);
	}

	actions
	{
		Healer.points += 10;
		Wait(0.250, Ignore Condition);
	}
}

rule("cassidy pack a punch ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Cassidy;
	}

	conditions
	{
		Event Player.Packapunch == 1;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Event Player.magazines = 50;
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("sigma ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 0.200;
	}
}

rule("sigma ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Event Player.doublemag == 1;
	}

	actions
	{
		Event Player.magazines -= 0.100;
	}
}

rule("rien ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.doublemag == 0;
	}

	actions
	{
		Event Player.magazines -= 0.250;
	}
}

rule("rien ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.doublemag == 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.magazines -= 0.125;
	}
}

rule("rien out of ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.magazines <= 0;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Wait(15, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
	}
}

rule("dva movement speed fix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.magazines != 0;
	}

	actions
	{
		Set Move Speed(Event Player, 166);
	}
}

rule("dva movement speed fix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("dva ammo")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Player.doublemag == 0;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.magazines -= 0.050;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("dva ammo double mag")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Event Player.doublemag == 1;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Event Player.magazines -= 0.025;
		Wait(0.150, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Bots Dont Attack if Not Near genji")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Genji;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) >= 1.800;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Stop Holding Button(Event Player, Button(Primary Fire));
	}
}

rule("ZOMBIE genji use reflect after hitting player")
{
	event
	{
		Player Dealt Damage;
		Team 2;
		Genji;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 2));
	}
}

rule("moira Attack if Near")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, Closest Player To(Event Player, Team 1)) < 1.800;
		Global.O == False;
	}

	actions
	{
		Wait(0.490, Abort When False);
		Press Button(Event Player, Button(Melee));
		Loop If Condition Is True;
	}
}

rule("moira fade if far away")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Moira;
	}

	conditions
	{
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T == 0),
			Current Array Element))) > 8;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(5, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("bots too far away")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Distance Between(Event Player, First Of(Sorted Array(Filtered Array(All Living Players(Team 1), Event Player.T < 2),
			Current Array Element))) > 25;
	}

	actions
	{
		disabled Wait(0.100, Ignore Condition);
		disabled Press Button(Event Player, Button(Jump));
		disabled Wait(1, Ignore Condition);
		disabled Wait(1, Abort When False);
		disabled Start Forcing Throttle(Event Player, 0, 0, 1, 1, 1, 1);
		disabled Wait(1, Ignore Condition);
		disabled Start Forcing Throttle(Event Player, 1, 1, 0, 1, 0, 1);
		disabled Wait(1, Ignore Condition);
		Wait(0.500, Abort When False);
		Teleport(Event Player, Random Value In Array(Global.Y));
		disabled Event Player.points = 0;
	}
}

rule("sombra has invisibility")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.T = 1;
		Wait(4, Ignore Condition);
		Event Player.T = 0;
		Press Button(Event Player, Button(Primary Fire));
	}
}

rule("Rule 277")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Global.D == 3;
	}

	actions
	{
		Set Damage Received(Event Player, 100);
	}
}

rule("Rule 277")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Global.D == 2;
	}

	actions
	{
		Set Damage Received(Event Player, 50);
	}
}

rule("Rule 277")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Global.D == 1;
	}

	actions
	{
		Set Damage Received(Event Player, 25);
	}
}

rule("Rule 280")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.roundnumber == 30;
	}

	actions
	{
		Create Effect(All Players(All Teams), Ring, Color(White), Vector(-114.631, 1.526, -19.075), 2, Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("The end : 50,000 points"), Vector(-114.631, 1.526, -19.075), 1,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
	}
}

rule("Rule 281")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player == Players Within Radius(Vector(-114.631, 1.526, -19.075), 2, Team 1, Off);
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.points == 500000;
	}

	actions
	{
		Set Slow Motion(40);
		Wait(2, Ignore Condition);
		Declare Team Victory(Team 1);
	}
}

rule("Ana pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
		Is In View Angle(Event Player, All Living Players(Team 1), 5) == True;
	}

	actions
	{
		Set Damage Dealt(Players in View Angle(Event Player, Team 1, 5), 1000);
		Wait(8, Ignore Condition);
		"need to make sure this gives the right players variable."
		Set Damage Dealt(All Players(Team 1), Event Player.damagevariable);
	}
}

rule("Ashe Pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ashe;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Event Was Critical Hit == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Burning, 4);
		Start Damage Over Time(Victim, Event Player, 4, 150);
	}
}

rule("Baptiste Pack a Punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Remove All Health Pools From Player(Event Player);
		Wait(0.016, Ignore Condition);
		Add Health Pool To Player(Event Player, Health, 100, False, False);
	}
}

rule("Bastion Pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Primary(Event Player) == True;
		Is In Alternate Form(Event Player) == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(1.500, Abort When False);
		Loop If Condition Is True;
	}
}

rule("brigitte Pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Start Scaling Player(Event Player, 1.500, True);
		Add Health Pool To Player(Event Player, Health, 1000, False, False);
		Wait(8, Ignore Condition);
		Stop Scaling Player(Event Player);
		Remove All Health Pools From Player(Event Player);
	}
}

rule("brigitte Pack a punch 2")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.Packapunch >= 1;
		Has Status(Victim, Stunned) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 4);
	}
}

rule("Dva pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 400, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound, 0,
			25, 5, 0, All Living Players(Team 2), 0.500);
	}
}

rule("Doomfist Pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Set Status(Victim, Null, Knocked Down, 4);
	}
}

rule("echo pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Event Player.Packapunch >= 1;
	}

	actions
	{
		"needs more than 1 but will fix later"
		Create Homing Projectile(Echo Sticky Bomb, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Genji pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Event Player.Packapunch >= 1;
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Create Projectile(Reinhardt Fire Strike, Event Player, Eye Position(Event Player), Facing Direction Of(Event Player), To World,
			Damage, Team 2, 300, 1, 0, Bad Explosion, Explosion Sound, 0, 10, 5, 0, 0, 0);
	}
}

rule("Hanzo pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 8);
	}
}

rule("illari pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Illari;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Knocked Down, 4);
	}
}

rule("junker queen pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junker Queen;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 4);
	}
}

rule("junkrat pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Victim, 8);
		Damage(Players Within Radius(Victim, 8, All Teams, Off), Attacker, 300);
	}
}

disabled rule("juno pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Echo Sticky Bomb, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound, 0,
			25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(0.150, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Kiriko pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Kiriko;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Players Within Radius(Event Player, 15, Team 2, Off), 50);
		Wait(8, Ignore Condition);
		If(Global.roundnumber <= 6);
			Set Move Speed(All Players(Team 2), 52 + 8 * Global.roundnumber);
		Else If(Global.roundnumber > 6);
			Set Move Speed(All Players(Team 2), 100);
	}
}

rule("lifeweaver pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lifeweaver;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Add Health Pool To Player(Players in View Angle(Event Player, Team 1, 5), Health, 100, False, False);
	}
}

rule("lucio pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 3, Team 2, Surfaces And Enemy Barriers), Event Player, Rooted, 3);
	}
}

rule("mauga pack a punch")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Mauga;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("mei pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}
}

rule("Mercy pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Mercy;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
		Damage(Players Within Radius(Victim, 5, Team 2, Off), Attacker, 400);
	}
}

rule("Moira pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Moira;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Event Player, Rooted, 4);
		Wait(0.250, Ignore Condition);
	}
}

rule("Orisa pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Scaling Player(Event Player, 2, True);
		Set Damage Dealt(Event Player, 1000);
		Wait Until(False, 8);
		Start Scaling Player(Event Player, 1, True);
		Set Damage Dealt(Event Player, Event Player.damagevariable);
	}
}

rule("Pharah pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Ramattra pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ramattra;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		All Living Players(Team 1).points += 1000;
		All Living Players(Team 1).magazines += 5;
	}
}

rule("Reinhardt pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(All Living Players(Team 2), Event Player, Knocked Down, 8);
	}
}

rule("Roadhog pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Secondary(Event Player) == True;
		Ability Resource(Event Player, Button(Secondary Fire)) > 0;
	}

	actions
	{
		Start Heal Over Time(Players Within Radius(Event Player, 5, Team 1, Surfaces And Enemy Barriers), Event Player, 2, 20);
		Create Effect(All Players(Team 1), Ring, Color(Orange), Event Player, 5, Visible To Position and Radius);
		Wait Until(False, 5);
		Destroy Effect(Last Created Entity);
	}
}

rule("Sigma pack a punch")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Damage(Players Within Radius(Victim, 5, Team 2, Off), Event Player, 200);
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
	}
}

rule("Sigma part 2 pack a punch")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Sigma;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
	}

	actions
	{
		Event Player.points += 50;
	}
}

rule("Sojourn pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sojourn;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 3, Team 2, Off), Event Player, Knocked Down, 4);
	}
}

rule("Soldier: 76 pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Create Homing Projectile(Pharah Rocket, Event Player, Eye Position(Event Player) + Facing Direction Of(Event Player),
			Facing Direction Of(Event Player), To World, Damage, Team 2, 500, 1, 15, Ashe Dynamite Explosion Effect, Explosion Sound,
			0.200, 25, 5, 0, All Living Players(Team 2), 0.500);
	}
}

rule("Sombra pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		disabled Number Of Players(Team 1) > 1;
		Event Player.Packapunch >= 1;
		Is Firing Primary(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
		Is Meleeing(Event Player) == False;
	}

	actions
	{
		Wait(2, Abort When False);
		Event Player.T = 1;
		Wait(4, Ignore Condition);
		Event Player.T = 0;
	}
}

rule("Symmetra pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 10);
	}
}

rule("Torbjorn pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Communicating(Event Player, Need Healing) == True;
		Global.dispencerplaced == 0;
	}

	actions
	{
		Event Player.dispencereffect = Empty Array;
		Wait(0.016, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Green), Position Of(Event Player), 0.800, Visible To);
		Modify Player Variable(Event Player, dispencereffect, Append To Array, Last Created Entity);
		Wait(0.016, Ignore Condition);
		Create Effect(All Players(All Teams), Sphere, Color(Green), Vector(0, 1.300, 0) + Position Of(Event Player), 0.800, Visible To);
		Modify Player Variable(Event Player, dispencereffect, Append To Array, Last Created Entity);
		Wait(0.016, Ignore Condition);
		Create Effect(All Players(All Teams), Ring, Color(Green), Position Of(Event Player), 3.500, Visible To);
		Modify Player Variable(Event Player, dispencereffect, Append To Array, Last Created Entity);
		Global.dispencerposition = Evaluate Once(Position Of(Event Player));
		Global.dispencerplaced = 1;
		Wait(30, Ignore Condition);
		Global.dispencerplaced = 2;
		Play Effect(Event Player, Debuff Impact Sound, Color(White), Event Player, 60);
		Wait(0.100, Ignore Condition);
		Destroy Effect(Event Player.dispencereffect[0]);
		Destroy Effect(Event Player.dispencereffect[1]);
		Destroy Effect(Event Player.dispencereffect[2]);
		Wait(0.100, Ignore Condition);
		Modify Player Variable At Index(Event Player, dispencereffect, 0, Remove From Array By Index, 0);
		Modify Player Variable At Index(Event Player, dispencereffect, 1, Remove From Array By Index, 0);
		Modify Player Variable At Index(Event Player, dispencereffect, 2, Remove From Array By Index, 0);
		Wait(60, Ignore Condition);
		Global.dispencerplaced = 0;
	}
}

rule("Torbjorn part 2 pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Players Within Radius(Global.dispencerposition, 3.500, Team 1, Surfaces And Enemy Barriers) == True;
		Global.dispencerplaced == 1;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.currentmagazines += 0.200;
		Wait(0.500, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Tracer pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Evaluate Once(Position Of(Event Player)), 5, Team 2, Off), Event Player, Stunned, 4);
	}
}

rule("venture pack a punch")
{
	event
	{
		Player Dealt Final Blow;
		Team 1;
		Venture;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Meleeing(Event Player) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Blue), Victim, 5);
		Damage(Players Within Radius(Victim, 5, All Teams, Off), Attacker, 400);
	}
}

rule("Widowmaker pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Event Player.T = 1;
		If(Number Of Players(Team 1) < 2);
			Wait Until(False, 4);
			Event Player.T = 0;
		Else If(Number Of Players(Team 1) >= 2);
			Wait Until(False, 16);
			Event Player.T = 0;
	}
}

rule("Winston pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Event Player, Unkillable, 10);
	}
}

rule("Wrecking ball pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Facing(Players Within Radius(Event Player, 20, Team 2, Off), Evaluate Once(Position Of(Event Player)), 100, To World,
			Direction and Turn Rate);
		Wait(6, Ignore Condition);
		Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position(First Of(Sorted Array(Filtered Array(
			All Living Players(Team 1), Current Array Element.T == 0), Distance Between(Event Player, Current Array Element))))), 400,
			To World, Direction and Turn Rate);
	}
}

rule("Zarya pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player) == True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		Else If(Is Using Ability 2(Event Player) == True);
			Set Ability Cooldown(Event Player, Button(Ability 2), 0);
	}
}

rule("Zenyatta pack a punch")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Event Player.Packapunch >= 1;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Damage(Players Within Radius(Event Player, 10.500, Team 2, Surfaces And Enemy Barriers), Event Player, 300);
		Wait(1, Abort When False);
		Loop If Condition Is True;
	}
}